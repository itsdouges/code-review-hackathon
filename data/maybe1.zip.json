{"files": [{"comment": "0", "fileextention": "sln", "code": "0", "hash": "efac40d72175763d42f8a132d3e35861", "averagelinelength": 40, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "Mi9.sln", "content": "\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 2013\nVisualStudioVersion = 12.0.31101.0\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Mi9\", \"Mi9\\Mi9.csproj\", \"{45A1DB94-BE54-447B-9DD9-C199DC0F8D95}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{45A1DB94-BE54-447B-9DD9-C199DC0F8D95}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{45A1DB94-BE54-447B-9DD9-C199DC0F8D95}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{45A1DB94-BE54-447B-9DD9-C199DC0F8D95}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{45A1DB94-BE54-447B-9DD9-C199DC0F8D95}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n", "filescount": "0", "linescount": 23, "location": "", "effortyears": 0, "languagename": "Unknown", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "gitignore", "code": "189", "hash": "8318cb12f3c01e49ac32640f75fedef5", "averagelinelength": 13, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/m_danker/medibra", "language": "Git Ignore", "md5hash": "8318cb12f3c01e49ac32640f75fedef5", "filename": ".gitignore", "source": "Bitbucket", "linescount": 189, "reponame": "Medibra", "id": 91981439, "location": ""}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "Git Ignore", "md5hash": "8318cb12f3c01e49ac32640f75fedef5", "filename": ".gitignore", "source": "Bitbucket", "linescount": 189, "reponame": "PhoneBook App", "id": 92051398, "location": ""}, {"sourceurl": "https://github.com/Anhph68/NewTortoiseGit", "language": "Git Ignore", "md5hash": "11a9d67f55c6cac9ccfc0da472bc2ae6", "filename": ".gitignore", "source": "Github", "linescount": 191, "reponame": "NewTortoiseGit", "id": 92706310, "location": ""}], "blank": "0", "estimatedcost": 0, "filename": ".gitignore", "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Roslyn cache directories\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n# NuGet Packages Directory\npackages/*\n## TODO: If the tool you use requires repositories.config\n## uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since\n# NuGet packages use it for MSBuild targets.\n# This line needs to be after the ignore of the build folder\n# (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml", "filescount": "1", "linescount": 189, "location": "", "effortyears": 0, "languagename": "Git Ignore", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "gitattributes", "code": "0", "hash": "13f0aecd22cc1f06c8225ae5e692ff31", "averagelinelength": 38, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": ".gitattributes", "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n", "filescount": "0", "linescount": 64, "location": "", "effortyears": 0, "languagename": "Unknown", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "config", "code": "26", "hash": "8e4d84e58a2aff74fce327269d2d05ca", "averagelinelength": 38, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Bitbucket", "linescount": 31, "reponame": "RealEstateBootstrap", "id": 91911873, "location": "/_PropertyCrawler/Properties.Web.API"}, {"sourceurl": "https://bitbucket.org/jesse_temple/omaha", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Bitbucket", "linescount": 31, "reponame": "Omaha", "id": 91982644, "location": "/Omaha"}, {"sourceurl": "https://bitbucket.org/amylarsak/savedatabase", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Bitbucket", "linescount": 31, "reponame": "SaveDatabase", "id": 91985938, "location": "/SaveTeam"}, {"sourceurl": "https://bitbucket.org/jvporterfield/mvc-class-jenna", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Bitbucket", "linescount": 31, "reponame": "MVC Class - Jenna", "id": 91988476, "location": "/MvcClass"}, {"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "ASP.Net", "md5hash": "c3f37564813aafb860f18a04cf94d8b5", "filename": "Web.Debug.config", "source": "Bitbucket", "linescount": 31, "reponame": "Messenger", "id": 92001409, "location": "/Messenger"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Bitbucket", "linescount": 31, "reponame": "PhoneBook App", "id": 92051407, "location": "/AddressBook"}, {"sourceurl": "https://github.com/Anhph68/NewTortoiseGit", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "NewTortoiseGit", "id": 92706445, "location": "/THKQKT/THKQKT"}, {"sourceurl": "https://github.com/Anhph68/NewTortoiseGit", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "NewTortoiseGit", "id": 92707217, "location": "/TDKT/TDKT"}, {"sourceurl": "https://github.com/webbage/webbage.chat", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "webbage.chat", "id": 92878199, "location": "/webbage.chat"}, {"sourceurl": "https://github.com/tchaar/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "Thinktecture.IdentityServer.v3", "id": 93142674, "location": "/samples/Clients/MvcOwinWsFederation"}, {"sourceurl": "https://github.com/BlueInt32/velib-and-furious", "language": "ASP.Net", "md5hash": "c3f37564813aafb860f18a04cf94d8b5", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "velib-and-furious", "id": 93219905, "location": ""}, {"sourceurl": "https://github.com/dogu/Demo-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "Demo-MVC", "id": 93270991, "location": "/Demo.Mvc"}, {"sourceurl": "https://github.com/jewpaltz/Siddur", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "Siddur", "id": 93329063, "location": "/Siddur"}, {"sourceurl": "https://github.com/chloeunrau/frapp", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "frapp", "id": 94336638, "location": ""}, {"sourceurl": "https://github.com/mahiz/Woggle", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "Woggle", "id": 94711210, "location": "/source/Web.Host"}, {"sourceurl": "https://github.com/rLapolli/EnderecoWeb", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "EnderecoWeb", "id": 94843065, "location": "/EnderecosWeb"}, {"sourceurl": "https://github.com/dennismi/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "Thinktecture.IdentityServer.v3", "id": 95290200, "location": "/samples/Clients/MvcOwinWsFederation"}, {"sourceurl": "https://github.com/mahiz/DummyOwinAuth", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "DummyOwinAuth", "id": 95407154, "location": "/SampleMvcApp"}, {"sourceurl": "https://github.com/nrock/MongoCms", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MongoCms", "id": 95680611, "location": "/Source/MongoCms.Web"}, {"sourceurl": "https://github.com/phorozan/CustomerList", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "CustomerList", "id": 95822171, "location": "/CustomerList"}, {"sourceurl": "https://github.com/ardalis/MontyHallMvc", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MontyHallMvc", "id": 96206972, "location": "/MontyHall"}, {"sourceurl": "https://github.com/akshitamathur/musicrepo", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "musicrepo", "id": 96229149, "location": "/Music"}, {"sourceurl": "https://github.com/migfig/MegaDropOS", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MegaDropOS", "id": 96427951, "location": "/MegaDrop"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96491589, "location": "/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96491770, "location": "/Module 6 - Introduction to Bootstrap/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96491916, "location": "/Module 5 - Customizing Views/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492059, "location": "/Module 2 - Models in MVC/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492202, "location": "/Module 7 - Introduction to Authentication/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492384, "location": "/Module 4 - Customizing Controllers/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492542, "location": "/Module 3 - Visual Studio tools/MVCMusicStore"}, {"sourceurl": "https://github.com/bruceprentice/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "Thinktecture.IdentityServer.v3", "id": 96628658, "location": "/samples/Clients/MvcOwinWsFederation"}, {"sourceurl": "https://github.com/jamescrowley/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "8e4d84e58a2aff74fce327269d2d05ca", "filename": "Web.Debug.config", "source": "Github", "linescount": 31, "reponame": "Thinktecture.IdentityServer.v3", "id": 97580204, "location": "/samples/Clients/MvcOwinWsFederation"}], "blank": "4", "estimatedcost": 0, "filename": "Web.Debug.config", "content": "<?xml version=\"1.0\"?>\n\n<!-- For more information on using Web.config transformation visit http://go.microsoft.com/fwlink/?LinkId=301874 -->\n\n<configuration xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\">\n  <!--\n    In the example below, the \"SetAttributes\" transform will change the value of\n    \"connectionString\" to use \"ReleaseSQLServer\" only when the \"Match\" locator\n    finds an attribute \"name\" that has a value of \"MyDB\".\n\n    <connectionStrings>\n      <add name=\"MyDB\"\n        connectionString=\"Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True\"\n        xdt:Transform=\"SetAttributes\" xdt:Locator=\"Match(name)\"/>\n    </connectionStrings>\n  -->\n  <system.web>\n    <!--\n      In the example below, the \"Replace\" transform will replace the entire\n      <customErrors> section of your Web.config file.\n      Note that because there is only one customErrors section under the\n      <system.web> node, there is no need to use the \"xdt:Locator\" attribute.\n\n      <customErrors defaultRedirect=\"GenericError.htm\"\n        mode=\"RemoteOnly\" xdt:Transform=\"Replace\">\n        <error statusCode=\"500\" redirect=\"InternalError.htm\"/>\n      </customErrors>\n    -->\n  </system.web>\n</configuration>\n", "filescount": "1", "linescount": 31, "location": "/Mi9", "effortyears": 0, "languagename": "ASP.Net", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "config", "code": "53", "hash": "0e76bfc28df43416a3bdb4d9ced61702", "averagelinelength": 44, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "Web.config", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n  For more information on how to configure your ASP.NET application, please visit\n  http://go.microsoft.com/fwlink/?LinkId=301879\n  -->\n<configuration>\n  <appSettings>\n    <add key=\"webpages:Version\" value=\"3.0.0.0\" />\n    <add key=\"webpages:Enabled\" value=\"false\" />\n    <add key=\"ClientValidationEnabled\" value=\"true\" />\n    <add key=\"UnobtrusiveJavaScriptEnabled\" value=\"true\" />\n  </appSettings>\n  <system.web>\n    <compilation debug=\"true\" targetFramework=\"4.5\" />\n    <httpRuntime targetFramework=\"4.5\" />\n  </system.web>\n  <system.webServer>\n    <handlers>\n      <remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\n      <remove name=\"OPTIONSVerbHandler\" />\n      <remove name=\"TRACEVerbHandler\" />\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\n    </handlers>\n  </system.webServer>\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"Newtonsoft.Json\" culture=\"neutral\" publicKeyToken=\"30ad4fe6b2a6aeed\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-6.0.0.0\" newVersion=\"6.0.0.0\" />\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Web.Optimization\" publicKeyToken=\"31bf3856ad364e35\" />\n        <bindingRedirect oldVersion=\"1.0.0.0-1.1.0.0\" newVersion=\"1.1.0.0\" />\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"WebGrease\" publicKeyToken=\"31bf3856ad364e35\" />\n        <bindingRedirect oldVersion=\"1.0.0.0-1.5.2.14234\" newVersion=\"1.5.2.14234\" />\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Web.Helpers\" publicKeyToken=\"31bf3856ad364e35\" />\n        <bindingRedirect oldVersion=\"1.0.0.0-3.0.0.0\" newVersion=\"3.0.0.0\" />\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Web.WebPages\" publicKeyToken=\"31bf3856ad364e35\" />\n        <bindingRedirect oldVersion=\"1.0.0.0-3.0.0.0\" newVersion=\"3.0.0.0\" />\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Web.Mvc\" publicKeyToken=\"31bf3856ad364e35\" />\n        <bindingRedirect oldVersion=\"1.0.0.0-5.2.2.0\" newVersion=\"5.2.2.0\" />\n      </dependentAssembly>\n    </assemblyBinding>\n  </runtime>\n</configuration>\n", "filescount": "1", "linescount": 54, "location": "/Mi9", "effortyears": 0, "languagename": "ASP.Net", "estimateddevelopers": 0, "technologies": []}, {"comment": "1", "fileextention": "cs", "code": "18", "hash": "33b4681db76f12feb55965b758600f3b", "averagelinelength": 23, "effortmonths": "0.04", "duplicates": [], "blank": "1", "estimatedcost": "398", "filename": "MiApiController.cs", "content": "using Mi9.Model;\nusing Mi9.Model.Request;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Http;\n\nnamespace Mi9\n{\n\tpublic class MiApiController<T> : ApiController\n\t\twhere T : IMiEntity\n\t{\n\t\t// The default Web API functionality only checks if the model is valid, without checking that it's also not null - weird.\n\t\tprotected bool IsModelValid(Request<T> requestEntity)\n\t\t{\n\t\t\treturn ModelState.IsValid && requestEntity != null;\n\t\t}\n\t}\n}", "filescount": "1", "linescount": 20, "location": "/Mi9", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.05", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "22", "hash": "7a27560f8a91c05e83c220fc204a936a", "averagelinelength": 23, "effortmonths": "0.04", "duplicates": [], "blank": "1", "estimatedcost": "491", "filename": "Global.asax.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Http;\nusing System.Web.Mvc;\nusing System.Web.Optimization;\nusing System.Web.Routing;\n\nnamespace Mi9\n{\n\tpublic class WebApiApplication : System.Web.HttpApplication\n\t{\n\t\tprotected void Application_Start()\n\t\t{\n\t\t\tAreaRegistration.RegisterAllAreas();\n\t\t\tGlobalConfiguration.Configure(WebApiConfig.Register);\n\t\t\tFilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n\t\t\tRouteConfig.RegisterRoutes(RouteTable.Routes);\n\t\t\tBundleConfig.RegisterBundles(BundleTable.Bundles);\n\t\t}\n\t}\n}\n", "filescount": "1", "linescount": 24, "location": "/Mi9", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.06", "technologies": []}, {"comment": "0", "fileextention": "config", "code": "27", "hash": "1693029790488d88e0f63c6e4d7a71bd", "averagelinelength": 39, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Bitbucket", "linescount": 32, "reponame": "RealEstateBootstrap", "id": 91911863, "location": "/_PropertyCrawler/Properties.Web.API"}, {"sourceurl": "https://bitbucket.org/jesse_temple/omaha", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Bitbucket", "linescount": 32, "reponame": "Omaha", "id": 91982640, "location": "/Omaha"}, {"sourceurl": "https://bitbucket.org/amylarsak/savedatabase", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Bitbucket", "linescount": 32, "reponame": "SaveDatabase", "id": 91985935, "location": "/SaveTeam"}, {"sourceurl": "https://bitbucket.org/jvporterfield/mvc-class-jenna", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Bitbucket", "linescount": 32, "reponame": "MVC Class - Jenna", "id": 91988465, "location": "/MvcClass"}, {"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "ASP.Net", "md5hash": "9a4144898b887dcc4a1a619faf275676", "filename": "Web.Release.config", "source": "Bitbucket", "linescount": 32, "reponame": "Messenger", "id": 92001402, "location": "/Messenger"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Bitbucket", "linescount": 32, "reponame": "PhoneBook App", "id": 92051405, "location": "/AddressBook"}, {"sourceurl": "https://github.com/Anhph68/NewTortoiseGit", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "NewTortoiseGit", "id": 92706433, "location": "/THKQKT/THKQKT"}, {"sourceurl": "https://github.com/Anhph68/NewTortoiseGit", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "NewTortoiseGit", "id": 92707201, "location": "/TDKT/TDKT"}, {"sourceurl": "https://github.com/webbage/webbage.chat", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "webbage.chat", "id": 92878179, "location": "/webbage.chat"}, {"sourceurl": "https://github.com/tchaar/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "Thinktecture.IdentityServer.v3", "id": 93142657, "location": "/samples/Clients/MvcOwinWsFederation"}, {"sourceurl": "https://github.com/BlueInt32/velib-and-furious", "language": "ASP.Net", "md5hash": "9a4144898b887dcc4a1a619faf275676", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "velib-and-furious", "id": 93219892, "location": ""}, {"sourceurl": "https://github.com/dogu/Demo-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "Demo-MVC", "id": 93270978, "location": "/Demo.Mvc"}, {"sourceurl": "https://github.com/jewpaltz/Siddur", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "Siddur", "id": 93329050, "location": "/Siddur"}, {"sourceurl": "https://github.com/chloeunrau/frapp", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "frapp", "id": 94336633, "location": ""}, {"sourceurl": "https://github.com/mahiz/Woggle", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "Woggle", "id": 94711202, "location": "/source/Web.Host"}, {"sourceurl": "https://github.com/rLapolli/EnderecoWeb", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "EnderecoWeb", "id": 94843042, "location": "/EnderecosWeb"}, {"sourceurl": "https://github.com/dennismi/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "Thinktecture.IdentityServer.v3", "id": 95290182, "location": "/samples/Clients/MvcOwinWsFederation"}, {"sourceurl": "https://github.com/mahiz/DummyOwinAuth", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "DummyOwinAuth", "id": 95407144, "location": "/SampleMvcApp"}, {"sourceurl": "https://github.com/nrock/MongoCms", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MongoCms", "id": 95680599, "location": "/Source/MongoCms.Web"}, {"sourceurl": "https://github.com/phorozan/CustomerList", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "CustomerList", "id": 95822155, "location": "/CustomerList"}, {"sourceurl": "https://github.com/ardalis/MontyHallMvc", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MontyHallMvc", "id": 96206954, "location": "/MontyHall"}, {"sourceurl": "https://github.com/akshitamathur/musicrepo", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "musicrepo", "id": 96229122, "location": "/Music"}, {"sourceurl": "https://github.com/migfig/MegaDropOS", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MegaDropOS", "id": 96427935, "location": "/MegaDrop"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96491580, "location": "/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96491762, "location": "/Module 6 - Introduction to Bootstrap/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96491906, "location": "/Module 5 - Customizing Views/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492050, "location": "/Module 2 - Models in MVC/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492192, "location": "/Module 7 - Introduction to Authentication/MVCMusicStore/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492370, "location": "/Module 4 - Customizing Controllers/MVCMusicStore"}, {"sourceurl": "https://github.com/jongalloway/MVA-Introduction-to-ASPNET-MVC", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "MVA-Introduction-to-ASPNET-MVC", "id": 96492530, "location": "/Module 3 - Visual Studio tools/MVCMusicStore"}, {"sourceurl": "https://github.com/bruceprentice/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "Thinktecture.IdentityServer.v3", "id": 96628646, "location": "/samples/Clients/MvcOwinWsFederation"}, {"sourceurl": "https://github.com/jamescrowley/Thinktecture.IdentityServer.v3", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "Thinktecture.IdentityServer.v3", "id": 97580181, "location": "/samples/Clients/MvcOwinWsFederation"}, {"sourceurl": "https://github.com/jsakamoto/chomado-problem-server", "language": "ASP.Net", "md5hash": "1693029790488d88e0f63c6e4d7a71bd", "filename": "Web.Release.config", "source": "Github", "linescount": 32, "reponame": "chomado-problem-server", "id": 97651193, "location": "/ChomadProblemServer"}], "blank": "4", "estimatedcost": 0, "filename": "Web.Release.config", "content": "<?xml version=\"1.0\"?>\n\n<!-- For more information on using Web.config transformation visit http://go.microsoft.com/fwlink/?LinkId=301874 -->\n\n<configuration xmlns:xdt=\"http://schemas.microsoft.com/XML-Document-Transform\">\n  <!--\n    In the example below, the \"SetAttributes\" transform will change the value of\n    \"connectionString\" to use \"ReleaseSQLServer\" only when the \"Match\" locator\n    finds an attribute \"name\" that has a value of \"MyDB\".\n\n    <connectionStrings>\n      <add name=\"MyDB\"\n        connectionString=\"Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True\"\n        xdt:Transform=\"SetAttributes\" xdt:Locator=\"Match(name)\"/>\n    </connectionStrings>\n  -->\n  <system.web>\n    <compilation xdt:Transform=\"RemoveAttributes(debug)\" />\n    <!--\n      In the example below, the \"Replace\" transform will replace the entire\n      <customErrors> section of your Web.config file.\n      Note that because there is only one customErrors section under the\n      <system.web> node, there is no need to use the \"xdt:Locator\" attribute.\n\n      <customErrors defaultRedirect=\"GenericError.htm\"\n        mode=\"RemoteOnly\" xdt:Transform=\"Replace\">\n        <error statusCode=\"500\" redirect=\"InternalError.htm\"/>\n      </customErrors>\n    -->\n  </system.web>\n</configuration>\n", "filescount": "1", "linescount": 32, "location": "/Mi9", "effortyears": 0, "languagename": "ASP.Net", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "config", "code": "20", "hash": "510c7a3ea8c39161c1c70fc3cfdfdbc1", "averagelinelength": 70, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "packages.config", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<packages>\n  <package id=\"Antlr\" version=\"3.4.1.9004\" targetFramework=\"net45\" />\n  <package id=\"bootstrap\" version=\"3.0.0\" targetFramework=\"net45\" />\n  <package id=\"jQuery\" version=\"1.10.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.Mvc\" version=\"5.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.Razor\" version=\"3.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.Web.Optimization\" version=\"1.1.3\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.WebApi\" version=\"5.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.WebApi.Client\" version=\"5.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.WebApi.Core\" version=\"5.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.WebApi.HelpPage\" version=\"5.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.WebApi.WebHost\" version=\"5.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.AspNet.WebPages\" version=\"3.2.2\" targetFramework=\"net45\" />\n  <package id=\"Microsoft.Web.Infrastructure\" version=\"1.0.0.0\" targetFramework=\"net45\" />\n  <package id=\"Modernizr\" version=\"2.6.2\" targetFramework=\"net45\" />\n  <package id=\"Newtonsoft.Json\" version=\"6.0.4\" targetFramework=\"net45\" />\n  <package id=\"Respond\" version=\"1.2.0\" targetFramework=\"net45\" />\n  <package id=\"WebGrease\" version=\"1.5.2\" targetFramework=\"net45\" />\n</packages>", "filescount": "1", "linescount": 20, "location": "/Mi9", "effortyears": 0, "languagename": "ASP.Net", "estimateddevelopers": 0, "technologies": []}, {"comment": "6", "fileextention": "csproj", "code": "230", "hash": "29ba5eb5ba7ae66ec08c5c0809ad03c8", "averagelinelength": 57, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "Mi9.csproj", "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"12.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\n    <ProductVersion>\n    </ProductVersion>\n    <SchemaVersion>2.0</SchemaVersion>\n    <ProjectGuid>{45A1DB94-BE54-447B-9DD9-C199DC0F8D95}</ProjectGuid>\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\n    <OutputType>Library</OutputType>\n    <AppDesignerFolder>Properties</AppDesignerFolder>\n    <RootNamespace>Mi9</RootNamespace>\n    <AssemblyName>Mi9</AssemblyName>\n    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>\n    <MvcBuildViews>false</MvcBuildViews>\n    <UseIISExpress>true</UseIISExpress>\n    <IISExpressSSLPort />\n    <IISExpressAnonymousAuthentication />\n    <IISExpressWindowsAuthentication />\n    <IISExpressUseClassicPipelineMode />\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <Optimize>false</Optimize>\n    <OutputPath>bin\\</OutputPath>\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\n    <DebugType>pdbonly</DebugType>\n    <Optimize>true</Optimize>\n    <OutputPath>bin\\</OutputPath>\n    <DefineConstants>TRACE</DefineConstants>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n  </PropertyGroup>\n  <ItemGroup>\n    <Reference Include=\"Microsoft.CSharp\" />\n    <Reference Include=\"System\" />\n    <Reference Include=\"System.Data\" />\n    <Reference Include=\"System.Drawing\" />\n    <Reference Include=\"System.Web.Entity\" />\n    <Reference Include=\"System.Web.ApplicationServices\" />\n    <Reference Include=\"System.ComponentModel.DataAnnotations\" />\n    <Reference Include=\"System.Core\" />\n    <Reference Include=\"System.Data.DataSetExtensions\" />\n    <Reference Include=\"System.Xml.Linq\" />\n    <Reference Include=\"System.Web\" />\n    <Reference Include=\"System.Web.Abstractions\" />\n    <Reference Include=\"System.Web.Routing\" />\n    <Reference Include=\"System.Xml\" />\n    <Reference Include=\"System.Configuration\" />\n    <Reference Include=\"System.Runtime.Serialization\" />\n    <Reference Include=\"Microsoft.Web.Infrastructure, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Microsoft.Web.Infrastructure.1.0.0.0\\lib\\net40\\Microsoft.Web.Infrastructure.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Newtonsoft.Json\">\n      <HintPath>..\\packages\\Newtonsoft.Json.6.0.4\\lib\\net45\\Newtonsoft.Json.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Net.Http\">\n    </Reference>\n    <Reference Include=\"System.Net.Http.Formatting, Version=__MvcPagesVersion__, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.Client.5.2.2\\lib\\net45\\System.Net.Http.Formatting.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Net.Http.WebRequest\">\n    </Reference>\n    <Reference Include=\"System.Web.Helpers, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Microsoft.AspNet.WebPages.3.2.2\\lib\\net45\\System.Web.Helpers.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.Http, Version=__MvcPagesVersion__, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.Core.5.2.2\\lib\\net45\\System.Web.Http.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.Http.WebHost, Version=__MvcPagesVersion__, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.WebHost.5.2.2\\lib\\net45\\System.Web.Http.WebHost.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.Mvc, Version=__MvcPagesVersion__, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Microsoft.AspNet.Mvc.5.2.2\\lib\\net45\\System.Web.Mvc.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.Optimization\">\n      <HintPath>..\\packages\\Microsoft.AspNet.Web.Optimization.1.1.3\\lib\\net40\\System.Web.Optimization.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Microsoft.AspNet.Razor.3.2.2\\lib\\net45\\System.Web.Razor.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.WebPages, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Microsoft.AspNet.WebPages.3.2.2\\lib\\net45\\System.Web.WebPages.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.WebPages.Deployment, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Microsoft.AspNet.WebPages.3.2.2\\lib\\net45\\System.Web.WebPages.Deployment.dll</HintPath>\n    </Reference>\n    <Reference Include=\"System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Microsoft.AspNet.WebPages.3.2.2\\lib\\net45\\System.Web.WebPages.Razor.dll</HintPath>\n    </Reference>\n    <Reference Include=\"WebGrease\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\WebGrease.1.5.2\\lib\\WebGrease.dll</HintPath>\n    </Reference>\n    <Reference Include=\"Antlr3.Runtime\">\n      <Private>True</Private>\n      <HintPath>..\\packages\\Antlr.3.4.1.9004\\lib\\Antlr3.Runtime.dll</HintPath>\n    </Reference>\n  </ItemGroup>\n  <ItemGroup>\n    <Folder Include=\"App_Data\\\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"App_Start\\BundleConfig.cs\" />\n    <Compile Include=\"App_Start\\FilterConfig.cs\" />\n    <Compile Include=\"App_Start\\RouteConfig.cs\" />\n    <Compile Include=\"App_Start\\WebApiConfig.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ApiDescriptionExtensions.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\App_Start\\HelpPageConfig.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\Controllers\\HelpController.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\HelpPageAreaRegistration.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\HelpPageConfigurationExtensions.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\CollectionModelDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\ComplexTypeModelDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\DictionaryModelDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\EnumTypeModelDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\EnumValueDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\IModelDocumentationProvider.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\KeyValuePairModelDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\ModelDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\ModelDescriptionGenerator.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\ModelNameAttribute.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\ModelNameHelper.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\ParameterAnnotation.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\ParameterDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\ModelDescriptions\\SimpleTypeModelDescription.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\Models\\HelpPageApiModel.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\SampleGeneration\\HelpPageSampleGenerator.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\SampleGeneration\\HelpPageSampleKey.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\SampleGeneration\\ImageSample.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\SampleGeneration\\InvalidSample.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\SampleGeneration\\ObjectGenerator.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\SampleGeneration\\SampleDirection.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\SampleGeneration\\TextSample.cs\" />\n    <Compile Include=\"Areas\\HelpPage\\XmlDocumentationProvider.cs\" />\n    <Compile Include=\"Controllers\\ShowController.cs\" />\n    <Compile Include=\"Global.asax.cs\">\n      <DependentUpon>Global.asax</DependentUpon>\n    </Compile>\n    <Compile Include=\"Handlers\\ShowHandler.cs\" />\n    <Compile Include=\"MiApiController.cs\" />\n    <Compile Include=\"Model\\Episode.cs\" />\n    <Compile Include=\"Model\\Image.cs\" />\n    <Compile Include=\"Model\\IMiEntity.cs\" />\n    <Compile Include=\"Model\\Request\\Request.cs\" />\n    <Compile Include=\"Model\\Response\\ResponseDto.cs\" />\n    <Compile Include=\"Model\\Season.cs\" />\n    <Compile Include=\"Model\\Show.cs\" />\n    <Compile Include=\"Model\\Response\\ResponseWrapper.cs\" />\n    <Compile Include=\"Model\\Response\\ShowResponseDto.cs\" />\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Content Include=\"Areas\\HelpPage\\HelpPage.css\" />\n    <Content Include=\"Global.asax\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Web.config\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Shared\\_Layout.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\ResourceModel.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\Index.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\TextSample.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\SimpleTypeModelDescription.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\Samples.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\Parameters.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\ModelDescriptionLink.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\KeyValuePairModelDescription.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\InvalidSample.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\ImageSample.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\HelpPageApiModel.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\EnumTypeModelDescription.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\DictionaryModelDescription.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\ComplexTypeModelDescription.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\CollectionModelDescription.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\DisplayTemplates\\ApiGroup.cshtml\" />\n    <Content Include=\"Areas\\HelpPage\\Views\\Help\\Api.cshtml\" />\n    <Content Include=\"Web.config\" />\n    <Content Include=\"Web.Debug.config\">\n      <DependentUpon>Web.config</DependentUpon>\n    </Content>\n    <Content Include=\"Web.Release.config\">\n      <DependentUpon>Web.config</DependentUpon>\n    </Content>\n    <Content Include=\"Areas\\HelpPage\\Views\\_ViewStart.cshtml\" />\n  </ItemGroup>\n  <ItemGroup />\n  <ItemGroup>\n    <Content Include=\"packages.config\" />\n  </ItemGroup>\n  <PropertyGroup>\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">10.0</VisualStudioVersion>\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\n  </PropertyGroup>\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\n  <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"'$(VSToolsPath)' != ''\" />\n  <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"false\" />\n  <Target Name=\"MvcBuildViews\" AfterTargets=\"AfterBuild\" Condition=\"'$(MvcBuildViews)'=='true'\">\n    <AspNetCompiler VirtualPath=\"temp\" PhysicalPath=\"$(WebProjectOutputDir)\" />\n  </Target>\n  <ProjectExtensions>\n    <VisualStudio>\n      <FlavorProperties GUID=\"{349c5851-65df-11da-9384-00065b846f21}\">\n        <WebProjectProperties>\n          <UseIIS>True</UseIIS>\n          <AutoAssignPort>True</AutoAssignPort>\n          <DevelopmentServerPort>56741</DevelopmentServerPort>\n          <DevelopmentServerVPath>/</DevelopmentServerVPath>\n          <IISUrl>http://localhost:56741/</IISUrl>\n          <NTLMAuthentication>False</NTLMAuthentication>\n          <UseCustomServer>False</UseCustomServer>\n          <CustomServerUrl>\n          </CustomServerUrl>\n          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>\n        </WebProjectProperties>\n      </FlavorProperties>\n    </VisualStudio>\n  </ProjectExtensions>\n  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.\n       Other similar extension points exist, see Microsoft.Common.targets.\n  <Target Name=\"BeforeBuild\">\n  </Target>\n  <Target Name=\"AfterBuild\">\n  </Target> -->\n</Project>", "filescount": "1", "linescount": 236, "location": "/Mi9", "effortyears": 0, "languagename": "MSBuild script", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "asax", "code": "1", "hash": "c01e9dcaf8da2815b33eaaebf6ddf8a0", "averagelinelength": 46, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/azadeh-h/mi9test", "language": "ASP.Net", "md5hash": "95e9494addded2ed4e86c2e1450c4846", "filename": "Global.asax", "source": "Bitbucket", "linescount": 2, "reponame": "mi9Test", "id": 67368957, "location": "/mi9"}], "blank": "0", "estimatedcost": 0, "filename": "Global.asax", "content": "<%@ Application Codebehind=\"Global.asax.cs\" Inherits=\"Mi9.WebApiApplication\" Language=\"C#\" %>\n", "filescount": "1", "linescount": 2, "location": "/Mi9", "effortyears": 0, "languagename": "ASP.Net", "estimateddevelopers": 0, "technologies": []}, {"comment": "10", "fileextention": "cs", "code": "132", "hash": "06d460f0cd806a3ac028521a739550a9", "averagelinelength": 42, "effortmonths": "0.29", "duplicates": [], "blank": "19", "estimatedcost": "3223", "filename": "XmlDocumentationProvider.cs", "content": "using System;\nusing System.Globalization;\nusing System.Linq;\nusing System.Reflection;\nusing System.Web.Http.Controllers;\nusing System.Web.Http.Description;\nusing System.Xml.XPath;\nusing Mi9.Areas.HelpPage.ModelDescriptions;\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// A custom <see cref=\"IDocumentationProvider\"/> that reads the API documentation from an XML documentation file.\n    /// </summary>\n    public class XmlDocumentationProvider : IDocumentationProvider, IModelDocumentationProvider\n    {\n        private XPathNavigator _documentNavigator;\n        private const string TypeExpression = \"/doc/members/member[@name='T:{0}']\";\n        private const string MethodExpression = \"/doc/members/member[@name='M:{0}']\";\n        private const string PropertyExpression = \"/doc/members/member[@name='P:{0}']\";\n        private const string FieldExpression = \"/doc/members/member[@name='F:{0}']\";\n        private const string ParameterExpression = \"param[@name='{0}']\";\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"XmlDocumentationProvider\"/> class.\n        /// </summary>\n        /// <param name=\"documentPath\">The physical path to XML document.</param>\n        public XmlDocumentationProvider(string documentPath)\n        {\n            if (documentPath == null)\n            {\n                throw new ArgumentNullException(\"documentPath\");\n            }\n            XPathDocument xpath = new XPathDocument(documentPath);\n            _documentNavigator = xpath.CreateNavigator();\n        }\n\n        public string GetDocumentation(HttpControllerDescriptor controllerDescriptor)\n        {\n            XPathNavigator typeNode = GetTypeNode(controllerDescriptor.ControllerType);\n            return GetTagValue(typeNode, \"summary\");\n        }\n\n        public virtual string GetDocumentation(HttpActionDescriptor actionDescriptor)\n        {\n            XPathNavigator methodNode = GetMethodNode(actionDescriptor);\n            return GetTagValue(methodNode, \"summary\");\n        }\n\n        public virtual string GetDocumentation(HttpParameterDescriptor parameterDescriptor)\n        {\n            ReflectedHttpParameterDescriptor reflectedParameterDescriptor = parameterDescriptor as ReflectedHttpParameterDescriptor;\n            if (reflectedParameterDescriptor != null)\n            {\n                XPathNavigator methodNode = GetMethodNode(reflectedParameterDescriptor.ActionDescriptor);\n                if (methodNode != null)\n                {\n                    string parameterName = reflectedParameterDescriptor.ParameterInfo.Name;\n                    XPathNavigator parameterNode = methodNode.SelectSingleNode(String.Format(CultureInfo.InvariantCulture, ParameterExpression, parameterName));\n                    if (parameterNode != null)\n                    {\n                        return parameterNode.Value.Trim();\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        public string GetResponseDocumentation(HttpActionDescriptor actionDescriptor)\n        {\n            XPathNavigator methodNode = GetMethodNode(actionDescriptor);\n            return GetTagValue(methodNode, \"returns\");\n        }\n\n        public string GetDocumentation(MemberInfo member)\n        {\n            string memberName = String.Format(CultureInfo.InvariantCulture, \"{0}.{1}\", GetTypeName(member.DeclaringType), member.Name);\n            string expression = member.MemberType == MemberTypes.Field ? FieldExpression : PropertyExpression;\n            string selectExpression = String.Format(CultureInfo.InvariantCulture, expression, memberName);\n            XPathNavigator propertyNode = _documentNavigator.SelectSingleNode(selectExpression);\n            return GetTagValue(propertyNode, \"summary\");\n        }\n\n        public string GetDocumentation(Type type)\n        {\n            XPathNavigator typeNode = GetTypeNode(type);\n            return GetTagValue(typeNode, \"summary\");\n        }\n\n        private XPathNavigator GetMethodNode(HttpActionDescriptor actionDescriptor)\n        {\n            ReflectedHttpActionDescriptor reflectedActionDescriptor = actionDescriptor as ReflectedHttpActionDescriptor;\n            if (reflectedActionDescriptor != null)\n            {\n                string selectExpression = String.Format(CultureInfo.InvariantCulture, MethodExpression, GetMemberName(reflectedActionDescriptor.MethodInfo));\n                return _documentNavigator.SelectSingleNode(selectExpression);\n            }\n\n            return null;\n        }\n\n        private static string GetMemberName(MethodInfo method)\n        {\n            string name = String.Format(CultureInfo.InvariantCulture, \"{0}.{1}\", GetTypeName(method.DeclaringType), method.Name);\n            ParameterInfo[] parameters = method.GetParameters();\n            if (parameters.Length != 0)\n            {\n                string[] parameterTypeNames = parameters.Select(param => GetTypeName(param.ParameterType)).ToArray();\n                name += String.Format(CultureInfo.InvariantCulture, \"({0})\", String.Join(\",\", parameterTypeNames));\n            }\n\n            return name;\n        }\n\n        private static string GetTagValue(XPathNavigator parentNode, string tagName)\n        {\n            if (parentNode != null)\n            {\n                XPathNavigator node = parentNode.SelectSingleNode(tagName);\n                if (node != null)\n                {\n                    return node.Value.Trim();\n                }\n            }\n\n            return null;\n        }\n\n        private XPathNavigator GetTypeNode(Type type)\n        {\n            string controllerTypeName = GetTypeName(type);\n            string selectExpression = String.Format(CultureInfo.InvariantCulture, TypeExpression, controllerTypeName);\n            return _documentNavigator.SelectSingleNode(selectExpression);\n        }\n\n        private static string GetTypeName(Type type)\n        {\n            string name = type.FullName;\n            if (type.IsGenericType)\n            {\n                // Format the generic type name to something like: Generic{System.Int32,System.String}\n                Type genericType = type.GetGenericTypeDefinition();\n                Type[] genericArguments = type.GetGenericArguments();\n                string genericTypeName = genericType.FullName;\n\n                // Trim the generic parameter counts from the name\n                genericTypeName = genericTypeName.Substring(0, genericTypeName.IndexOf('`'));\n                string[] argumentTypeNames = genericArguments.Select(t => GetTypeName(t)).ToArray();\n                name = String.Format(CultureInfo.InvariantCulture, \"{0}{{{1}}}\", genericTypeName, String.Join(\",\", argumentTypeNames));\n            }\n            if (type.IsNested)\n            {\n                // Changing the nested type name from OuterType+InnerType to OuterType.InnerType to match the XML documentation syntax.\n                name = name.Replace(\"+\", \".\");\n            }\n\n            return name;\n        }\n    }\n}\n", "filescount": "1", "linescount": 162, "location": "/Mi9/Areas/HelpPage", "effortyears": "0.02", "languagename": "C#", "estimateddevelopers": "0.18", "technologies": ["Linq"]}, {"comment": "5", "fileextention": "cs", "code": "32", "hash": "8db726d24e44e1d067d56b9bb31fb72b", "averagelinelength": 37, "effortmonths": "0.06", "duplicates": [], "blank": "2", "estimatedcost": "728", "filename": "ApiDescriptionExtensions.cs", "content": "using System;\nusing System.Text;\nusing System.Web;\nusing System.Web.Http.Description;\n\nnamespace Mi9.Areas.HelpPage\n{\n    public static class ApiDescriptionExtensions\n    {\n        /// <summary>\n        /// Generates an URI-friendly ID for the <see cref=\"ApiDescription\"/>. E.g. \"Get-Values-id_name\" instead of \"GetValues/{id}?name={name}\"\n        /// </summary>\n        /// <param name=\"description\">The <see cref=\"ApiDescription\"/>.</param>\n        /// <returns>The ID as a string.</returns>\n        public static string GetFriendlyId(this ApiDescription description)\n        {\n            string path = description.RelativePath;\n            string[] urlParts = path.Split('?');\n            string localPath = urlParts[0];\n            string queryKeyString = null;\n            if (urlParts.Length > 1)\n            {\n                string query = urlParts[1];\n                string[] queryKeys = HttpUtility.ParseQueryString(query).AllKeys;\n                queryKeyString = String.Join(\"_\", queryKeys);\n            }\n\n            StringBuilder friendlyPath = new StringBuilder();\n            friendlyPath.AppendFormat(\"{0}-{1}\",\n                description.HttpMethod.Method,\n                localPath.Replace(\"/\", \"-\").Replace(\"{\", String.Empty).Replace(\"}\", String.Empty));\n            if (queryKeyString != null)\n            {\n                friendlyPath.AppendFormat(\"_{0}\", queryKeyString.Replace('.', '-'));\n            }\n            return friendlyPath.ToString();\n        }\n    }\n}", "filescount": "1", "linescount": 39, "location": "/Mi9/Areas/HelpPage", "effortyears": "0.01", "languagename": "C#", "estimateddevelopers": "0.07", "technologies": []}, {"comment": "0", "fileextention": "css", "code": "113", "hash": "d08df0de70110db49374df1233e7fe0b", "averagelinelength": 16, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "Puppet", "md5hash": "d08df0de70110db49374df1233e7fe0b", "filename": "HelpPage.css.pp", "source": "Bitbucket", "linescount": 135, "reponame": "RealEstateBootstrap", "id": 91910560, "location": "/_PropertyCrawler/packages/Microsoft.AspNet.WebApi.HelpPage.5.2.0/Content/Areas/HelpPage"}, {"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "CSS", "md5hash": "d08df0de70110db49374df1233e7fe0b", "filename": "HelpPage.css", "source": "Bitbucket", "linescount": 135, "reponame": "RealEstateBootstrap", "id": 91912190, "location": "/_PropertyCrawler/Properties.Web.API/Areas/HelpPage"}, {"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "CSS", "md5hash": "f40eb5797b0d7c9cd5a981afd78181fa", "filename": "HelpPage.css", "source": "Bitbucket", "linescount": 135, "reponame": "Messenger", "id": 92001569, "location": "/Messenger/Areas/HelpPage"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "CSS", "md5hash": "d08df0de70110db49374df1233e7fe0b", "filename": "HelpPage.css", "source": "Bitbucket", "linescount": 135, "reponame": "PhoneBook App", "id": 92051502, "location": "/AddressBook/Areas/HelpPage"}, {"sourceurl": "https://github.com/huyq2002/aspnetwebstack", "language": "CSS", "md5hash": "d08df0de70110db49374df1233e7fe0b", "filename": "HelpPage.css", "source": "Github", "linescount": 135, "reponame": "aspnetwebstack", "id": 94667136, "location": "/src/WebApiHelpPage/VB/Areas/HelpPage"}, {"sourceurl": "https://github.com/huyq2002/aspnetwebstack", "language": "CSS", "md5hash": "d08df0de70110db49374df1233e7fe0b", "filename": "HelpPage.css", "source": "Github", "linescount": 135, "reponame": "aspnetwebstack", "id": 94667231, "location": "/src/WebApiHelpPage/Areas/HelpPage"}], "blank": "21", "estimatedcost": 0, "filename": "HelpPage.css", "content": ".help-page h1,\n.help-page .h1,\n.help-page h2,\n.help-page .h2,\n.help-page h3,\n.help-page .h3,\n#body.help-page,\n.help-page-table th,\n.help-page-table pre,\n.help-page-table p {\n    font-family: \"Segoe UI Light\", Frutiger, \"Frutiger Linotype\", \"Dejavu Sans\", \"Helvetica Neue\", Arial, sans-serif;\n}\n\n.help-page pre.wrapped {\n    white-space: -moz-pre-wrap;\n    white-space: -pre-wrap;\n    white-space: -o-pre-wrap;\n    white-space: pre-wrap;\n}\n\n.help-page .warning-message-container {\n    margin-top: 20px;\n    padding: 0 10px;\n    color: #525252;\n    background: #EFDCA9; \n    border: 1px solid #CCCCCC;\n}\n\n.help-page-table {\n    width: 100%;\n    border-collapse: collapse;\n    text-align: left;\n    margin: 0px 0px 20px 0px;\n    border-top: 1px solid #D4D4D4;\n}\n\n.help-page-table th {\n    text-align: left;\n    font-weight: bold;\n    border-bottom: 1px solid #D4D4D4;\n    padding: 5px 6px 5px 6px;\n}\n\n.help-page-table td {\n    border-bottom: 1px solid #D4D4D4;\n    padding: 10px 8px 10px 8px;\n    vertical-align: top;\n}\n\n.help-page-table pre,\n.help-page-table p {\n    margin: 0px;\n    padding: 0px;\n    font-family: inherit;\n    font-size: 100%;\n}\n\n.help-page-table tbody tr:hover td {\n    background-color: #F3F3F3;\n}\n\n.help-page a:hover {\n    background-color: transparent;\n}\n\n.help-page .sample-header {\n    border: 2px solid #D4D4D4;\n    background: #00497E;\n    color: #FFFFFF;\n    padding: 8px 15px;\n    border-bottom: none;\n    display: inline-block;\n    margin: 10px 0px 0px 0px;\n}\n\n.help-page .sample-content {\n    display: block;\n    border-width: 0;\n    padding: 15px 20px;\n    background: #FFFFFF;\n    border: 2px solid #D4D4D4;\n    margin: 0px 0px 10px 0px;\n}\n\n.help-page .api-name {\n    width: 40%;\n}\n\n.help-page .api-documentation {\n    width: 60%;\n}\n\n.help-page .parameter-name {\n    width: 20%;\n}\n\n.help-page .parameter-documentation {\n    width: 40%;\n}\n\n.help-page .parameter-type {\n    width: 20%;\n}\n\n.help-page .parameter-annotations {\n    width: 20%;\n}\n\n.help-page h1,\n.help-page .h1 {\n    font-size: 36px;\n    line-height: normal;\n}\n\n.help-page h2,\n.help-page .h2 {\n    font-size: 24px;\n}\n\n.help-page h3,\n.help-page .h3 {\n    font-size: 20px;\n}\n\n#body.help-page {\n    font-size: 14px;\n    line-height: 143%;\n    color: #333;\n}\n\n.help-page a {\n    color: #0000EE;\n    text-decoration: none;\n}\n", "filescount": "1", "linescount": 135, "location": "/Mi9/Areas/HelpPage", "effortyears": 0, "languagename": "CSS", "estimateddevelopers": 0, "technologies": []}, {"comment": "137", "fileextention": "cs", "code": "287", "hash": "0b762aca852ac57ae2e9d98c9c840c0d", "averagelinelength": 50, "effortmonths": "0.65", "duplicates": [{"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "C#", "md5hash": "042d6e8ee6d92e1dc49884815fef5c47", "filename": "HelpPageConfigurationExtensions.cs", "source": "Bitbucket", "linescount": 468, "reponame": "PhoneBook App", "id": 92051508, "location": "/AddressBook/Areas/HelpPage"}], "blank": "43", "estimatedcost": "7285", "filename": "HelpPageConfigurationExtensions.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Web.Http;\nusing System.Web.Http.Controllers;\nusing System.Web.Http.Description;\nusing Mi9.Areas.HelpPage.ModelDescriptions;\nusing Mi9.Areas.HelpPage.Models;\n\nnamespace Mi9.Areas.HelpPage\n{\n    public static class HelpPageConfigurationExtensions\n    {\n        private const string ApiModelPrefix = \"MS_HelpPageApiModel_\";\n\n        /// <summary>\n        /// Sets the documentation provider for help page.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"documentationProvider\">The documentation provider.</param>\n        public static void SetDocumentationProvider(this HttpConfiguration config, IDocumentationProvider documentationProvider)\n        {\n            config.Services.Replace(typeof(IDocumentationProvider), documentationProvider);\n        }\n\n        /// <summary>\n        /// Sets the objects that will be used by the formatters to produce sample requests/responses.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sampleObjects\">The sample objects.</param>\n        public static void SetSampleObjects(this HttpConfiguration config, IDictionary<Type, object> sampleObjects)\n        {\n            config.GetHelpPageSampleGenerator().SampleObjects = sampleObjects;\n        }\n\n        /// <summary>\n        /// Sets the sample request directly for the specified media type and action.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sample\">The sample request.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        public static void SetSampleRequest(this HttpConfiguration config, object sample, MediaTypeHeaderValue mediaType, string controllerName, string actionName)\n        {\n            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType, SampleDirection.Request, controllerName, actionName, new[] { \"*\" }), sample);\n        }\n\n        /// <summary>\n        /// Sets the sample request directly for the specified media type and action with parameters.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sample\">The sample request.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        public static void SetSampleRequest(this HttpConfiguration config, object sample, MediaTypeHeaderValue mediaType, string controllerName, string actionName, params string[] parameterNames)\n        {\n            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType, SampleDirection.Request, controllerName, actionName, parameterNames), sample);\n        }\n\n        /// <summary>\n        /// Sets the sample request directly for the specified media type of the action.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sample\">The sample response.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        public static void SetSampleResponse(this HttpConfiguration config, object sample, MediaTypeHeaderValue mediaType, string controllerName, string actionName)\n        {\n            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType, SampleDirection.Response, controllerName, actionName, new[] { \"*\" }), sample);\n        }\n\n        /// <summary>\n        /// Sets the sample response directly for the specified media type of the action with specific parameters.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sample\">The sample response.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        public static void SetSampleResponse(this HttpConfiguration config, object sample, MediaTypeHeaderValue mediaType, string controllerName, string actionName, params string[] parameterNames)\n        {\n            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType, SampleDirection.Response, controllerName, actionName, parameterNames), sample);\n        }\n\n        /// <summary>\n        /// Sets the sample directly for all actions with the specified media type.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sample\">The sample.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        public static void SetSampleForMediaType(this HttpConfiguration config, object sample, MediaTypeHeaderValue mediaType)\n        {\n            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType), sample);\n        }\n\n        /// <summary>\n        /// Sets the sample directly for all actions with the specified type and media type.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sample\">The sample.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"type\">The parameter type or return type of an action.</param>\n        public static void SetSampleForType(this HttpConfiguration config, object sample, MediaTypeHeaderValue mediaType, Type type)\n        {\n            config.GetHelpPageSampleGenerator().ActionSamples.Add(new HelpPageSampleKey(mediaType, type), sample);\n        }\n\n        /// <summary>\n        /// Specifies the actual type of <see cref=\"System.Net.Http.ObjectContent{T}\"/> passed to the <see cref=\"System.Net.Http.HttpRequestMessage\"/> in an action.\n        /// The help page will use this information to produce more accurate request samples.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"type\">The type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        public static void SetActualRequestType(this HttpConfiguration config, Type type, string controllerName, string actionName)\n        {\n            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Request, controllerName, actionName, new[] { \"*\" }), type);\n        }\n\n        /// <summary>\n        /// Specifies the actual type of <see cref=\"System.Net.Http.ObjectContent{T}\"/> passed to the <see cref=\"System.Net.Http.HttpRequestMessage\"/> in an action.\n        /// The help page will use this information to produce more accurate request samples.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"type\">The type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        public static void SetActualRequestType(this HttpConfiguration config, Type type, string controllerName, string actionName, params string[] parameterNames)\n        {\n            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Request, controllerName, actionName, parameterNames), type);\n        }\n\n        /// <summary>\n        /// Specifies the actual type of <see cref=\"System.Net.Http.ObjectContent{T}\"/> returned as part of the <see cref=\"System.Net.Http.HttpRequestMessage\"/> in an action.\n        /// The help page will use this information to produce more accurate response samples.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"type\">The type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        public static void SetActualResponseType(this HttpConfiguration config, Type type, string controllerName, string actionName)\n        {\n            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Response, controllerName, actionName, new[] { \"*\" }), type);\n        }\n\n        /// <summary>\n        /// Specifies the actual type of <see cref=\"System.Net.Http.ObjectContent{T}\"/> returned as part of the <see cref=\"System.Net.Http.HttpRequestMessage\"/> in an action.\n        /// The help page will use this information to produce more accurate response samples.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"type\">The type.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        public static void SetActualResponseType(this HttpConfiguration config, Type type, string controllerName, string actionName, params string[] parameterNames)\n        {\n            config.GetHelpPageSampleGenerator().ActualHttpMessageTypes.Add(new HelpPageSampleKey(SampleDirection.Response, controllerName, actionName, parameterNames), type);\n        }\n\n        /// <summary>\n        /// Gets the help page sample generator.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <returns>The help page sample generator.</returns>\n        public static HelpPageSampleGenerator GetHelpPageSampleGenerator(this HttpConfiguration config)\n        {\n            return (HelpPageSampleGenerator)config.Properties.GetOrAdd(\n                typeof(HelpPageSampleGenerator),\n                k => new HelpPageSampleGenerator());\n        }\n\n        /// <summary>\n        /// Sets the help page sample generator.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"sampleGenerator\">The help page sample generator.</param>\n        public static void SetHelpPageSampleGenerator(this HttpConfiguration config, HelpPageSampleGenerator sampleGenerator)\n        {\n            config.Properties.AddOrUpdate(\n                typeof(HelpPageSampleGenerator),\n                k => sampleGenerator,\n                (k, o) => sampleGenerator);\n        }\n\n        /// <summary>\n        /// Gets the model description generator.\n        /// </summary>\n        /// <param name=\"config\">The configuration.</param>\n        /// <returns>The <see cref=\"ModelDescriptionGenerator\"/></returns>\n        public static ModelDescriptionGenerator GetModelDescriptionGenerator(this HttpConfiguration config)\n        {\n            return (ModelDescriptionGenerator)config.Properties.GetOrAdd(\n                typeof(ModelDescriptionGenerator),\n                k => InitializeModelDescriptionGenerator(config));\n        }\n\n        /// <summary>\n        /// Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.\n        /// </summary>\n        /// <param name=\"config\">The <see cref=\"HttpConfiguration\"/>.</param>\n        /// <param name=\"apiDescriptionId\">The <see cref=\"ApiDescription\"/> ID.</param>\n        /// <returns>\n        /// An <see cref=\"HelpPageApiModel\"/>\n        /// </returns>\n        public static HelpPageApiModel GetHelpPageApiModel(this HttpConfiguration config, string apiDescriptionId)\n        {\n            object model;\n            string modelId = ApiModelPrefix + apiDescriptionId;\n            if (!config.Properties.TryGetValue(modelId, out model))\n            {\n                Collection<ApiDescription> apiDescriptions = config.Services.GetApiExplorer().ApiDescriptions;\n                ApiDescription apiDescription = apiDescriptions.FirstOrDefault(api => String.Equals(api.GetFriendlyId(), apiDescriptionId, StringComparison.OrdinalIgnoreCase));\n                if (apiDescription != null)\n                {\n                    model = GenerateApiModel(apiDescription, config);\n                    config.Properties.TryAdd(modelId, model);\n                }\n            }\n\n            return (HelpPageApiModel)model;\n        }\n\n        private static HelpPageApiModel GenerateApiModel(ApiDescription apiDescription, HttpConfiguration config)\n        {\n            HelpPageApiModel apiModel = new HelpPageApiModel()\n            {\n                ApiDescription = apiDescription,\n            };\n\n            ModelDescriptionGenerator modelGenerator = config.GetModelDescriptionGenerator();\n            HelpPageSampleGenerator sampleGenerator = config.GetHelpPageSampleGenerator();\n            GenerateUriParameters(apiModel, modelGenerator);\n            GenerateRequestModelDescription(apiModel, modelGenerator, sampleGenerator);\n            GenerateResourceDescription(apiModel, modelGenerator);\n            GenerateSamples(apiModel, sampleGenerator);\n\n            return apiModel;\n        }\n\n        private static void GenerateUriParameters(HelpPageApiModel apiModel, ModelDescriptionGenerator modelGenerator)\n        {\n            ApiDescription apiDescription = apiModel.ApiDescription;\n            foreach (ApiParameterDescription apiParameter in apiDescription.ParameterDescriptions)\n            {\n                if (apiParameter.Source == ApiParameterSource.FromUri)\n                {\n                    HttpParameterDescriptor parameterDescriptor = apiParameter.ParameterDescriptor;\n                    Type parameterType = null;\n                    ModelDescription typeDescription = null;\n                    ComplexTypeModelDescription complexTypeDescription = null;\n                    if (parameterDescriptor != null)\n                    {\n                        parameterType = parameterDescriptor.ParameterType;\n                        typeDescription = modelGenerator.GetOrCreateModelDescription(parameterType);\n                        complexTypeDescription = typeDescription as ComplexTypeModelDescription;\n                    }\n\n                    // Example:\n                    // [TypeConverter(typeof(PointConverter))]\n                    // public class Point\n                    // {\n                    //     public Point(int x, int y)\n                    //     {\n                    //         X = x;\n                    //         Y = y;\n                    //     }\n                    //     public int X { get; set; }\n                    //     public int Y { get; set; }\n                    // }\n                    // Class Point is bindable with a TypeConverter, so Point will be added to UriParameters collection.\n                    // \n                    // public class Point\n                    // {\n                    //     public int X { get; set; }\n                    //     public int Y { get; set; }\n                    // }\n                    // Regular complex class Point will have properties X and Y added to UriParameters collection.\n                    if (complexTypeDescription != null\n                        && !IsBindableWithTypeConverter(parameterType))\n                    {\n                        foreach (ParameterDescription uriParameter in complexTypeDescription.Properties)\n                        {\n                            apiModel.UriParameters.Add(uriParameter);\n                        }\n                    }\n                    else if (parameterDescriptor != null)\n                    {\n                        ParameterDescription uriParameter =\n                            AddParameterDescription(apiModel, apiParameter, typeDescription);\n\n                        if (!parameterDescriptor.IsOptional)\n                        {\n                            uriParameter.Annotations.Add(new ParameterAnnotation() { Documentation = \"Required\" });\n                        }\n\n                        object defaultValue = parameterDescriptor.DefaultValue;\n                        if (defaultValue != null)\n                        {\n                            uriParameter.Annotations.Add(new ParameterAnnotation() { Documentation = \"Default value is \" + Convert.ToString(defaultValue, CultureInfo.InvariantCulture) });\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(parameterDescriptor == null);\n\n                        // If parameterDescriptor is null, this is an undeclared route parameter which only occurs\n                        // when source is FromUri. Ignored in request model and among resource parameters but listed\n                        // as a simple string here.\n                        ModelDescription modelDescription = modelGenerator.GetOrCreateModelDescription(typeof(string));\n                        AddParameterDescription(apiModel, apiParameter, modelDescription);\n                    }\n                }\n            }\n        }\n\n        private static bool IsBindableWithTypeConverter(Type parameterType)\n        {\n            if (parameterType == null)\n            {\n                return false;\n            }\n\n            return TypeDescriptor.GetConverter(parameterType).CanConvertFrom(typeof(string));\n        }\n\n        private static ParameterDescription AddParameterDescription(HelpPageApiModel apiModel,\n            ApiParameterDescription apiParameter, ModelDescription typeDescription)\n        {\n            ParameterDescription parameterDescription = new ParameterDescription\n            {\n                Name = apiParameter.Name,\n                Documentation = apiParameter.Documentation,\n                TypeDescription = typeDescription,\n            };\n\n            apiModel.UriParameters.Add(parameterDescription);\n            return parameterDescription;\n        }\n\n        private static void GenerateRequestModelDescription(HelpPageApiModel apiModel, ModelDescriptionGenerator modelGenerator, HelpPageSampleGenerator sampleGenerator)\n        {\n            ApiDescription apiDescription = apiModel.ApiDescription;\n            foreach (ApiParameterDescription apiParameter in apiDescription.ParameterDescriptions)\n            {\n                if (apiParameter.Source == ApiParameterSource.FromBody)\n                {\n                    Type parameterType = apiParameter.ParameterDescriptor.ParameterType;\n                    apiModel.RequestModelDescription = modelGenerator.GetOrCreateModelDescription(parameterType);\n                    apiModel.RequestDocumentation = apiParameter.Documentation;\n                }\n                else if (apiParameter.ParameterDescriptor != null &&\n                    apiParameter.ParameterDescriptor.ParameterType == typeof(HttpRequestMessage))\n                {\n                    Type parameterType = sampleGenerator.ResolveHttpRequestMessageType(apiDescription);\n\n                    if (parameterType != null)\n                    {\n                        apiModel.RequestModelDescription = modelGenerator.GetOrCreateModelDescription(parameterType);\n                    }\n                }\n            }\n        }\n\n        private static void GenerateResourceDescription(HelpPageApiModel apiModel, ModelDescriptionGenerator modelGenerator)\n        {\n            ResponseDescription response = apiModel.ApiDescription.ResponseDescription;\n            Type responseType = response.ResponseType ?? response.DeclaredType;\n            if (responseType != null && responseType != typeof(void))\n            {\n                apiModel.ResourceDescription = modelGenerator.GetOrCreateModelDescription(responseType);\n            }\n        }\n\n        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\", Justification = \"The exception is recorded as ErrorMessages.\")]\n        private static void GenerateSamples(HelpPageApiModel apiModel, HelpPageSampleGenerator sampleGenerator)\n        {\n            try\n            {\n                foreach (var item in sampleGenerator.GetSampleRequests(apiModel.ApiDescription))\n                {\n                    apiModel.SampleRequests.Add(item.Key, item.Value);\n                    LogInvalidSampleAsError(apiModel, item.Value);\n                }\n\n                foreach (var item in sampleGenerator.GetSampleResponses(apiModel.ApiDescription))\n                {\n                    apiModel.SampleResponses.Add(item.Key, item.Value);\n                    LogInvalidSampleAsError(apiModel, item.Value);\n                }\n            }\n            catch (Exception e)\n            {\n                apiModel.ErrorMessages.Add(String.Format(CultureInfo.CurrentCulture,\n                    \"An exception has occurred while generating the sample. Exception message: {0}\",\n                    HelpPageSampleGenerator.UnwrapException(e).Message));\n            }\n        }\n\n        private static bool TryGetResourceParameter(ApiDescription apiDescription, HttpConfiguration config, out ApiParameterDescription parameterDescription, out Type resourceType)\n        {\n            parameterDescription = apiDescription.ParameterDescriptions.FirstOrDefault(\n                p => p.Source == ApiParameterSource.FromBody ||\n                    (p.ParameterDescriptor != null && p.ParameterDescriptor.ParameterType == typeof(HttpRequestMessage)));\n\n            if (parameterDescription == null)\n            {\n                resourceType = null;\n                return false;\n            }\n\n            resourceType = parameterDescription.ParameterDescriptor.ParameterType;\n\n            if (resourceType == typeof(HttpRequestMessage))\n            {\n                HelpPageSampleGenerator sampleGenerator = config.GetHelpPageSampleGenerator();\n                resourceType = sampleGenerator.ResolveHttpRequestMessageType(apiDescription);\n            }\n\n            if (resourceType == null)\n            {\n                parameterDescription = null;\n                return false;\n            }\n\n            return true;\n        }\n\n        private static ModelDescriptionGenerator InitializeModelDescriptionGenerator(HttpConfiguration config)\n        {\n            ModelDescriptionGenerator modelGenerator = new ModelDescriptionGenerator(config);\n            Collection<ApiDescription> apis = config.Services.GetApiExplorer().ApiDescriptions;\n            foreach (ApiDescription api in apis)\n            {\n                ApiParameterDescription parameterDescription;\n                Type parameterType;\n                if (TryGetResourceParameter(api, config, out parameterDescription, out parameterType))\n                {\n                    modelGenerator.GetOrCreateModelDescription(parameterType);\n                }\n            }\n            return modelGenerator;\n        }\n\n        private static void LogInvalidSampleAsError(HelpPageApiModel apiModel, object sample)\n        {\n            InvalidSample invalidSample = sample as InvalidSample;\n            if (invalidSample != null)\n            {\n                apiModel.ErrorMessages.Add(invalidSample.ErrorMessage);\n            }\n        }\n    }\n}\n", "filescount": "1", "linescount": 468, "location": "/Mi9/Areas/HelpPage", "effortyears": "0.05", "languagename": "C#", "estimateddevelopers": "0.31", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "23", "hash": "0964befa6c753357347fbd566fbbe6e4", "averagelinelength": 24, "effortmonths": "0.05", "duplicates": [], "blank": "3", "estimatedcost": "515", "filename": "HelpPageAreaRegistration.cs", "content": "using System.Web.Http;\nusing System.Web.Mvc;\n\nnamespace Mi9.Areas.HelpPage\n{\n    public class HelpPageAreaRegistration : AreaRegistration\n    {\n        public override string AreaName\n        {\n            get\n            {\n                return \"HelpPage\";\n            }\n        }\n\n        public override void RegisterArea(AreaRegistrationContext context)\n        {\n            context.MapRoute(\n                \"HelpPage_Default\",\n                \"Help/{action}/{apiId}\",\n                new { controller = \"Help\", action = \"Index\", apiId = UrlParameter.Optional });\n\n            HelpPageConfig.Register(GlobalConfiguration.Configuration);\n        }\n    }\n}", "filescount": "1", "linescount": 26, "location": "/Mi9/Areas/HelpPage", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.06", "technologies": []}, {"comment": "22", "fileextention": "cs", "code": "384", "hash": "58dcc2f08f5d7d07435a1e091bbeae5b", "averagelinelength": 41, "effortmonths": "0.88", "duplicates": [{"sourceurl": "http://aspnetwebstack.codeplex.com", "language": "C#", "md5hash": "38ea837eb988a920a965279419daeeee", "filename": "ObjectGenerator.cs", "source": "CodePlex", "linescount": 456, "reponame": "aspnetwebstack", "id": 27742879, "location": "/src/WebApiHelpPage/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://bitbucket.org/lajjne/aspnetwebstack", "language": "C#", "md5hash": "38ea837eb988a920a965279419daeeee", "filename": "ObjectGenerator.cs", "source": "Bitbucket", "linescount": 456, "reponame": "aspnetwebstack", "id": 50143216, "location": "/src/WebApiHelpPage/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://bitbucket.org/pwalat/piotr.webapihmacauth", "language": "C#", "md5hash": "2fb7723608893683e24dfe62123707b9", "filename": "ObjectGenerator.cs", "source": "Bitbucket", "linescount": 457, "reponame": "piotr.webapihmacauth", "id": 50594855, "location": "/Piotr.WebApiHmacAuth.Web/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://bitbucket.org/itomek/mvcmusicstorespa", "language": "C#", "md5hash": "da8025c09dd4351b618ace79c555cb2e", "filename": "ObjectGenerator.cs", "source": "Bitbucket", "linescount": 456, "reponame": "mvcmusicstorespa", "id": 51128831, "location": "/TodoSampleSPA/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/juristr/codehacks", "language": "C#", "md5hash": "b09df48ee17fce76fa393141b5895b9c", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "codehacks", "id": 68781669, "location": "/architecture/CleanArchitecture/WebApi/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/juristr/codehacks", "language": "C#", "md5hash": "cd2d764669d7dfa3707fba174a51b4f2", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "codehacks", "id": 68783017, "location": "/DotNetHacks/WebApi/WebApiBackend/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/SoftwareSingularity/Swagger.NET", "language": "C#", "md5hash": "c27a3a6960e73de752ebbb9d8115a644", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "Swagger.NET", "id": 69588544, "location": "/Sample.WebApi/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/henrikjakobsen/WebAPI", "language": "C#", "md5hash": "0409c20d9dec58c973a89d37f709075e", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 457, "reponame": "WebAPI", "id": 74026564, "location": "/MvcApplicationAPI/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/ssuing8825/CodeCamp2012", "language": "C#", "md5hash": "e499029caa952d2f476f26c922e0e233", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 457, "reponame": "CodeCamp2012", "id": 74321407, "location": "/CodeCamp2012/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/garchibald/TechEdWebApiDemo", "language": "C#", "md5hash": "6596d68c0c36eaebced472a0d2cdb638", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 452, "reponame": "TechEdWebApiDemo", "id": 74840118, "location": "/TechEdWebApiDemo/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/justinfinch/Hummingbird", "language": "C#", "md5hash": "c27a3a6960e73de752ebbb9d8115a644", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "Hummingbird", "id": 74840329, "location": "/Sample/Sample.WebApi/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://bitbucket.org/saifuddinbhagat/durandaluser", "language": "C#", "md5hash": "4b8d5f5649a2c130c771b1172f9baa89", "filename": "ObjectGenerator.cs", "source": "Bitbucket", "linescount": 456, "reponame": "durandalUser", "id": 91899375, "location": "/DurandalPoc/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "C#", "md5hash": "65ce3e4bef0415ebe5954888b8c25e2c", "filename": "ObjectGenerator.cs", "source": "Bitbucket", "linescount": 456, "reponame": "RealEstateBootstrap", "id": 91912278, "location": "/_PropertyCrawler/Properties.Web.API/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://bitbucket.org/Sportivate/sportivateserver", "language": "C#", "md5hash": "3ecfebcb4ea583a8e3a52a939c615743", "filename": "ObjectGenerator.cs", "source": "Bitbucket", "linescount": 456, "reponame": "SportivateServer", "id": 92137272, "location": "/SportivateWeb/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/danielmazzini/NativeClient-DotNet", "language": "C#", "md5hash": "62c91154471088c474915250d1790fa6", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "NativeClient-DotNet", "id": 92804476, "location": "/TodoListService/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/huyq2002/aspnetwebstack", "language": "C#", "md5hash": "77a7be057c4088d42db4fc335002734d", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "aspnetwebstack", "id": 94667316, "location": "/src/WebApiHelpPage/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/hjorturls/WebApiThrottle", "language": "C#", "md5hash": "547cdb42a64e42eca15536bcb3a22a0c", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "WebApiThrottle", "id": 94727199, "location": "/WebApiThrottle.Demo/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/benleishman/NativeClient-DotNet", "language": "C#", "md5hash": "62c91154471088c474915250d1790fa6", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "NativeClient-DotNet", "id": 94866458, "location": "/TodoListService/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/justinlargey/Force.com-Toolkit-for-NET", "language": "C#", "md5hash": "8175955af58dac2fc96c12309e689655", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "Force.com-Toolkit-for-NET", "id": 95563694, "location": "/samples/WebServerOAuthFlow/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/djezuz/ChinookWebApi", "language": "C#", "md5hash": "6a96c61fefdd80e016dae8adfa419ae0", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "ChinookWebApi", "id": 95865461, "location": "/ChinookWebApi/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/czcz1024/poker24", "language": "C#", "md5hash": "ccf93b8a5c2d86a70fd4e1cfb041371d", "filename": "ObjectGenerator.cs", "source": "Github", "linescount": 456, "reponame": "poker24", "id": 96078611, "location": "/ServerSide/Areas/HelpPage/SampleGeneration"}], "blank": "50", "estimatedcost": "9890", "filename": "ObjectGenerator.cs", "content": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.Linq;\nusing System.Reflection;\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// This class will create an object of a given type and populate it with sample data.\n    /// </summary>\n    public class ObjectGenerator\n    {\n        internal const int DefaultCollectionSize = 2;\n        private readonly SimpleTypeObjectGenerator SimpleObjectGenerator = new SimpleTypeObjectGenerator();\n\n        /// <summary>\n        /// Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:\n        /// Simple types: <see cref=\"int\"/>, <see cref=\"string\"/>, <see cref=\"Enum\"/>, <see cref=\"DateTime\"/>, <see cref=\"Uri\"/>, etc.\n        /// Complex types: POCO types.\n        /// Nullables: <see cref=\"Nullable{T}\"/>.\n        /// Arrays: arrays of simple types or complex types.\n        /// Key value pairs: <see cref=\"KeyValuePair{TKey,TValue}\"/>\n        /// Tuples: <see cref=\"Tuple{T1}\"/>, <see cref=\"Tuple{T1,T2}\"/>, etc\n        /// Dictionaries: <see cref=\"IDictionary{TKey,TValue}\"/> or anything deriving from <see cref=\"IDictionary{TKey,TValue}\"/>.\n        /// Collections: <see cref=\"IList{T}\"/>, <see cref=\"IEnumerable{T}\"/>, <see cref=\"ICollection{T}\"/>, <see cref=\"IList\"/>, <see cref=\"IEnumerable\"/>, <see cref=\"ICollection\"/> or anything deriving from <see cref=\"ICollection{T}\"/> or <see cref=\"IList\"/>.\n        /// Queryables: <see cref=\"IQueryable\"/>, <see cref=\"IQueryable{T}\"/>.\n        /// </summary>\n        /// <param name=\"type\">The type.</param>\n        /// <returns>An object of the given type.</returns>\n        public object GenerateObject(Type type)\n        {\n            return GenerateObject(type, new Dictionary<Type, object>());\n        }\n\n        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\", Justification = \"Here we just want to return null if anything goes wrong.\")]\n        private object GenerateObject(Type type, Dictionary<Type, object> createdObjectReferences)\n        {\n            try\n            {\n                if (SimpleTypeObjectGenerator.CanGenerateObject(type))\n                {\n                    return SimpleObjectGenerator.GenerateObject(type);\n                }\n\n                if (type.IsArray)\n                {\n                    return GenerateArray(type, DefaultCollectionSize, createdObjectReferences);\n                }\n\n                if (type.IsGenericType)\n                {\n                    return GenerateGenericType(type, DefaultCollectionSize, createdObjectReferences);\n                }\n\n                if (type == typeof(IDictionary))\n                {\n                    return GenerateDictionary(typeof(Hashtable), DefaultCollectionSize, createdObjectReferences);\n                }\n\n                if (typeof(IDictionary).IsAssignableFrom(type))\n                {\n                    return GenerateDictionary(type, DefaultCollectionSize, createdObjectReferences);\n                }\n\n                if (type == typeof(IList) ||\n                    type == typeof(IEnumerable) ||\n                    type == typeof(ICollection))\n                {\n                    return GenerateCollection(typeof(ArrayList), DefaultCollectionSize, createdObjectReferences);\n                }\n\n                if (typeof(IList).IsAssignableFrom(type))\n                {\n                    return GenerateCollection(type, DefaultCollectionSize, createdObjectReferences);\n                }\n\n                if (type == typeof(IQueryable))\n                {\n                    return GenerateQueryable(type, DefaultCollectionSize, createdObjectReferences);\n                }\n\n                if (type.IsEnum)\n                {\n                    return GenerateEnum(type);\n                }\n\n                if (type.IsPublic || type.IsNestedPublic)\n                {\n                    return GenerateComplexObject(type, createdObjectReferences);\n                }\n            }\n            catch\n            {\n                // Returns null if anything fails\n                return null;\n            }\n\n            return null;\n        }\n\n        private static object GenerateGenericType(Type type, int collectionSize, Dictionary<Type, object> createdObjectReferences)\n        {\n            Type genericTypeDefinition = type.GetGenericTypeDefinition();\n            if (genericTypeDefinition == typeof(Nullable<>))\n            {\n                return GenerateNullable(type, createdObjectReferences);\n            }\n\n            if (genericTypeDefinition == typeof(KeyValuePair<,>))\n            {\n                return GenerateKeyValuePair(type, createdObjectReferences);\n            }\n\n            if (IsTuple(genericTypeDefinition))\n            {\n                return GenerateTuple(type, createdObjectReferences);\n            }\n\n            Type[] genericArguments = type.GetGenericArguments();\n            if (genericArguments.Length == 1)\n            {\n                if (genericTypeDefinition == typeof(IList<>) ||\n                    genericTypeDefinition == typeof(IEnumerable<>) ||\n                    genericTypeDefinition == typeof(ICollection<>))\n                {\n                    Type collectionType = typeof(List<>).MakeGenericType(genericArguments);\n                    return GenerateCollection(collectionType, collectionSize, createdObjectReferences);\n                }\n\n                if (genericTypeDefinition == typeof(IQueryable<>))\n                {\n                    return GenerateQueryable(type, collectionSize, createdObjectReferences);\n                }\n\n                Type closedCollectionType = typeof(ICollection<>).MakeGenericType(genericArguments[0]);\n                if (closedCollectionType.IsAssignableFrom(type))\n                {\n                    return GenerateCollection(type, collectionSize, createdObjectReferences);\n                }\n            }\n\n            if (genericArguments.Length == 2)\n            {\n                if (genericTypeDefinition == typeof(IDictionary<,>))\n                {\n                    Type dictionaryType = typeof(Dictionary<,>).MakeGenericType(genericArguments);\n                    return GenerateDictionary(dictionaryType, collectionSize, createdObjectReferences);\n                }\n\n                Type closedDictionaryType = typeof(IDictionary<,>).MakeGenericType(genericArguments[0], genericArguments[1]);\n                if (closedDictionaryType.IsAssignableFrom(type))\n                {\n                    return GenerateDictionary(type, collectionSize, createdObjectReferences);\n                }\n            }\n\n            if (type.IsPublic || type.IsNestedPublic)\n            {\n                return GenerateComplexObject(type, createdObjectReferences);\n            }\n\n            return null;\n        }\n\n        private static object GenerateTuple(Type type, Dictionary<Type, object> createdObjectReferences)\n        {\n            Type[] genericArgs = type.GetGenericArguments();\n            object[] parameterValues = new object[genericArgs.Length];\n            bool failedToCreateTuple = true;\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            for (int i = 0; i < genericArgs.Length; i++)\n            {\n                parameterValues[i] = objectGenerator.GenerateObject(genericArgs[i], createdObjectReferences);\n                failedToCreateTuple &= parameterValues[i] == null;\n            }\n            if (failedToCreateTuple)\n            {\n                return null;\n            }\n            object result = Activator.CreateInstance(type, parameterValues);\n            return result;\n        }\n\n        private static bool IsTuple(Type genericTypeDefinition)\n        {\n            return genericTypeDefinition == typeof(Tuple<>) ||\n                genericTypeDefinition == typeof(Tuple<,>) ||\n                genericTypeDefinition == typeof(Tuple<,,>) ||\n                genericTypeDefinition == typeof(Tuple<,,,>) ||\n                genericTypeDefinition == typeof(Tuple<,,,,>) ||\n                genericTypeDefinition == typeof(Tuple<,,,,,>) ||\n                genericTypeDefinition == typeof(Tuple<,,,,,,>) ||\n                genericTypeDefinition == typeof(Tuple<,,,,,,,>);\n        }\n\n        private static object GenerateKeyValuePair(Type keyValuePairType, Dictionary<Type, object> createdObjectReferences)\n        {\n            Type[] genericArgs = keyValuePairType.GetGenericArguments();\n            Type typeK = genericArgs[0];\n            Type typeV = genericArgs[1];\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            object keyObject = objectGenerator.GenerateObject(typeK, createdObjectReferences);\n            object valueObject = objectGenerator.GenerateObject(typeV, createdObjectReferences);\n            if (keyObject == null && valueObject == null)\n            {\n                // Failed to create key and values\n                return null;\n            }\n            object result = Activator.CreateInstance(keyValuePairType, keyObject, valueObject);\n            return result;\n        }\n\n        private static object GenerateArray(Type arrayType, int size, Dictionary<Type, object> createdObjectReferences)\n        {\n            Type type = arrayType.GetElementType();\n            Array result = Array.CreateInstance(type, size);\n            bool areAllElementsNull = true;\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            for (int i = 0; i < size; i++)\n            {\n                object element = objectGenerator.GenerateObject(type, createdObjectReferences);\n                result.SetValue(element, i);\n                areAllElementsNull &= element == null;\n            }\n\n            if (areAllElementsNull)\n            {\n                return null;\n            }\n\n            return result;\n        }\n\n        private static object GenerateDictionary(Type dictionaryType, int size, Dictionary<Type, object> createdObjectReferences)\n        {\n            Type typeK = typeof(object);\n            Type typeV = typeof(object);\n            if (dictionaryType.IsGenericType)\n            {\n                Type[] genericArgs = dictionaryType.GetGenericArguments();\n                typeK = genericArgs[0];\n                typeV = genericArgs[1];\n            }\n\n            object result = Activator.CreateInstance(dictionaryType);\n            MethodInfo addMethod = dictionaryType.GetMethod(\"Add\") ?? dictionaryType.GetMethod(\"TryAdd\");\n            MethodInfo containsMethod = dictionaryType.GetMethod(\"Contains\") ?? dictionaryType.GetMethod(\"ContainsKey\");\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            for (int i = 0; i < size; i++)\n            {\n                object newKey = objectGenerator.GenerateObject(typeK, createdObjectReferences);\n                if (newKey == null)\n                {\n                    // Cannot generate a valid key\n                    return null;\n                }\n\n                bool containsKey = (bool)containsMethod.Invoke(result, new object[] { newKey });\n                if (!containsKey)\n                {\n                    object newValue = objectGenerator.GenerateObject(typeV, createdObjectReferences);\n                    addMethod.Invoke(result, new object[] { newKey, newValue });\n                }\n            }\n\n            return result;\n        }\n\n        private static object GenerateEnum(Type enumType)\n        {\n            Array possibleValues = Enum.GetValues(enumType);\n            if (possibleValues.Length > 0)\n            {\n                return possibleValues.GetValue(0);\n            }\n            return null;\n        }\n\n        private static object GenerateQueryable(Type queryableType, int size, Dictionary<Type, object> createdObjectReferences)\n        {\n            bool isGeneric = queryableType.IsGenericType;\n            object list;\n            if (isGeneric)\n            {\n                Type listType = typeof(List<>).MakeGenericType(queryableType.GetGenericArguments());\n                list = GenerateCollection(listType, size, createdObjectReferences);\n            }\n            else\n            {\n                list = GenerateArray(typeof(object[]), size, createdObjectReferences);\n            }\n            if (list == null)\n            {\n                return null;\n            }\n            if (isGeneric)\n            {\n                Type argumentType = typeof(IEnumerable<>).MakeGenericType(queryableType.GetGenericArguments());\n                MethodInfo asQueryableMethod = typeof(Queryable).GetMethod(\"AsQueryable\", new[] { argumentType });\n                return asQueryableMethod.Invoke(null, new[] { list });\n            }\n\n            return Queryable.AsQueryable((IEnumerable)list);\n        }\n\n        private static object GenerateCollection(Type collectionType, int size, Dictionary<Type, object> createdObjectReferences)\n        {\n            Type type = collectionType.IsGenericType ?\n                collectionType.GetGenericArguments()[0] :\n                typeof(object);\n            object result = Activator.CreateInstance(collectionType);\n            MethodInfo addMethod = collectionType.GetMethod(\"Add\");\n            bool areAllElementsNull = true;\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            for (int i = 0; i < size; i++)\n            {\n                object element = objectGenerator.GenerateObject(type, createdObjectReferences);\n                addMethod.Invoke(result, new object[] { element });\n                areAllElementsNull &= element == null;\n            }\n\n            if (areAllElementsNull)\n            {\n                return null;\n            }\n\n            return result;\n        }\n\n        private static object GenerateNullable(Type nullableType, Dictionary<Type, object> createdObjectReferences)\n        {\n            Type type = nullableType.GetGenericArguments()[0];\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            return objectGenerator.GenerateObject(type, createdObjectReferences);\n        }\n\n        private static object GenerateComplexObject(Type type, Dictionary<Type, object> createdObjectReferences)\n        {\n            object result = null;\n\n            if (createdObjectReferences.TryGetValue(type, out result))\n            {\n                // The object has been created already, just return it. This will handle the circular reference case.\n                return result;\n            }\n\n            if (type.IsValueType)\n            {\n                result = Activator.CreateInstance(type);\n            }\n            else\n            {\n                ConstructorInfo defaultCtor = type.GetConstructor(Type.EmptyTypes);\n                if (defaultCtor == null)\n                {\n                    // Cannot instantiate the type because it doesn't have a default constructor\n                    return null;\n                }\n\n                result = defaultCtor.Invoke(new object[0]);\n            }\n            createdObjectReferences.Add(type, result);\n            SetPublicProperties(type, result, createdObjectReferences);\n            SetPublicFields(type, result, createdObjectReferences);\n            return result;\n        }\n\n        private static void SetPublicProperties(Type type, object obj, Dictionary<Type, object> createdObjectReferences)\n        {\n            PropertyInfo[] properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            foreach (PropertyInfo property in properties)\n            {\n                if (property.CanWrite)\n                {\n                    object propertyValue = objectGenerator.GenerateObject(property.PropertyType, createdObjectReferences);\n                    property.SetValue(obj, propertyValue, null);\n                }\n            }\n        }\n\n        private static void SetPublicFields(Type type, object obj, Dictionary<Type, object> createdObjectReferences)\n        {\n            FieldInfo[] fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance);\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            foreach (FieldInfo field in fields)\n            {\n                object fieldValue = objectGenerator.GenerateObject(field.FieldType, createdObjectReferences);\n                field.SetValue(obj, fieldValue);\n            }\n        }\n\n        private class SimpleTypeObjectGenerator\n        {\n            private long _index = 0;\n            private static readonly Dictionary<Type, Func<long, object>> DefaultGenerators = InitializeGenerators();\n\n            [SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\", Justification = \"These are simple type factories and cannot be split up.\")]\n            private static Dictionary<Type, Func<long, object>> InitializeGenerators()\n            {\n                return new Dictionary<Type, Func<long, object>>\n                {\n                    { typeof(Boolean), index => true },\n                    { typeof(Byte), index => (Byte)64 },\n                    { typeof(Char), index => (Char)65 },\n                    { typeof(DateTime), index => DateTime.Now },\n                    { typeof(DateTimeOffset), index => new DateTimeOffset(DateTime.Now) },\n                    { typeof(DBNull), index => DBNull.Value },\n                    { typeof(Decimal), index => (Decimal)index },\n                    { typeof(Double), index => (Double)(index + 0.1) },\n                    { typeof(Guid), index => Guid.NewGuid() },\n                    { typeof(Int16), index => (Int16)(index % Int16.MaxValue) },\n                    { typeof(Int32), index => (Int32)(index % Int32.MaxValue) },\n                    { typeof(Int64), index => (Int64)index },\n                    { typeof(Object), index => new object() },\n                    { typeof(SByte), index => (SByte)64 },\n                    { typeof(Single), index => (Single)(index + 0.1) },\n                    { \n                        typeof(String), index =>\n                        {\n                            return String.Format(CultureInfo.CurrentCulture, \"sample string {0}\", index);\n                        }\n                    },\n                    { \n                        typeof(TimeSpan), index =>\n                        {\n                            return TimeSpan.FromTicks(1234567);\n                        }\n                    },\n                    { typeof(UInt16), index => (UInt16)(index % UInt16.MaxValue) },\n                    { typeof(UInt32), index => (UInt32)(index % UInt32.MaxValue) },\n                    { typeof(UInt64), index => (UInt64)index },\n                    { \n                        typeof(Uri), index =>\n                        {\n                            return new Uri(String.Format(CultureInfo.CurrentCulture, \"http://webapihelppage{0}.com\", index));\n                        }\n                    },\n                };\n            }\n\n            public static bool CanGenerateObject(Type type)\n            {\n                return DefaultGenerators.ContainsKey(type);\n            }\n\n            public object GenerateObject(Type type)\n            {\n                return DefaultGenerators[type](++_index);\n            }\n        }\n    }\n}", "filescount": "1", "linescount": 456, "location": "/Mi9/Areas/HelpPage/SampleGeneration", "effortyears": "0.07", "languagename": "C#", "estimateddevelopers": "0.37", "technologies": []}, {"comment": "7", "fileextention": "cs", "code": "29", "hash": "2741cd4069d98409b79d473466fba83b", "averagelinelength": 24, "effortmonths": "0.06", "duplicates": [], "blank": "5", "estimatedcost": "656", "filename": "ImageSample.cs", "content": "using System;\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// This represents an image sample on the help page. There's a display template named ImageSample associated with this class.\n    /// </summary>\n    public class ImageSample\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ImageSample\"/> class.\n        /// </summary>\n        /// <param name=\"src\">The URL of an image.</param>\n        public ImageSample(string src)\n        {\n            if (src == null)\n            {\n                throw new ArgumentNullException(\"src\");\n            }\n            Src = src;\n        }\n\n        public string Src { get; private set; }\n\n        public override bool Equals(object obj)\n        {\n            ImageSample other = obj as ImageSample;\n            return other != null && Src == other.Src;\n        }\n\n        public override int GetHashCode()\n        {\n            return Src.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return Src;\n        }\n    }\n}", "filescount": "1", "linescount": 41, "location": "/Mi9/Areas/HelpPage/SampleGeneration", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.07", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "29", "hash": "6f3682ace88e04a2de2861aef900c78e", "averagelinelength": 22, "effortmonths": "0.06", "duplicates": [], "blank": "5", "estimatedcost": "656", "filename": "TextSample.cs", "content": "using System;\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.\n    /// </summary>\n    public class TextSample\n    {\n        public TextSample(string text)\n        {\n            if (text == null)\n            {\n                throw new ArgumentNullException(\"text\");\n            }\n            Text = text;\n        }\n\n        public string Text { get; private set; }\n\n        public override bool Equals(object obj)\n        {\n            TextSample other = obj as TextSample;\n            return other != null && Text == other.Text;\n        }\n\n        public override int GetHashCode()\n        {\n            return Text.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return Text;\n        }\n    }\n}", "filescount": "1", "linescount": 37, "location": "/Mi9/Areas/HelpPage/SampleGeneration", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.07", "technologies": []}, {"comment": "95", "fileextention": "cs", "code": "314", "hash": "ec27257f0c5576b937f98e90874c1019", "averagelinelength": 46, "effortmonths": "0.71", "duplicates": [{"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "C#", "md5hash": "853ad9d4db631018e4d80fad01ef9411", "filename": "HelpPageSampleGenerator.cs", "source": "Bitbucket", "linescount": 444, "reponame": "Messenger", "id": 92001651, "location": "/Messenger/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "C#", "md5hash": "0579520e4a54ef237d205e156103b88e", "filename": "HelpPageSampleGenerator.cs", "source": "Bitbucket", "linescount": 444, "reponame": "PhoneBook App", "id": 92051610, "location": "/AddressBook/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/mahiz/Woggle", "language": "C#", "md5hash": "b9d74ec2eb5690b55a2a1825c2470a0e", "filename": "HelpPageSampleGenerator.cs", "source": "Github", "linescount": 444, "reponame": "Woggle", "id": 94711736, "location": "/source/Web.Host/Areas/HelpPage/SampleGeneration"}, {"sourceurl": "https://github.com/czcz1024/poker24", "language": "C#", "md5hash": "79dcf46c2c7753b52e37be45ec2f7aec", "filename": "HelpPageSampleGenerator.cs", "source": "Github", "linescount": 444, "reponame": "poker24", "id": 96078615, "location": "/ServerSide/Areas/HelpPage/SampleGeneration"}], "blank": "35", "estimatedcost": "8006", "filename": "HelpPageSampleGenerator.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Formatting;\nusing System.Net.Http.Headers;\nusing System.Web.Http.Description;\nusing System.Xml.Linq;\nusing Newtonsoft.Json;\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// This class will generate the samples for the help page.\n    /// </summary>\n    public class HelpPageSampleGenerator\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"HelpPageSampleGenerator\"/> class.\n        /// </summary>\n        public HelpPageSampleGenerator()\n        {\n            ActualHttpMessageTypes = new Dictionary<HelpPageSampleKey, Type>();\n            ActionSamples = new Dictionary<HelpPageSampleKey, object>();\n            SampleObjects = new Dictionary<Type, object>();\n            SampleObjectFactories = new List<Func<HelpPageSampleGenerator, Type, object>>\n            {\n                DefaultSampleObjectFactory,\n            };\n        }\n\n        /// <summary>\n        /// Gets CLR types that are used as the content of <see cref=\"HttpRequestMessage\"/> or <see cref=\"HttpResponseMessage\"/>.\n        /// </summary>\n        public IDictionary<HelpPageSampleKey, Type> ActualHttpMessageTypes { get; internal set; }\n\n        /// <summary>\n        /// Gets the objects that are used directly as samples for certain actions.\n        /// </summary>\n        public IDictionary<HelpPageSampleKey, object> ActionSamples { get; internal set; }\n\n        /// <summary>\n        /// Gets the objects that are serialized as samples by the supported formatters.\n        /// </summary>\n        public IDictionary<Type, object> SampleObjects { get; internal set; }\n\n        /// <summary>\n        /// Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,\n        /// stopping when the factory successfully returns a non-<see langref=\"null\"/> object.\n        /// </summary>\n        /// <remarks>\n        /// Collection includes just <see cref=\"ObjectGenerator.GenerateObject(Type)\"/> initially. Use\n        /// <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and\n        /// <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1006:DoNotNestGenericTypesInMemberSignatures\",\n            Justification = \"This is an appropriate nesting of generic types\")]\n        public IList<Func<HelpPageSampleGenerator, Type, object>> SampleObjectFactories { get; private set; }\n\n        /// <summary>\n        /// Gets the request body samples for a given <see cref=\"ApiDescription\"/>.\n        /// </summary>\n        /// <param name=\"api\">The <see cref=\"ApiDescription\"/>.</param>\n        /// <returns>The samples keyed by media type.</returns>\n        public IDictionary<MediaTypeHeaderValue, object> GetSampleRequests(ApiDescription api)\n        {\n            return GetSample(api, SampleDirection.Request);\n        }\n\n        /// <summary>\n        /// Gets the response body samples for a given <see cref=\"ApiDescription\"/>.\n        /// </summary>\n        /// <param name=\"api\">The <see cref=\"ApiDescription\"/>.</param>\n        /// <returns>The samples keyed by media type.</returns>\n        public IDictionary<MediaTypeHeaderValue, object> GetSampleResponses(ApiDescription api)\n        {\n            return GetSample(api, SampleDirection.Response);\n        }\n\n        /// <summary>\n        /// Gets the request or response body samples.\n        /// </summary>\n        /// <param name=\"api\">The <see cref=\"ApiDescription\"/>.</param>\n        /// <param name=\"sampleDirection\">The value indicating whether the sample is for a request or for a response.</param>\n        /// <returns>The samples keyed by media type.</returns>\n        public virtual IDictionary<MediaTypeHeaderValue, object> GetSample(ApiDescription api, SampleDirection sampleDirection)\n        {\n            if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            string controllerName = api.ActionDescriptor.ControllerDescriptor.ControllerName;\n            string actionName = api.ActionDescriptor.ActionName;\n            IEnumerable<string> parameterNames = api.ParameterDescriptions.Select(p => p.Name);\n            Collection<MediaTypeFormatter> formatters;\n            Type type = ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n            var samples = new Dictionary<MediaTypeHeaderValue, object>();\n\n            // Use the samples provided directly for actions\n            var actionSamples = GetAllActionSamples(controllerName, actionName, parameterNames, sampleDirection);\n            foreach (var actionSample in actionSamples)\n            {\n                samples.Add(actionSample.Key.MediaType, WrapSampleIfString(actionSample.Value));\n            }\n\n            // Do the sample generation based on formatters only if an action doesn't return an HttpResponseMessage.\n            // Here we cannot rely on formatters because we don't know what's in the HttpResponseMessage, it might not even use formatters.\n            if (type != null && !typeof(HttpResponseMessage).IsAssignableFrom(type))\n            {\n                object sampleObject = GetSampleObject(type);\n                foreach (var formatter in formatters)\n                {\n                    foreach (MediaTypeHeaderValue mediaType in formatter.SupportedMediaTypes)\n                    {\n                        if (!samples.ContainsKey(mediaType))\n                        {\n                            object sample = GetActionSample(controllerName, actionName, parameterNames, type, formatter, mediaType, sampleDirection);\n\n                            // If no sample found, try generate sample using formatter and sample object\n                            if (sample == null && sampleObject != null)\n                            {\n                                sample = WriteSampleObjectUsingFormatter(formatter, sampleObject, type, mediaType);\n                            }\n\n                            samples.Add(mediaType, WrapSampleIfString(sample));\n                        }\n                    }\n                }\n            }\n\n            return samples;\n        }\n\n        /// <summary>\n        /// Search for samples that are provided directly through <see cref=\"ActionSamples\"/>.\n        /// </summary>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        /// <param name=\"type\">The CLR type.</param>\n        /// <param name=\"formatter\">The formatter.</param>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"sampleDirection\">The value indicating whether the sample is for a request or for a response.</param>\n        /// <returns>The sample that matches the parameters.</returns>\n        public virtual object GetActionSample(string controllerName, string actionName, IEnumerable<string> parameterNames, Type type, MediaTypeFormatter formatter, MediaTypeHeaderValue mediaType, SampleDirection sampleDirection)\n        {\n            object sample;\n\n            // First, try to get the sample provided for the specified mediaType, sampleDirection, controllerName, actionName and parameterNames.\n            // If not found, try to get the sample provided for the specified mediaType, sampleDirection, controllerName and actionName regardless of the parameterNames.\n            // If still not found, try to get the sample provided for the specified mediaType and type.\n            // Finally, try to get the sample provided for the specified mediaType.\n            if (ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType, sampleDirection, controllerName, actionName, parameterNames), out sample) ||\n                ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType, sampleDirection, controllerName, actionName, new[] { \"*\" }), out sample) ||\n                ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType, type), out sample) ||\n                ActionSamples.TryGetValue(new HelpPageSampleKey(mediaType), out sample))\n            {\n                return sample;\n            }\n\n            return null;\n        }\n\n        /// <summary>\n        /// Gets the sample object that will be serialized by the formatters. \n        /// First, it will look at the <see cref=\"SampleObjects\"/>. If no sample object is found, it will try to create\n        /// one using <see cref=\"DefaultSampleObjectFactory\"/> (which wraps an <see cref=\"ObjectGenerator\"/>) and other\n        /// factories in <see cref=\"SampleObjectFactories\"/>.\n        /// </summary>\n        /// <param name=\"type\">The type.</param>\n        /// <returns>The sample object.</returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\",\n            Justification = \"Even if all items in SampleObjectFactories throw, problem will be visible as missing sample.\")]\n        public virtual object GetSampleObject(Type type)\n        {\n            object sampleObject;\n\n            if (!SampleObjects.TryGetValue(type, out sampleObject))\n            {\n                // No specific object available, try our factories.\n                foreach (Func<HelpPageSampleGenerator, Type, object> factory in SampleObjectFactories)\n                {\n                    if (factory == null)\n                    {\n                        continue;\n                    }\n\n                    try\n                    {\n                        sampleObject = factory(this, type);\n                        if (sampleObject != null)\n                        {\n                            break;\n                        }\n                    }\n                    catch\n                    {\n                        // Ignore any problems encountered in the factory; go on to the next one (if any).\n                    }\n                }\n            }\n\n            return sampleObject;\n        }\n\n        /// <summary>\n        /// Resolves the actual type of <see cref=\"System.Net.Http.ObjectContent{T}\"/> passed to the <see cref=\"System.Net.Http.HttpRequestMessage\"/> in an action.\n        /// </summary>\n        /// <param name=\"api\">The <see cref=\"ApiDescription\"/>.</param>\n        /// <returns>The type.</returns>\n        public virtual Type ResolveHttpRequestMessageType(ApiDescription api)\n        {\n            string controllerName = api.ActionDescriptor.ControllerDescriptor.ControllerName;\n            string actionName = api.ActionDescriptor.ActionName;\n            IEnumerable<string> parameterNames = api.ParameterDescriptions.Select(p => p.Name);\n            Collection<MediaTypeFormatter> formatters;\n            return ResolveType(api, controllerName, actionName, parameterNames, SampleDirection.Request, out formatters);\n        }\n\n        /// <summary>\n        /// Resolves the type of the action parameter or return value when <see cref=\"HttpRequestMessage\"/> or <see cref=\"HttpResponseMessage\"/> is used.\n        /// </summary>\n        /// <param name=\"api\">The <see cref=\"ApiDescription\"/>.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        /// <param name=\"sampleDirection\">The value indicating whether the sample is for a request or a response.</param>\n        /// <param name=\"formatters\">The formatters.</param>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1021:AvoidOutParameters\", Justification = \"This is only used in advanced scenarios.\")]\n        public virtual Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection, out Collection<MediaTypeFormatter> formatters)\n        {\n            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))\n            {\n                throw new InvalidEnumArgumentException(\"sampleDirection\", (int)sampleDirection, typeof(SampleDirection));\n            }\n            if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            Type type;\n            if (ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(sampleDirection, controllerName, actionName, parameterNames), out type) ||\n                ActualHttpMessageTypes.TryGetValue(new HelpPageSampleKey(sampleDirection, controllerName, actionName, new[] { \"*\" }), out type))\n            {\n                // Re-compute the supported formatters based on type\n                Collection<MediaTypeFormatter> newFormatters = new Collection<MediaTypeFormatter>();\n                foreach (var formatter in api.ActionDescriptor.Configuration.Formatters)\n                {\n                    if (IsFormatSupported(sampleDirection, formatter, type))\n                    {\n                        newFormatters.Add(formatter);\n                    }\n                }\n                formatters = newFormatters;\n            }\n            else\n            {\n                switch (sampleDirection)\n                {\n                    case SampleDirection.Request:\n                        ApiParameterDescription requestBodyParameter = api.ParameterDescriptions.FirstOrDefault(p => p.Source == ApiParameterSource.FromBody);\n                        type = requestBodyParameter == null ? null : requestBodyParameter.ParameterDescriptor.ParameterType;\n                        formatters = api.SupportedRequestBodyFormatters;\n                        break;\n                    case SampleDirection.Response:\n                    default:\n                        type = api.ResponseDescription.ResponseType ?? api.ResponseDescription.DeclaredType;\n                        formatters = api.SupportedResponseFormatters;\n                        break;\n                }\n            }\n\n            return type;\n        }\n\n        /// <summary>\n        /// Writes the sample object using formatter.\n        /// </summary>\n        /// <param name=\"formatter\">The formatter.</param>\n        /// <param name=\"value\">The value.</param>\n        /// <param name=\"type\">The type.</param>\n        /// <param name=\"mediaType\">Type of the media.</param>\n        /// <returns></returns>\n        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\", Justification = \"The exception is recorded as InvalidSample.\")]\n        public virtual object WriteSampleObjectUsingFormatter(MediaTypeFormatter formatter, object value, Type type, MediaTypeHeaderValue mediaType)\n        {\n            if (formatter == null)\n            {\n                throw new ArgumentNullException(\"formatter\");\n            }\n            if (mediaType == null)\n            {\n                throw new ArgumentNullException(\"mediaType\");\n            }\n\n            object sample = String.Empty;\n            MemoryStream ms = null;\n            HttpContent content = null;\n            try\n            {\n                if (formatter.CanWriteType(type))\n                {\n                    ms = new MemoryStream();\n                    content = new ObjectContent(type, value, formatter, mediaType);\n                    formatter.WriteToStreamAsync(type, value, ms, content, null).Wait();\n                    ms.Position = 0;\n                    StreamReader reader = new StreamReader(ms);\n                    string serializedSampleString = reader.ReadToEnd();\n                    if (mediaType.MediaType.ToUpperInvariant().Contains(\"XML\"))\n                    {\n                        serializedSampleString = TryFormatXml(serializedSampleString);\n                    }\n                    else if (mediaType.MediaType.ToUpperInvariant().Contains(\"JSON\"))\n                    {\n                        serializedSampleString = TryFormatJson(serializedSampleString);\n                    }\n\n                    sample = new TextSample(serializedSampleString);\n                }\n                else\n                {\n                    sample = new InvalidSample(String.Format(\n                        CultureInfo.CurrentCulture,\n                        \"Failed to generate the sample for media type '{0}'. Cannot use formatter '{1}' to write type '{2}'.\",\n                        mediaType,\n                        formatter.GetType().Name,\n                        type.Name));\n                }\n            }\n            catch (Exception e)\n            {\n                sample = new InvalidSample(String.Format(\n                    CultureInfo.CurrentCulture,\n                    \"An exception has occurred while using the formatter '{0}' to generate sample for media type '{1}'. Exception message: {2}\",\n                    formatter.GetType().Name,\n                    mediaType.MediaType,\n                    UnwrapException(e).Message));\n            }\n            finally\n            {\n                if (ms != null)\n                {\n                    ms.Dispose();\n                }\n                if (content != null)\n                {\n                    content.Dispose();\n                }\n            }\n\n            return sample;\n        }\n\n        internal static Exception UnwrapException(Exception exception)\n        {\n            AggregateException aggregateException = exception as AggregateException;\n            if (aggregateException != null)\n            {\n                return aggregateException.Flatten().InnerException;\n            }\n            return exception;\n        }\n\n        // Default factory for sample objects\n        private static object DefaultSampleObjectFactory(HelpPageSampleGenerator sampleGenerator, Type type)\n        {\n            // Try to create a default sample object\n            ObjectGenerator objectGenerator = new ObjectGenerator();\n            return objectGenerator.GenerateObject(type);\n        }\n\n        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\", Justification = \"Handling the failure by returning the original string.\")]\n        private static string TryFormatJson(string str)\n        {\n            try\n            {\n                object parsedJson = JsonConvert.DeserializeObject(str);\n                return JsonConvert.SerializeObject(parsedJson, Formatting.Indented);\n            }\n            catch\n            {\n                // can't parse JSON, return the original string\n                return str;\n            }\n        }\n\n        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\", Justification = \"Handling the failure by returning the original string.\")]\n        private static string TryFormatXml(string str)\n        {\n            try\n            {\n                XDocument xml = XDocument.Parse(str);\n                return xml.ToString();\n            }\n            catch\n            {\n                // can't parse XML, return the original string\n                return str;\n            }\n        }\n\n        private static bool IsFormatSupported(SampleDirection sampleDirection, MediaTypeFormatter formatter, Type type)\n        {\n            switch (sampleDirection)\n            {\n                case SampleDirection.Request:\n                    return formatter.CanReadType(type);\n                case SampleDirection.Response:\n                    return formatter.CanWriteType(type);\n            }\n            return false;\n        }\n\n        private IEnumerable<KeyValuePair<HelpPageSampleKey, object>> GetAllActionSamples(string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection)\n        {\n            HashSet<string> parameterNamesSet = new HashSet<string>(parameterNames, StringComparer.OrdinalIgnoreCase);\n            foreach (var sample in ActionSamples)\n            {\n                HelpPageSampleKey sampleKey = sample.Key;\n                if (String.Equals(controllerName, sampleKey.ControllerName, StringComparison.OrdinalIgnoreCase) &&\n                    String.Equals(actionName, sampleKey.ActionName, StringComparison.OrdinalIgnoreCase) &&\n                    (sampleKey.ParameterNames.SetEquals(new[] { \"*\" }) || parameterNamesSet.SetEquals(sampleKey.ParameterNames)) &&\n                    sampleDirection == sampleKey.SampleDirection)\n                {\n                    yield return sample;\n                }\n            }\n        }\n\n        private static object WrapSampleIfString(object sample)\n        {\n            string stringSample = sample as string;\n            if (stringSample != null)\n            {\n                return new TextSample(stringSample);\n            }\n\n            return sample;\n        }\n    }\n}", "filescount": "1", "linescount": 444, "location": "/Mi9/Areas/HelpPage/SampleGeneration", "effortyears": "0.06", "languagename": "C#", "estimateddevelopers": "0.32", "technologies": ["NewtonsoftJson", "Linq"]}, {"comment": "3", "fileextention": "cs", "code": "8", "hash": "41aa7e0e5e2676b3f5d137202e816d2d", "averagelinelength": 19, "effortmonths": "0.02", "duplicates": [], "blank": "0", "estimatedcost": "170", "filename": "SampleDirection.cs", "content": "namespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// Indicates whether the sample is used for request or response\n    /// </summary>\n    public enum SampleDirection\n    {\n        Request = 0,\n        Response\n    }\n}", "filescount": "1", "linescount": 11, "location": "/Mi9/Areas/HelpPage/SampleGeneration", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "29", "hash": "de4b6bb61fa21b742f0678f0d01f5b22", "averagelinelength": 25, "effortmonths": "0.06", "duplicates": [], "blank": "5", "estimatedcost": "656", "filename": "InvalidSample.cs", "content": "using System;\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.\n    /// </summary>\n    public class InvalidSample\n    {\n        public InvalidSample(string errorMessage)\n        {\n            if (errorMessage == null)\n            {\n                throw new ArgumentNullException(\"errorMessage\");\n            }\n            ErrorMessage = errorMessage;\n        }\n\n        public string ErrorMessage { get; private set; }\n\n        public override bool Equals(object obj)\n        {\n            InvalidSample other = obj as InvalidSample;\n            return other != null && ErrorMessage == other.ErrorMessage;\n        }\n\n        public override int GetHashCode()\n        {\n            return ErrorMessage.GetHashCode();\n        }\n\n        public override string ToString()\n        {\n            return ErrorMessage;\n        }\n    }\n}", "filescount": "1", "linescount": 37, "location": "/Mi9/Areas/HelpPage/SampleGeneration", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.07", "technologies": []}, {"comment": "51", "fileextention": "cs", "code": "103", "hash": "6abcd2a79cc8e076c3252df49b00e7ad", "averagelinelength": 36, "effortmonths": "0.22", "duplicates": [], "blank": "18", "estimatedcost": "2484", "filename": "HelpPageSampleKey.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Net.Http.Headers;\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// This is used to identify the place where the sample should be applied.\n    /// </summary>\n    public class HelpPageSampleKey\n    {\n        /// <summary>\n        /// Creates a new <see cref=\"HelpPageSampleKey\"/> based on media type.\n        /// </summary>\n        /// <param name=\"mediaType\">The media type.</param>\n        public HelpPageSampleKey(MediaTypeHeaderValue mediaType)\n        {\n            if (mediaType == null)\n            {\n                throw new ArgumentNullException(\"mediaType\");\n            }\n\n            ActionName = String.Empty;\n            ControllerName = String.Empty;\n            MediaType = mediaType;\n            ParameterNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n        }\n\n        /// <summary>\n        /// Creates a new <see cref=\"HelpPageSampleKey\"/> based on media type and CLR type.\n        /// </summary>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"type\">The CLR type.</param>\n        public HelpPageSampleKey(MediaTypeHeaderValue mediaType, Type type)\n            : this(mediaType)\n        {\n            if (type == null)\n            {\n                throw new ArgumentNullException(\"type\");\n            }\n\n            ParameterType = type;\n        }\n\n        /// <summary>\n        /// Creates a new <see cref=\"HelpPageSampleKey\"/> based on <see cref=\"SampleDirection\"/>, controller name, action name and parameter names.\n        /// </summary>\n        /// <param name=\"sampleDirection\">The <see cref=\"SampleDirection\"/>.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        public HelpPageSampleKey(SampleDirection sampleDirection, string controllerName, string actionName, IEnumerable<string> parameterNames)\n        {\n            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))\n            {\n                throw new InvalidEnumArgumentException(\"sampleDirection\", (int)sampleDirection, typeof(SampleDirection));\n            }\n            if (controllerName == null)\n            {\n                throw new ArgumentNullException(\"controllerName\");\n            }\n            if (actionName == null)\n            {\n                throw new ArgumentNullException(\"actionName\");\n            }\n            if (parameterNames == null)\n            {\n                throw new ArgumentNullException(\"parameterNames\");\n            }\n\n            ControllerName = controllerName;\n            ActionName = actionName;\n            ParameterNames = new HashSet<string>(parameterNames, StringComparer.OrdinalIgnoreCase);\n            SampleDirection = sampleDirection;\n        }\n\n        /// <summary>\n        /// Creates a new <see cref=\"HelpPageSampleKey\"/> based on media type, <see cref=\"SampleDirection\"/>, controller name, action name and parameter names.\n        /// </summary>\n        /// <param name=\"mediaType\">The media type.</param>\n        /// <param name=\"sampleDirection\">The <see cref=\"SampleDirection\"/>.</param>\n        /// <param name=\"controllerName\">Name of the controller.</param>\n        /// <param name=\"actionName\">Name of the action.</param>\n        /// <param name=\"parameterNames\">The parameter names.</param>\n        public HelpPageSampleKey(MediaTypeHeaderValue mediaType, SampleDirection sampleDirection, string controllerName, string actionName, IEnumerable<string> parameterNames)\n            : this(sampleDirection, controllerName, actionName, parameterNames)\n        {\n            if (mediaType == null)\n            {\n                throw new ArgumentNullException(\"mediaType\");\n            }\n\n            MediaType = mediaType;\n        }\n\n        /// <summary>\n        /// Gets the name of the controller.\n        /// </summary>\n        /// <value>\n        /// The name of the controller.\n        /// </value>\n        public string ControllerName { get; private set; }\n\n        /// <summary>\n        /// Gets the name of the action.\n        /// </summary>\n        /// <value>\n        /// The name of the action.\n        /// </value>\n        public string ActionName { get; private set; }\n\n        /// <summary>\n        /// Gets the media type.\n        /// </summary>\n        /// <value>\n        /// The media type.\n        /// </value>\n        public MediaTypeHeaderValue MediaType { get; private set; }\n\n        /// <summary>\n        /// Gets the parameter names.\n        /// </summary>\n        public HashSet<string> ParameterNames { get; private set; }\n\n        public Type ParameterType { get; private set; }\n\n        /// <summary>\n        /// Gets the <see cref=\"SampleDirection\"/>.\n        /// </summary>\n        public SampleDirection? SampleDirection { get; private set; }\n\n        public override bool Equals(object obj)\n        {\n            HelpPageSampleKey otherKey = obj as HelpPageSampleKey;\n            if (otherKey == null)\n            {\n                return false;\n            }\n\n            return String.Equals(ControllerName, otherKey.ControllerName, StringComparison.OrdinalIgnoreCase) &&\n                String.Equals(ActionName, otherKey.ActionName, StringComparison.OrdinalIgnoreCase) &&\n                (MediaType == otherKey.MediaType || (MediaType != null && MediaType.Equals(otherKey.MediaType))) &&\n                ParameterType == otherKey.ParameterType &&\n                SampleDirection == otherKey.SampleDirection &&\n                ParameterNames.SetEquals(otherKey.ParameterNames);\n        }\n\n        public override int GetHashCode()\n        {\n            int hashCode = ControllerName.ToUpperInvariant().GetHashCode() ^ ActionName.ToUpperInvariant().GetHashCode();\n            if (MediaType != null)\n            {\n                hashCode ^= MediaType.GetHashCode();\n            }\n            if (SampleDirection != null)\n            {\n                hashCode ^= SampleDirection.GetHashCode();\n            }\n            if (ParameterType != null)\n            {\n                hashCode ^= ParameterType.GetHashCode();\n            }\n            foreach (string parameterName in ParameterNames)\n            {\n                hashCode ^= parameterName.ToUpperInvariant().GetHashCode();\n            }\n\n            return hashCode;\n        }\n    }\n}\n", "filescount": "1", "linescount": 173, "location": "/Mi9/Areas/HelpPage/SampleGeneration", "effortyears": "0.02", "languagename": "C#", "estimateddevelopers": "0.16", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "8", "hash": "f05fa1617dc4a078c56c1fc5cbcad40f", "averagelinelength": 28, "effortmonths": "0.02", "duplicates": [], "blank": "1", "estimatedcost": "170", "filename": "KeyValuePairModelDescription.cs", "content": "namespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class KeyValuePairModelDescription : ModelDescription\n    {\n        public ModelDescription KeyModelDescription { get; set; }\n\n        public ModelDescription ValueModelDescription { get; set; }\n    }\n}", "filescount": "1", "linescount": 9, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "16", "fileextention": "cs", "code": "383", "hash": "93aed6b033b8f78269209bee58748861", "averagelinelength": 41, "effortmonths": "0.88", "duplicates": [{"sourceurl": "https://github.com/czcz1024/poker24", "language": "C#", "md5hash": "7339b0d959a677b913ac5280d2bdae47", "filename": "ModelDescriptionGenerator.cs", "source": "Github", "linescount": 451, "reponame": "poker24", "id": 96078555, "location": "/ServerSide/Areas/HelpPage/ModelDescriptions"}], "blank": "52", "estimatedcost": "9863", "filename": "ModelDescriptionGenerator.cs", "content": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.ComponentModel.DataAnnotations;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Web.Http;\nusing System.Web.Http.Description;\nusing System.Xml.Serialization;\nusing Newtonsoft.Json;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    /// <summary>\n    /// Generates model descriptions for given types.\n    /// </summary>\n    public class ModelDescriptionGenerator\n    {\n        // Modify this to support more data annotation attributes.\n        private readonly IDictionary<Type, Func<object, string>> AnnotationTextGenerator = new Dictionary<Type, Func<object, string>>\n        {\n            { typeof(RequiredAttribute), a => \"Required\" },\n            { typeof(RangeAttribute), a =>\n                {\n                    RangeAttribute range = (RangeAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Range: inclusive between {0} and {1}\", range.Minimum, range.Maximum);\n                }\n            },\n            { typeof(MaxLengthAttribute), a =>\n                {\n                    MaxLengthAttribute maxLength = (MaxLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Max length: {0}\", maxLength.Length);\n                }\n            },\n            { typeof(MinLengthAttribute), a =>\n                {\n                    MinLengthAttribute minLength = (MinLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Min length: {0}\", minLength.Length);\n                }\n            },\n            { typeof(StringLengthAttribute), a =>\n                {\n                    StringLengthAttribute strLength = (StringLengthAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"String length: inclusive between {0} and {1}\", strLength.MinimumLength, strLength.MaximumLength);\n                }\n            },\n            { typeof(DataTypeAttribute), a =>\n                {\n                    DataTypeAttribute dataType = (DataTypeAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Data type: {0}\", dataType.CustomDataType ?? dataType.DataType.ToString());\n                }\n            },\n            { typeof(RegularExpressionAttribute), a =>\n                {\n                    RegularExpressionAttribute regularExpression = (RegularExpressionAttribute)a;\n                    return String.Format(CultureInfo.CurrentCulture, \"Matching regular expression pattern: {0}\", regularExpression.Pattern);\n                }\n            },\n        };\n\n        // Modify this to add more default documentations.\n        private readonly IDictionary<Type, string> DefaultTypeDocumentation = new Dictionary<Type, string>\n        {\n            { typeof(Int16), \"integer\" },\n            { typeof(Int32), \"integer\" },\n            { typeof(Int64), \"integer\" },\n            { typeof(UInt16), \"unsigned integer\" },\n            { typeof(UInt32), \"unsigned integer\" },\n            { typeof(UInt64), \"unsigned integer\" },\n            { typeof(Byte), \"byte\" },\n            { typeof(Char), \"character\" },\n            { typeof(SByte), \"signed byte\" },\n            { typeof(Uri), \"URI\" },\n            { typeof(Single), \"decimal number\" },\n            { typeof(Double), \"decimal number\" },\n            { typeof(Decimal), \"decimal number\" },\n            { typeof(String), \"string\" },\n            { typeof(Guid), \"globally unique identifier\" },\n            { typeof(TimeSpan), \"time interval\" },\n            { typeof(DateTime), \"date\" },\n            { typeof(DateTimeOffset), \"date\" },\n            { typeof(Boolean), \"boolean\" },\n        };\n\n        private Lazy<IModelDocumentationProvider> _documentationProvider;\n\n        public ModelDescriptionGenerator(HttpConfiguration config)\n        {\n            if (config == null)\n            {\n                throw new ArgumentNullException(\"config\");\n            }\n\n            _documentationProvider = new Lazy<IModelDocumentationProvider>(() => config.Services.GetDocumentationProvider() as IModelDocumentationProvider);\n            GeneratedModels = new Dictionary<string, ModelDescription>(StringComparer.OrdinalIgnoreCase);\n        }\n\n        public Dictionary<string, ModelDescription> GeneratedModels { get; private set; }\n\n        private IModelDocumentationProvider DocumentationProvider\n        {\n            get\n            {\n                return _documentationProvider.Value;\n            }\n        }\n\n        public ModelDescription GetOrCreateModelDescription(Type modelType)\n        {\n            if (modelType == null)\n            {\n                throw new ArgumentNullException(\"modelType\");\n            }\n\n            Type underlyingType = Nullable.GetUnderlyingType(modelType);\n            if (underlyingType != null)\n            {\n                modelType = underlyingType;\n            }\n\n            ModelDescription modelDescription;\n            string modelName = ModelNameHelper.GetModelName(modelType);\n            if (GeneratedModels.TryGetValue(modelName, out modelDescription))\n            {\n                if (modelType != modelDescription.ModelType)\n                {\n                    throw new InvalidOperationException(\n                        String.Format(\n                            CultureInfo.CurrentCulture,\n                            \"A model description could not be created. Duplicate model name '{0}' was found for types '{1}' and '{2}'. \" +\n                            \"Use the [ModelName] attribute to change the model name for at least one of the types so that it has a unique name.\",\n                            modelName,\n                            modelDescription.ModelType.FullName,\n                            modelType.FullName));\n                }\n\n                return modelDescription;\n            }\n\n            if (DefaultTypeDocumentation.ContainsKey(modelType))\n            {\n                return GenerateSimpleTypeModelDescription(modelType);\n            }\n\n            if (modelType.IsEnum)\n            {\n                return GenerateEnumTypeModelDescription(modelType);\n            }\n\n            if (modelType.IsGenericType)\n            {\n                Type[] genericArguments = modelType.GetGenericArguments();\n\n                if (genericArguments.Length == 1)\n                {\n                    Type enumerableType = typeof(IEnumerable<>).MakeGenericType(genericArguments);\n                    if (enumerableType.IsAssignableFrom(modelType))\n                    {\n                        return GenerateCollectionModelDescription(modelType, genericArguments[0]);\n                    }\n                }\n                if (genericArguments.Length == 2)\n                {\n                    Type dictionaryType = typeof(IDictionary<,>).MakeGenericType(genericArguments);\n                    if (dictionaryType.IsAssignableFrom(modelType))\n                    {\n                        return GenerateDictionaryModelDescription(modelType, genericArguments[0], genericArguments[1]);\n                    }\n\n                    Type keyValuePairType = typeof(KeyValuePair<,>).MakeGenericType(genericArguments);\n                    if (keyValuePairType.IsAssignableFrom(modelType))\n                    {\n                        return GenerateKeyValuePairModelDescription(modelType, genericArguments[0], genericArguments[1]);\n                    }\n                }\n            }\n\n            if (modelType.IsArray)\n            {\n                Type elementType = modelType.GetElementType();\n                return GenerateCollectionModelDescription(modelType, elementType);\n            }\n\n            if (modelType == typeof(NameValueCollection))\n            {\n                return GenerateDictionaryModelDescription(modelType, typeof(string), typeof(string));\n            }\n\n            if (typeof(IDictionary).IsAssignableFrom(modelType))\n            {\n                return GenerateDictionaryModelDescription(modelType, typeof(object), typeof(object));\n            }\n\n            if (typeof(IEnumerable).IsAssignableFrom(modelType))\n            {\n                return GenerateCollectionModelDescription(modelType, typeof(object));\n            }\n\n            return GenerateComplexTypeModelDescription(modelType);\n        }\n\n        // Change this to provide different name for the member.\n        private static string GetMemberName(MemberInfo member, bool hasDataContractAttribute)\n        {\n            JsonPropertyAttribute jsonProperty = member.GetCustomAttribute<JsonPropertyAttribute>();\n            if (jsonProperty != null && !String.IsNullOrEmpty(jsonProperty.PropertyName))\n            {\n                return jsonProperty.PropertyName;\n            }\n\n            if (hasDataContractAttribute)\n            {\n                DataMemberAttribute dataMember = member.GetCustomAttribute<DataMemberAttribute>();\n                if (dataMember != null && !String.IsNullOrEmpty(dataMember.Name))\n                {\n                    return dataMember.Name;\n                }\n            }\n\n            return member.Name;\n        }\n\n        private static bool ShouldDisplayMember(MemberInfo member, bool hasDataContractAttribute)\n        {\n            JsonIgnoreAttribute jsonIgnore = member.GetCustomAttribute<JsonIgnoreAttribute>();\n            XmlIgnoreAttribute xmlIgnore = member.GetCustomAttribute<XmlIgnoreAttribute>();\n            IgnoreDataMemberAttribute ignoreDataMember = member.GetCustomAttribute<IgnoreDataMemberAttribute>();\n            NonSerializedAttribute nonSerialized = member.GetCustomAttribute<NonSerializedAttribute>();\n            ApiExplorerSettingsAttribute apiExplorerSetting = member.GetCustomAttribute<ApiExplorerSettingsAttribute>();\n\n            bool hasMemberAttribute = member.DeclaringType.IsEnum ?\n                member.GetCustomAttribute<EnumMemberAttribute>() != null :\n                member.GetCustomAttribute<DataMemberAttribute>() != null;\n\n            // Display member only if all the followings are true:\n            // no JsonIgnoreAttribute\n            // no XmlIgnoreAttribute\n            // no IgnoreDataMemberAttribute\n            // no NonSerializedAttribute\n            // no ApiExplorerSettingsAttribute with IgnoreApi set to true\n            // no DataContractAttribute without DataMemberAttribute or EnumMemberAttribute\n            return jsonIgnore == null &&\n                xmlIgnore == null &&\n                ignoreDataMember == null &&\n                nonSerialized == null &&\n                (apiExplorerSetting == null || !apiExplorerSetting.IgnoreApi) &&\n                (!hasDataContractAttribute || hasMemberAttribute);\n        }\n\n        private string CreateDefaultDocumentation(Type type)\n        {\n            string documentation;\n            if (DefaultTypeDocumentation.TryGetValue(type, out documentation))\n            {\n                return documentation;\n            }\n            if (DocumentationProvider != null)\n            {\n                documentation = DocumentationProvider.GetDocumentation(type);\n            }\n\n            return documentation;\n        }\n\n        private void GenerateAnnotations(MemberInfo property, ParameterDescription propertyModel)\n        {\n            List<ParameterAnnotation> annotations = new List<ParameterAnnotation>();\n\n            IEnumerable<Attribute> attributes = property.GetCustomAttributes();\n            foreach (Attribute attribute in attributes)\n            {\n                Func<object, string> textGenerator;\n                if (AnnotationTextGenerator.TryGetValue(attribute.GetType(), out textGenerator))\n                {\n                    annotations.Add(\n                        new ParameterAnnotation\n                        {\n                            AnnotationAttribute = attribute,\n                            Documentation = textGenerator(attribute)\n                        });\n                }\n            }\n\n            // Rearrange the annotations\n            annotations.Sort((x, y) =>\n            {\n                // Special-case RequiredAttribute so that it shows up on top\n                if (x.AnnotationAttribute is RequiredAttribute)\n                {\n                    return -1;\n                }\n                if (y.AnnotationAttribute is RequiredAttribute)\n                {\n                    return 1;\n                }\n\n                // Sort the rest based on alphabetic order of the documentation\n                return String.Compare(x.Documentation, y.Documentation, StringComparison.OrdinalIgnoreCase);\n            });\n\n            foreach (ParameterAnnotation annotation in annotations)\n            {\n                propertyModel.Annotations.Add(annotation);\n            }\n        }\n\n        private CollectionModelDescription GenerateCollectionModelDescription(Type modelType, Type elementType)\n        {\n            ModelDescription collectionModelDescription = GetOrCreateModelDescription(elementType);\n            if (collectionModelDescription != null)\n            {\n                return new CollectionModelDescription\n                {\n                    Name = ModelNameHelper.GetModelName(modelType),\n                    ModelType = modelType,\n                    ElementDescription = collectionModelDescription\n                };\n            }\n\n            return null;\n        }\n\n        private ModelDescription GenerateComplexTypeModelDescription(Type modelType)\n        {\n            ComplexTypeModelDescription complexModelDescription = new ComplexTypeModelDescription\n            {\n                Name = ModelNameHelper.GetModelName(modelType),\n                ModelType = modelType,\n                Documentation = CreateDefaultDocumentation(modelType)\n            };\n\n            GeneratedModels.Add(complexModelDescription.Name, complexModelDescription);\n            bool hasDataContractAttribute = modelType.GetCustomAttribute<DataContractAttribute>() != null;\n            PropertyInfo[] properties = modelType.GetProperties(BindingFlags.Public | BindingFlags.Instance);\n            foreach (PropertyInfo property in properties)\n            {\n                if (ShouldDisplayMember(property, hasDataContractAttribute))\n                {\n                    ParameterDescription propertyModel = new ParameterDescription\n                    {\n                        Name = GetMemberName(property, hasDataContractAttribute)\n                    };\n\n                    if (DocumentationProvider != null)\n                    {\n                        propertyModel.Documentation = DocumentationProvider.GetDocumentation(property);\n                    }\n\n                    GenerateAnnotations(property, propertyModel);\n                    complexModelDescription.Properties.Add(propertyModel);\n                    propertyModel.TypeDescription = GetOrCreateModelDescription(property.PropertyType);\n                }\n            }\n\n            FieldInfo[] fields = modelType.GetFields(BindingFlags.Public | BindingFlags.Instance);\n            foreach (FieldInfo field in fields)\n            {\n                if (ShouldDisplayMember(field, hasDataContractAttribute))\n                {\n                    ParameterDescription propertyModel = new ParameterDescription\n                    {\n                        Name = GetMemberName(field, hasDataContractAttribute)\n                    };\n\n                    if (DocumentationProvider != null)\n                    {\n                        propertyModel.Documentation = DocumentationProvider.GetDocumentation(field);\n                    }\n\n                    complexModelDescription.Properties.Add(propertyModel);\n                    propertyModel.TypeDescription = GetOrCreateModelDescription(field.FieldType);\n                }\n            }\n\n            return complexModelDescription;\n        }\n\n        private DictionaryModelDescription GenerateDictionaryModelDescription(Type modelType, Type keyType, Type valueType)\n        {\n            ModelDescription keyModelDescription = GetOrCreateModelDescription(keyType);\n            ModelDescription valueModelDescription = GetOrCreateModelDescription(valueType);\n\n            return new DictionaryModelDescription\n            {\n                Name = ModelNameHelper.GetModelName(modelType),\n                ModelType = modelType,\n                KeyModelDescription = keyModelDescription,\n                ValueModelDescription = valueModelDescription\n            };\n        }\n\n        private EnumTypeModelDescription GenerateEnumTypeModelDescription(Type modelType)\n        {\n            EnumTypeModelDescription enumDescription = new EnumTypeModelDescription\n            {\n                Name = ModelNameHelper.GetModelName(modelType),\n                ModelType = modelType,\n                Documentation = CreateDefaultDocumentation(modelType)\n            };\n            bool hasDataContractAttribute = modelType.GetCustomAttribute<DataContractAttribute>() != null;\n            foreach (FieldInfo field in modelType.GetFields(BindingFlags.Public | BindingFlags.Static))\n            {\n                if (ShouldDisplayMember(field, hasDataContractAttribute))\n                {\n                    EnumValueDescription enumValue = new EnumValueDescription\n                    {\n                        Name = field.Name,\n                        Value = field.GetRawConstantValue().ToString()\n                    };\n                    if (DocumentationProvider != null)\n                    {\n                        enumValue.Documentation = DocumentationProvider.GetDocumentation(field);\n                    }\n                    enumDescription.Values.Add(enumValue);\n                }\n            }\n            GeneratedModels.Add(enumDescription.Name, enumDescription);\n\n            return enumDescription;\n        }\n\n        private KeyValuePairModelDescription GenerateKeyValuePairModelDescription(Type modelType, Type keyType, Type valueType)\n        {\n            ModelDescription keyModelDescription = GetOrCreateModelDescription(keyType);\n            ModelDescription valueModelDescription = GetOrCreateModelDescription(valueType);\n\n            return new KeyValuePairModelDescription\n            {\n                Name = ModelNameHelper.GetModelName(modelType),\n                ModelType = modelType,\n                KeyModelDescription = keyModelDescription,\n                ValueModelDescription = valueModelDescription\n            };\n        }\n\n        private ModelDescription GenerateSimpleTypeModelDescription(Type modelType)\n        {\n            SimpleTypeModelDescription simpleModelDescription = new SimpleTypeModelDescription\n            {\n                Name = ModelNameHelper.GetModelName(modelType),\n                ModelType = modelType,\n                Documentation = CreateDefaultDocumentation(modelType)\n            };\n            GeneratedModels.Add(simpleModelDescription.Name, simpleModelDescription);\n\n            return simpleModelDescription;\n        }\n    }\n}", "filescount": "1", "linescount": 451, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.07", "languagename": "C#", "estimateddevelopers": "0.37", "technologies": ["NewtonsoftJson"]}, {"comment": "0", "fileextention": "cs", "code": "7", "hash": "0af5618ae5f27f3c3beee6d7a461b28f", "averagelinelength": 26, "effortmonths": "0.01", "duplicates": [], "blank": "0", "estimatedcost": "148", "filename": "CollectionModelDescription.cs", "content": "namespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class CollectionModelDescription : ModelDescription\n    {\n        public ModelDescription ElementDescription { get; set; }\n    }\n}", "filescount": "1", "linescount": 7, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "9", "hash": "cbff607781d2fa3c0b834133a108fd44", "averagelinelength": 20, "effortmonths": "0.02", "duplicates": [], "blank": "2", "estimatedcost": "192", "filename": "EnumValueDescription.cs", "content": "namespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class EnumValueDescription\n    {\n        public string Documentation { get; set; }\n\n        public string Name { get; set; }\n\n        public string Value { get; set; }\n    }\n}", "filescount": "1", "linescount": 11, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "10", "hash": "58f5702e2d9c57ee1fe898b07a707a6f", "averagelinelength": 19, "effortmonths": "0.02", "duplicates": [], "blank": "3", "estimatedcost": "215", "filename": "ModelDescription.cs", "content": "using System;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    /// <summary>\n    /// Describes a type model.\n    /// </summary>\n    public abstract class ModelDescription\n    {\n        public string Documentation { get; set; }\n\n        public Type ModelType { get; set; }\n\n        public string Name { get; set; }\n    }\n}", "filescount": "1", "linescount": 16, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "12", "hash": "a84ad42c313769b70e2307e5c2ab5f30", "averagelinelength": 26, "effortmonths": "0.02", "duplicates": [], "blank": "2", "estimatedcost": "260", "filename": "ComplexTypeModelDescription.cs", "content": "using System.Collections.ObjectModel;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class ComplexTypeModelDescription : ModelDescription\n    {\n        public ComplexTypeModelDescription()\n        {\n            Properties = new Collection<ParameterDescription>();\n        }\n\n        public Collection<ParameterDescription> Properties { get; private set; }\n    }\n}", "filescount": "1", "linescount": 14, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "9", "hash": "cfa8f8bb957d699bd7b7fab6f0448d61", "averagelinelength": 19, "effortmonths": "0.02", "duplicates": [], "blank": "2", "estimatedcost": "192", "filename": "ParameterAnnotation.cs", "content": "using System;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class ParameterAnnotation\n    {\n        public Attribute AnnotationAttribute { get; set; }\n\n        public string Documentation { get; set; }\n    }\n}", "filescount": "1", "linescount": 11, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "6", "hash": "ddf46f05d4b9b24810125c9e24b3e38d", "averagelinelength": 20, "effortmonths": "0.01", "duplicates": [], "blank": "0", "estimatedcost": "126", "filename": "SimpleTypeModelDescription.cs", "content": "namespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class SimpleTypeModelDescription : ModelDescription\n    {\n    }\n}", "filescount": "1", "linescount": 6, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.02", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "13", "hash": "216c49a386280c9e137591f6463f477f", "averagelinelength": 29, "effortmonths": "0.03", "duplicates": [], "blank": "2", "estimatedcost": "283", "filename": "ModelNameAttribute.cs", "content": "using System;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    /// <summary>\n    /// Use this attribute to change the name of the <see cref=\"ModelDescription\"/> generated for a type.\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum, AllowMultiple = false, Inherited = false)]\n    public sealed class ModelNameAttribute : Attribute\n    {\n        public ModelNameAttribute(string name)\n        {\n            Name = name;\n        }\n\n        public string Name { get; private set; }\n    }\n}", "filescount": "1", "linescount": 18, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "13", "hash": "04385f5104fe80ce57b191919e0fc554", "averagelinelength": 25, "effortmonths": "0.03", "duplicates": [], "blank": "2", "estimatedcost": "283", "filename": "EnumTypeModelDescription.cs", "content": "using System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class EnumTypeModelDescription : ModelDescription\n    {\n        public EnumTypeModelDescription()\n        {\n            Values = new Collection<EnumValueDescription>();\n        }\n\n        public Collection<EnumValueDescription> Values { get; private set; }\n    }\n}", "filescount": "1", "linescount": 15, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "10", "hash": "a231959f3190ea68c6ec426b84696c5b", "averagelinelength": 19, "effortmonths": "0.02", "duplicates": [], "blank": "2", "estimatedcost": "215", "filename": "IModelDocumentationProvider.cs", "content": "using System;\nusing System.Reflection;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public interface IModelDocumentationProvider\n    {\n        string GetDocumentation(MemberInfo member);\n\n        string GetDocumentation(Type type);\n    }\n}", "filescount": "1", "linescount": 12, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "29", "hash": "d72173ad39d99c985378ab8ea418abfa", "averagelinelength": 38, "effortmonths": "0.06", "duplicates": [], "blank": "4", "estimatedcost": "656", "filename": "ModelNameHelper.cs", "content": "using System;\nusing System.Globalization;\nusing System.Linq;\nusing System.Reflection;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    internal static class ModelNameHelper\n    {\n        // Modify this to provide custom model name mapping.\n        public static string GetModelName(Type type)\n        {\n            ModelNameAttribute modelNameAttribute = type.GetCustomAttribute<ModelNameAttribute>();\n            if (modelNameAttribute != null && !String.IsNullOrEmpty(modelNameAttribute.Name))\n            {\n                return modelNameAttribute.Name;\n            }\n\n            string modelName = type.Name;\n            if (type.IsGenericType)\n            {\n                // Format the generic type name to something like: GenericOfAgurment1AndArgument2\n                Type genericType = type.GetGenericTypeDefinition();\n                Type[] genericArguments = type.GetGenericArguments();\n                string genericTypeName = genericType.Name;\n\n                // Trim the generic parameter counts from the name\n                genericTypeName = genericTypeName.Substring(0, genericTypeName.IndexOf('`'));\n                string[] argumentTypeNames = genericArguments.Select(t => GetModelName(t)).ToArray();\n                modelName = String.Format(CultureInfo.InvariantCulture, \"{0}Of{1}\", genericTypeName, String.Join(\"And\", argumentTypeNames));\n            }\n\n            return modelName;\n        }\n    }\n}", "filescount": "1", "linescount": 36, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.07", "technologies": ["Linq"]}, {"comment": "0", "fileextention": "cs", "code": "16", "hash": "92de535ac5573965a7398602434588b0", "averagelinelength": 24, "effortmonths": "0.03", "duplicates": [], "blank": "5", "estimatedcost": "352", "filename": "ParameterDescription.cs", "content": "using System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\nnamespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class ParameterDescription\n    {\n        public ParameterDescription()\n        {\n            Annotations = new Collection<ParameterAnnotation>();\n        }\n\n        public Collection<ParameterAnnotation> Annotations { get; private set; }\n\n        public string Documentation { get; set; }\n\n        public string Name { get; set; }\n\n        public ModelDescription TypeDescription { get; set; }\n    }\n}", "filescount": "1", "linescount": 21, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.05", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "6", "hash": "4cde5d28fed4113e5f56c723a39df787", "averagelinelength": 22, "effortmonths": "0.01", "duplicates": [], "blank": "0", "estimatedcost": "126", "filename": "DictionaryModelDescription.cs", "content": "namespace Mi9.Areas.HelpPage.ModelDescriptions\n{\n    public class DictionaryModelDescription : KeyValuePairModelDescription\n    {\n    }\n}", "filescount": "1", "linescount": 6, "location": "/Mi9/Areas/HelpPage/ModelDescriptions", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.02", "technologies": []}, {"comment": "0", "fileextention": "config", "code": "36", "hash": "b8d3a1818c97df759d4cc81de257d076", "averagelinelength": 42, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "ASP.Net", "md5hash": "1b4d87fde5ea3e036602406fdb33ec16", "filename": "Web.config", "source": "Bitbucket", "linescount": 42, "reponame": "RealEstateBootstrap", "id": 91910567, "location": "/_PropertyCrawler/packages/Microsoft.AspNet.WebApi.HelpPage.5.2.0/Content/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "ASP.Net", "md5hash": "1b4d87fde5ea3e036602406fdb33ec16", "filename": "Web.config", "source": "Bitbucket", "linescount": 42, "reponame": "RealEstateBootstrap", "id": 91912199, "location": "/_PropertyCrawler/Properties.Web.API/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "ASP.Net", "md5hash": "d3dbcc6481b960e97508c7138e6f1883", "filename": "Web.config", "source": "Bitbucket", "linescount": 42, "reponame": "Messenger", "id": 92001578, "location": "/Messenger/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "ASP.Net", "md5hash": "b8d3a1818c97df759d4cc81de257d076", "filename": "Web.config", "source": "Bitbucket", "linescount": 42, "reponame": "PhoneBook App", "id": 92051515, "location": "/AddressBook/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/BlueInt32/velib-and-furious", "language": "ASP.Net", "md5hash": "9600d783c8fa8711651e8450c0392849", "filename": "Web.config", "source": "Github", "linescount": 42, "reponame": "velib-and-furious", "id": 93220796, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.5.1.2/Content/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/huyq2002/aspnetwebstack", "language": "ASP.Net", "md5hash": "1b4d87fde5ea3e036602406fdb33ec16", "filename": "Web.config", "source": "Github", "linescount": 42, "reponame": "aspnetwebstack", "id": 94667144, "location": "/src/WebApiHelpPage/VB/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/huyq2002/aspnetwebstack", "language": "ASP.Net", "md5hash": "1b4d87fde5ea3e036602406fdb33ec16", "filename": "Web.config", "source": "Github", "linescount": 42, "reponame": "aspnetwebstack", "id": 94667242, "location": "/src/WebApiHelpPage/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/mahiz/Woggle", "language": "ASP.Net", "md5hash": "b72c550ed1da5b7398046d2dd6901dda", "filename": "Web.config", "source": "Github", "linescount": 42, "reponame": "Woggle", "id": 94711656, "location": "/source/Web.Host/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/hjorturls/WebApiThrottle", "language": "ASP.Net", "md5hash": "b72c550ed1da5b7398046d2dd6901dda", "filename": "Web.config", "source": "Github", "linescount": 42, "reponame": "WebApiThrottle", "id": 94727119, "location": "/WebApiThrottle.Demo/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/justinlargey/Force.com-Toolkit-for-NET", "language": "ASP.Net", "md5hash": "b72c550ed1da5b7398046d2dd6901dda", "filename": "Web.config", "source": "Github", "linescount": 42, "reponame": "Force.com-Toolkit-for-NET", "id": 95563578, "location": "/samples/WebServerOAuthFlow/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/czcz1024/poker24", "language": "ASP.Net", "md5hash": "b72c550ed1da5b7398046d2dd6901dda", "filename": "Web.config", "source": "Github", "linescount": 42, "reponame": "poker24", "id": 96078446, "location": "/ServerSide/Areas/HelpPage/Views"}], "blank": "5", "estimatedcost": 0, "filename": "Web.config", "content": "<?xml version=\"1.0\"?>\n\n<configuration>\n  <configSections>\n    <sectionGroup name=\"system.web.webPages.razor\" type=\"System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\">\n      <section name=\"host\" type=\"System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" requirePermission=\"false\" />\n      <section name=\"pages\" type=\"System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" requirePermission=\"false\" />\n    </sectionGroup>\n  </configSections>\n\n  <system.web.webPages.razor>\n    <host factoryType=\"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.2.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" />\n    <pages pageBaseType=\"System.Web.Mvc.WebViewPage\">\n      <namespaces>\n        <add namespace=\"System.Web.Mvc\" />\n        <add namespace=\"System.Web.Mvc.Ajax\" />\n        <add namespace=\"System.Web.Mvc.Html\" />\n        <add namespace=\"System.Web.Routing\" />\n      </namespaces>\n    </pages>\n  </system.web.webPages.razor>\n\n  <appSettings>\n    <add key=\"webpages:Enabled\" value=\"false\" />\n  </appSettings>\n\n  <system.web>\n    <compilation debug=\"true\">\n      <assemblies>\n        <add assembly=\"System.Net.Http, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" />\n      </assemblies>\n    </compilation>\n  </system.web>\n\n  <system.webServer>\n    <handlers>\n      <remove name=\"BlockViewHandler\"/>\n      <add name=\"BlockViewHandler\" path=\"*\" verb=\"*\" preCondition=\"integratedMode\" type=\"System.Web.HttpNotFoundHandler\" />\n    </handlers>\n  </system.webServer>\n</configuration>\n", "filescount": "1", "linescount": 42, "location": "/Mi9/Areas/HelpPage/Views", "effortyears": 0, "languagename": "ASP.Net", "estimateddevelopers": 0, "technologies": []}, {"comment": "1", "fileextention": "cshtml", "code": "3", "hash": "63403840711f341957eca7f5d9c58129", "averagelinelength": 39, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/saifuddinbhagat/durandaluser", "language": "Razor", "md5hash": "b85676f4bb8118056e74b8c59862c9b4", "filename": "_ViewStart.cshtml", "source": "Bitbucket", "linescount": 5, "reponame": "durandalUser", "id": 91899339, "location": "/DurandalPoc/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Bitbucket", "linescount": 4, "reponame": "RealEstateBootstrap", "id": 91912197, "location": "/_PropertyCrawler/Properties.Web.API/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "Razor", "md5hash": "0d12a55ab2ad19591c0776e3a55dca8c", "filename": "_ViewStart.cshtml", "source": "Bitbucket", "linescount": 4, "reponame": "Messenger", "id": 92001576, "location": "/Messenger/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Bitbucket", "linescount": 4, "reponame": "PhoneBook App", "id": 92051513, "location": "/AddressBook/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/sunilsvsnlr2007/myfashionsprodapi", "language": "Razor", "md5hash": "b85676f4bb8118056e74b8c59862c9b4", "filename": "_ViewStart.cshtml", "source": "Bitbucket", "linescount": 5, "reponame": "MyFashionsProdAPI", "id": 92052956, "location": "/MyFashionsProdAPI/MyFashionsProdAPI/Areas/HelpPage/Views"}, {"sourceurl": "https://bitbucket.org/Sportivate/sportivateserver", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Bitbucket", "linescount": 4, "reponame": "SportivateServer", "id": 92137246, "location": "/SportivateWeb/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/danielmazzini/NativeClient-DotNet", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 4, "reponame": "NativeClient-DotNet", "id": 92804430, "location": "/TodoListService/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/asglasby/WebForumProject", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 4, "reponame": "WebForumProject", "id": 93397986, "location": "/WebForum/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/MarinaPo/MyJS", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 4, "reponame": "MyJS", "id": 93549395, "location": "/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/mahiz/Woggle", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 4, "reponame": "Woggle", "id": 94711654, "location": "/source/Web.Host/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/benleishman/NativeClient-DotNet", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 4, "reponame": "NativeClient-DotNet", "id": 94866390, "location": "/TodoListService/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/charreal/side-waffle", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 4, "reponame": "side-waffle", "id": 95097741, "location": "/TemplatePack/ProjectTemplates/Web/Durandal451/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/dennismi/Thinktecture.AuthorizationServer", "language": "Razor", "md5hash": "b85676f4bb8118056e74b8c59862c9b4", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 5, "reponame": "Thinktecture.AuthorizationServer", "id": 95335916, "location": "/samples/Flows/ResourceServer (Web API v1)/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/djezuz/ChinookWebApi", "language": "Razor", "md5hash": "024a3fffcfa2adaf560f636df37d4dd1", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 5, "reponame": "ChinookWebApi", "id": 95865404, "location": "/ChinookWebApi/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/aly-ba/asp.net-MVC---webforms", "language": "Razor", "md5hash": "b85676f4bb8118056e74b8c59862c9b4", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 5, "reponame": "asp.net-MVC---webforms", "id": 95908680, "location": "/CODEBROUILLON/R&D/CampdesCodes/Areas/HelpPage/Views"}, {"sourceurl": "https://github.com/czcz1024/poker24", "language": "Razor", "md5hash": "63403840711f341957eca7f5d9c58129", "filename": "_ViewStart.cshtml", "source": "Github", "linescount": 4, "reponame": "poker24", "id": 96078441, "location": "/ServerSide/Areas/HelpPage/Views"}], "blank": "0", "estimatedcost": 0, "filename": "_ViewStart.cshtml", "content": "@{\n    // Change the Layout path below to blend the look and feel of the help page with your existing web pages\n    Layout = \"~/Views/Shared/_Layout.cshtml\";\n}", "filescount": "1", "linescount": 4, "location": "/Mi9/Areas/HelpPage/Views", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "12", "hash": "f3e8d4fd10c54655ccd4e339ab49ecbf", "averagelinelength": 20, "effortmonths": 0, "duplicates": [{"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "Puppet", "md5hash": "f3e8d4fd10c54655ccd4e339ab49ecbf", "filename": "_Layout.cshtml.pp", "source": "Bitbucket", "linescount": 12, "reponame": "RealEstateBootstrap", "id": 91910603, "location": "/_PropertyCrawler/packages/Microsoft.AspNet.WebApi.HelpPage.5.2.0/Content/Areas/HelpPage/Views/Shared"}, {"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "Razor", "md5hash": "f3e8d4fd10c54655ccd4e339ab49ecbf", "filename": "_Layout.cshtml", "source": "Bitbucket", "linescount": 12, "reponame": "RealEstateBootstrap", "id": 91912235, "location": "/_PropertyCrawler/Properties.Web.API/Areas/HelpPage/Views/Shared"}, {"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "Razor", "md5hash": "4e7330165e73584ae8574316769c0c40", "filename": "_Layout.cshtml", "source": "Bitbucket", "linescount": 12, "reponame": "Messenger", "id": 92001611, "location": "/Messenger/Areas/HelpPage/Views/Shared"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "Razor", "md5hash": "f3e8d4fd10c54655ccd4e339ab49ecbf", "filename": "_Layout.cshtml", "source": "Bitbucket", "linescount": 12, "reponame": "PhoneBook App", "id": 92051561, "location": "/AddressBook/Areas/HelpPage/Views/Shared"}, {"sourceurl": "https://github.com/huyq2002/aspnetwebstack", "language": "Razor", "md5hash": "f3e8d4fd10c54655ccd4e339ab49ecbf", "filename": "_Layout.cshtml", "source": "Github", "linescount": 12, "reponame": "aspnetwebstack", "id": 94667278, "location": "/src/WebApiHelpPage/Areas/HelpPage/Views/Shared"}], "blank": "0", "estimatedcost": 0, "filename": "_Layout.cshtml", "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>@ViewBag.Title</title>\n    @RenderSection(\"scripts\", required: false)\n</head>\n<body>\n    @RenderBody()\n</body>\n</html>", "filescount": "1", "linescount": 12, "location": "/Mi9/Areas/HelpPage/Views/Shared", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "18", "hash": "c54067f4461e8a5a493d393c6f948c88", "averagelinelength": 27, "effortmonths": 0, "duplicates": [], "blank": "1", "estimatedcost": 0, "filename": "ResourceModel.cshtml", "content": "@using System.Web.Http\n@using Mi9.Areas.HelpPage.ModelDescriptions\n@model ModelDescription\n\n<link type=\"text/css\" href=\"~/Areas/HelpPage/HelpPage.css\" rel=\"stylesheet\" />\n<div id=\"body\" class=\"help-page\">\n    <section class=\"featured\">\n        <div class=\"content-wrapper\">\n            <p>\n                @Html.ActionLink(\"Help Page Home\", \"Index\")\n            </p>\n        </div>\n    </section>\n    <h1>@Model.Name</h1>\n    <p>@Model.Documentation</p>\n    <section class=\"content-wrapper main-content clear-fix\">\n        @Html.DisplayFor(m => Model)\n    </section>\n</div>\n", "filescount": "1", "linescount": 20, "location": "/Mi9/Areas/HelpPage/Views/Help", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "20", "hash": "17429b1b26966f4fc70c68f74e6179cc", "averagelinelength": 26, "effortmonths": 0, "duplicates": [], "blank": "2", "estimatedcost": 0, "filename": "Api.cshtml", "content": "@using System.Web.Http\n@using Mi9.Areas.HelpPage.Models\n@model HelpPageApiModel\n\n@{\n    var description = Model.ApiDescription;\n    ViewBag.Title = description.HttpMethod.Method + \" \" + description.RelativePath;\n}\n\n<link type=\"text/css\" href=\"~/Areas/HelpPage/HelpPage.css\" rel=\"stylesheet\" />\n<div id=\"body\" class=\"help-page\">\n    <section class=\"featured\">\n        <div class=\"content-wrapper\">\n            <p>\n                @Html.ActionLink(\"Help Page Home\", \"Index\")\n            </p>\n        </div>\n    </section>\n    <section class=\"content-wrapper main-content clear-fix\">\n        @Html.DisplayForModel()\n    </section>\n</div>\n", "filescount": "1", "linescount": 23, "location": "/Mi9/Areas/HelpPage/Views/Help", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "1", "fileextention": "cshtml", "code": "34", "hash": "9aeb18db82345cc12ef45861288a8aaf", "averagelinelength": 27, "effortmonths": 0, "duplicates": [], "blank": "3", "estimatedcost": 0, "filename": "Index.cshtml", "content": "@using System.Web.Http\n@using System.Web.Http.Controllers\n@using System.Web.Http.Description\n@using System.Collections.ObjectModel\n@using Mi9.Areas.HelpPage.Models\n@model Collection<ApiDescription>\n\n@{\n    ViewBag.Title = \"ASP.NET Web API Help Page\";\n\n    // Group APIs by controller\n    ILookup<HttpControllerDescriptor, ApiDescription> apiGroups = Model.ToLookup(api => api.ActionDescriptor.ControllerDescriptor);\n}\n\n<link type=\"text/css\" href=\"~/Areas/HelpPage/HelpPage.css\" rel=\"stylesheet\" />\n<header class=\"help-page\">\n    <div class=\"content-wrapper\">\n        <div class=\"float-left\">\n            <h1>@ViewBag.Title</h1>\n        </div>\n    </div>\n</header>\n<div id=\"body\" class=\"help-page\">\n    <section class=\"featured\">\n        <div class=\"content-wrapper\">\n            <h2>Introduction</h2>\n            <p>\n                Provide a general description of your APIs here.\n            </p>\n        </div>\n    </section>\n    <section class=\"content-wrapper main-content clear-fix\">\n        @foreach (var group in apiGroups)\n        {\n            @Html.DisplayFor(m => group, \"ApiGroup\")\n        }\n    </section>\n</div>\n", "filescount": "1", "linescount": 39, "location": "/Mi9/Areas/HelpPage/Views/Help", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "12", "hash": "41e56a5dcfbb524222cec777e32076ed", "averagelinelength": 16, "effortmonths": 0, "duplicates": [], "blank": "1", "estimatedcost": 0, "filename": "InvalidSample.cshtml", "content": "@using Mi9.Areas.HelpPage\n@model InvalidSample\n\n@if (HttpContext.Current.IsDebuggingEnabled)\n{\n    <div class=\"warning-message-container\">\n        <p>@Model.ErrorMessage</p>\n    </div>\n}\nelse\n{\n    <p>Sample not available.</p>\n}", "filescount": "1", "linescount": 13, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "1", "fileextention": "cshtml", "code": "28", "hash": "2278ba637269526068cbd23b1937e099", "averagelinelength": 29, "effortmonths": 0, "duplicates": [{"sourceurl": "http://codenameASPNETBeg.codeplex.com", "language": "Pascal", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "CodePlex", "linescount": 30, "reponame": "codenameASPNETBeg", "id": 28814515, "location": "/MVCWebAPI/packages/Microsoft.AspNet.WebApi.HelpPage.4.0.0/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/gkenneally/mvvm_demo", "language": "Pascal", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Bitbucket", "linescount": 30, "reponame": "mvvm_demo", "id": 46002327, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.0.2.0-alpha/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/kevinrjones/devweek2013", "language": "Pascal", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Bitbucket", "linescount": 30, "reponame": "devweek2013", "id": 49704727, "location": "/Todo/packages/Microsoft.AspNet.WebApi.HelpPage.0.3.0-rc/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/itomek/mvcmusicstorespa", "language": "Pascal", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Bitbucket", "linescount": 30, "reponame": "mvcmusicstorespa", "id": 51128662, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.4.0.0/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/henrikjakobsen/WebAPI", "language": "Pascal", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Github", "linescount": 30, "reponame": "WebAPI", "id": 74028633, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.0.2.0-alpha/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/ssuing8825/CodeCamp2012", "language": "Pascal", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Github", "linescount": 30, "reponame": "CodeCamp2012", "id": 74327035, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.0.2.0-alpha/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/saifuddinbhagat/durandaluser", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Bitbucket", "linescount": 30, "reponame": "durandalUser", "id": 91899353, "location": "/DurandalPoc/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "Puppet", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Bitbucket", "linescount": 30, "reponame": "RealEstateBootstrap", "id": 91910587, "location": "/_PropertyCrawler/packages/Microsoft.AspNet.WebApi.HelpPage.5.2.0/Content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Bitbucket", "linescount": 30, "reponame": "RealEstateBootstrap", "id": 91912220, "location": "/_PropertyCrawler/Properties.Web.API/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/jogrms/messenger", "language": "Razor", "md5hash": "55448061a31935a308d95b55b7c7a714", "filename": "Samples.cshtml", "source": "Bitbucket", "linescount": 30, "reponame": "Messenger", "id": 92001599, "location": "/Messenger/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/mkrajnc/phonebook-app", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Bitbucket", "linescount": 30, "reponame": "PhoneBook App", "id": 92051545, "location": "/AddressBook/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/sunilsvsnlr2007/myfashionsprodapi", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Bitbucket", "linescount": 30, "reponame": "MyFashionsProdAPI", "id": 92052970, "location": "/MyFashionsProdAPI/MyFashionsProdAPI/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/sunilsvsnlr2007/myfashionsprodapi", "language": "Puppet", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Bitbucket", "linescount": 30, "reponame": "MyFashionsProdAPI", "id": 92053782, "location": "/MyFashionsProdAPI/packages/Microsoft.AspNet.WebApi.HelpPage.4.0.30506/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://bitbucket.org/Sportivate/sportivateserver", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Bitbucket", "linescount": 30, "reponame": "SportivateServer", "id": 92137257, "location": "/SportivateWeb/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/danielmazzini/NativeClient-DotNet", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "NativeClient-DotNet", "id": 92804444, "location": "/TodoListService/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/BlueInt32/velib-and-furious", "language": "Puppet", "md5hash": "55448061a31935a308d95b55b7c7a714", "filename": "Samples.cshtml.pp", "source": "Github", "linescount": 30, "reponame": "velib-and-furious", "id": 93220815, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.5.1.2/Content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/asglasby/WebForumProject", "language": "Puppet", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Github", "linescount": 30, "reponame": "WebForumProject", "id": 93393497, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.5.0.0/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/asglasby/WebForumProject", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "WebForumProject", "id": 93398014, "location": "/WebForum/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/CTUIR/cdms-services", "language": "Puppet", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Github", "linescount": 30, "reponame": "cdms-services", "id": 93498221, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.4.0.0/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/MarinaPo/MyJS", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "MyJS", "id": 93549430, "location": "/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/huyq2002/aspnetwebstack", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "aspnetwebstack", "id": 94667265, "location": "/src/WebApiHelpPage/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/mahiz/Woggle", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "Woggle", "id": 94711679, "location": "/source/Web.Host/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/hjorturls/WebApiThrottle", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "WebApiThrottle", "id": 94727140, "location": "/WebApiThrottle.Demo/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/benleishman/NativeClient-DotNet", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "NativeClient-DotNet", "id": 94866417, "location": "/TodoListService/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/charreal/side-waffle", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "side-waffle", "id": 95097770, "location": "/TemplatePack/ProjectTemplates/Web/Durandal451/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/dennismi/Thinktecture.AuthorizationServer", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "Thinktecture.AuthorizationServer", "id": 95335943, "location": "/samples/Flows/ResourceServer (Web API v1)/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/justinlargey/Force.com-Toolkit-for-NET", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "Force.com-Toolkit-for-NET", "id": 95563609, "location": "/samples/WebServerOAuthFlow/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/djezuz/ChinookWebApi", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "ChinookWebApi", "id": 95865430, "location": "/ChinookWebApi/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/aly-ba/asp.net-MVC---webforms", "language": "Puppet", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml.pp", "source": "Github", "linescount": 30, "reponame": "asp.net-MVC---webforms", "id": 95905885, "location": "/CODEBROUILLON/R&D/packages/Microsoft.AspNet.WebApi.HelpPage.4.0.0/content/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/aly-ba/asp.net-MVC---webforms", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "asp.net-MVC---webforms", "id": 95908708, "location": "/CODEBROUILLON/R&D/CampdesCodes/Areas/HelpPage/Views/Help/DisplayTemplates"}, {"sourceurl": "https://github.com/czcz1024/poker24", "language": "Razor", "md5hash": "2278ba637269526068cbd23b1937e099", "filename": "Samples.cshtml", "source": "Github", "linescount": 30, "reponame": "poker24", "id": 96078493, "location": "/ServerSide/Areas/HelpPage/Views/Help/DisplayTemplates"}], "blank": "1", "estimatedcost": 0, "filename": "Samples.cshtml", "content": "@using System.Net.Http.Headers\n@model Dictionary<MediaTypeHeaderValue, object>\n\n@{\n    // Group the samples into a single tab if they are the same.\n    Dictionary<string, object> samples = Model.GroupBy(pair => pair.Value).ToDictionary(\n        pair => String.Join(\", \", pair.Select(m => m.Key.ToString()).ToArray()), \n        pair => pair.Key);\n    var mediaTypes = samples.Keys;\n}\n<div>\n    @foreach (var mediaType in mediaTypes)\n    {\n        <h4 class=\"sample-header\">@mediaType</h4>\n        <div class=\"sample-content\">\n            <span><b>Sample:</b></span>\n            @{\n                var sample = samples[mediaType];\n                if (sample == null)\n                {\n                    <p>Sample not available.</p>\n                }\n                else\n                {\n                    @Html.DisplayFor(s => sample);\n                }\n            }\n        </div>\n    }\n</div>", "filescount": "1", "linescount": 30, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "4", "hash": "aaeba3c2cef1df41f02ee41745e5f8b6", "averagelinelength": 95, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "KeyValuePairModelDescription.cshtml", "content": "@using Mi9.Areas.HelpPage.ModelDescriptions\n@model KeyValuePairModelDescription\nPair of @Html.DisplayFor(m => Model.KeyModelDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = Model.KeyModelDescription }) [key]\nand @Html.DisplayFor(m => Model.ValueModelDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = Model.ValueModelDescription }) [value]", "filescount": "1", "linescount": 4, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "5", "hash": "7fd433d6ec5dd64dc9e49743fd442250", "averagelinelength": 13, "effortmonths": 0, "duplicates": [], "blank": "1", "estimatedcost": 0, "filename": "TextSample.cshtml", "content": "@using Mi9.Areas.HelpPage\n@model TextSample\n\n<pre class=\"wrapped\">\n@Model.Text\n</pre>", "filescount": "1", "linescount": 6, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "39", "hash": "a1626261bf4d3b3874405fe76a5ada9a", "averagelinelength": 27, "effortmonths": 0, "duplicates": [], "blank": "2", "estimatedcost": 0, "filename": "ApiGroup.cshtml", "content": "@using System.Web.Http\n@using System.Web.Http.Controllers\n@using System.Web.Http.Description\n@using Mi9.Areas.HelpPage\n@using Mi9.Areas.HelpPage.Models\n@model IGrouping<HttpControllerDescriptor, ApiDescription>\n\n@{\n    var controllerDocumentation = ViewBag.DocumentationProvider != null ? \n        ViewBag.DocumentationProvider.GetDocumentation(Model.Key) : \n        null;\n}\n\n<h2 id=\"@Model.Key.ControllerName\">@Model.Key.ControllerName</h2>\n@if (!String.IsNullOrEmpty(controllerDocumentation))\n{\n    <p>@controllerDocumentation</p>\n}\n<table class=\"help-page-table\">\n    <thead>\n        <tr><th>API</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n    @foreach (var api in Model)\n    {\n        <tr>\n            <td class=\"api-name\"><a href=\"@Url.Action(\"Api\", \"Help\", new { apiId = api.GetFriendlyId() })\">@api.HttpMethod.Method @api.RelativePath</a></td>\n            <td class=\"api-documentation\">\n            @if (api.Documentation != null)\n            {\n                <p>@api.Documentation</p>\n            }\n            else\n            {\n                <p>No documentation available.</p>\n            }\n            </td>\n        </tr>\n    }\n    </tbody>\n</table>", "filescount": "1", "linescount": 41, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "46", "hash": "cab2d1903eecc78bb5bd9fbca8e85a78", "averagelinelength": 32, "effortmonths": 0, "duplicates": [], "blank": "2", "estimatedcost": 0, "filename": "Parameters.cshtml", "content": "@using System.Collections.Generic\n@using System.Collections.ObjectModel\n@using System.Web.Http.Description\n@using System.Threading\n@using Mi9.Areas.HelpPage.ModelDescriptions\n@model IList<ParameterDescription>\n\n@if (Model.Count > 0)\n{\n    <table class=\"help-page-table\">\n        <thead>\n            <tr><th>Name</th><th>Description</th><th>Type</th><th>Additional information</th></tr>\n        </thead>\n        <tbody>\n            @foreach (ParameterDescription parameter in Model)\n            {\n                ModelDescription modelDescription = parameter.TypeDescription;\n                <tr>\n                    <td class=\"parameter-name\">@parameter.Name</td>\n                    <td class=\"parameter-documentation\">\n                        <p>@parameter.Documentation</p>\n                    </td>\n                    <td class=\"parameter-type\">\n                        @Html.DisplayFor(m => modelDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = modelDescription })\n                    </td>\n                    <td class=\"parameter-annotations\">\n                        @if (parameter.Annotations.Count > 0)\n                        {\n                            foreach (var annotation in parameter.Annotations)\n                            {\n                                <p>@annotation.Documentation</p>\n                            }\n                        }\n                        else\n                        {\n                            <p>None.</p>\n                        }\n                    </td>\n                </tr>\n            }\n        </tbody>\n    </table>\n}\nelse\n{\n    <p>None.</p>\n}\n\n", "filescount": "1", "linescount": 49, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "4", "hash": "dbf55d8562aa41e8e725c364df709f7f", "averagelinelength": 96, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "DictionaryModelDescription.cshtml", "content": "@using Mi9.Areas.HelpPage.ModelDescriptions\n@model DictionaryModelDescription\nDictionary of @Html.DisplayFor(m => Model.KeyModelDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = Model.KeyModelDescription }) [key]\nand @Html.DisplayFor(m => Model.ValueModelDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = Model.ValueModelDescription }) [value]", "filescount": "1", "linescount": 4, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "26", "hash": "c9d6483d1fe7567728a5579222ebc421", "averagelinelength": 34, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "ModelDescriptionLink.cshtml", "content": "@using Mi9.Areas.HelpPage.ModelDescriptions\n@model Type\n@{\n    ModelDescription modelDescription = ViewBag.modelDescription;\n    if (modelDescription is ComplexTypeModelDescription || modelDescription is EnumTypeModelDescription)\n    {\n        if (Model == typeof(Object))\n        {\n            @:Object\n        }\n        else\n        {\n            @Html.ActionLink(modelDescription.Name, \"ResourceModel\", \"Help\", new { modelName = modelDescription.Name }, null)\n        }\n    }\n    else if (modelDescription is CollectionModelDescription)\n    {\n        var collectionDescription = modelDescription as CollectionModelDescription;\n        var elementDescription = collectionDescription.ElementDescription;\n        @:Collection of @Html.DisplayFor(m => elementDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = elementDescription })\n    }\n    else\n    {\n        @Html.DisplayFor(m => modelDescription)\n    }\n}", "filescount": "1", "linescount": 26, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "3", "hash": "e6647f6efab7c9c9d6d78e43340790ef", "averagelinelength": 16, "effortmonths": 0, "duplicates": [], "blank": "1", "estimatedcost": 0, "filename": "ImageSample.cshtml", "content": "@using Mi9.Areas.HelpPage\n@model ImageSample\n\n<img src=\"@Model.Src\" />", "filescount": "1", "linescount": 4, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "3", "hash": "0b32770f1717672b7187b19a4579afab", "averagelinelength": 42, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "ComplexTypeModelDescription.cshtml", "content": "@using Mi9.Areas.HelpPage.ModelDescriptions\n@model ComplexTypeModelDescription\n@Html.DisplayFor(m => m.Properties, \"Parameters\")", "filescount": "1", "linescount": 3, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "22", "hash": "b839e11e3e2dccc4295f1936a1d5d60c", "averagelinelength": 26, "effortmonths": 0, "duplicates": [], "blank": "2", "estimatedcost": 0, "filename": "EnumTypeModelDescription.cshtml", "content": "@using Mi9.Areas.HelpPage.ModelDescriptions\n@model EnumTypeModelDescription\n\n<p>Possible enumeration values:</p>\n\n<table class=\"help-page-table\">\n    <thead>\n        <tr><th>Name</th><th>Value</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n        @foreach (EnumValueDescription value in Model.Values)\n        {\n            <tr>\n                <td class=\"enum-name\"><b>@value.Name</b></td>\n                <td class=\"enum-value\">\n                    <p>@value.Value</p>\n                </td>\n                <td class=\"enum-description\">\n                    <p>@value.Documentation</p>\n                </td>\n            </tr>\n        }\n    </tbody>\n</table>", "filescount": "1", "linescount": 24, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "54", "hash": "792051fd26762889f67896f1c71feaa8", "averagelinelength": 24, "effortmonths": 0, "duplicates": [], "blank": "13", "estimatedcost": 0, "filename": "HelpPageApiModel.cshtml", "content": "@using System.Web.Http\n@using System.Web.Http.Description\n@using Mi9.Areas.HelpPage.Models\n@using Mi9.Areas.HelpPage.ModelDescriptions\n@model HelpPageApiModel\n\n@{\n    ApiDescription description = Model.ApiDescription;\n}\n<h1>@description.HttpMethod.Method @description.RelativePath</h1>\n<div>\n    <p>@description.Documentation</p>\n\n    <h2>Request Information</h2>\n\n    <h3>URI Parameters</h3>\n    @Html.DisplayFor(m => m.UriParameters, \"Parameters\")\n\n    <h3>Body Parameters</h3>\n\n    <p>@Model.RequestDocumentation</p>\n\n    @if (Model.RequestModelDescription != null)\n    {\n        @Html.DisplayFor(m => m.RequestModelDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = Model.RequestModelDescription })\n        if (Model.RequestBodyParameters != null)\n        {\n            @Html.DisplayFor(m => m.RequestBodyParameters, \"Parameters\")\n        }\n    }\n    else\n    {\n        <p>None.</p>\n    }\n\n    @if (Model.SampleRequests.Count > 0)\n    {\n        <h3>Request Formats</h3>\n        @Html.DisplayFor(m => m.SampleRequests, \"Samples\")\n    }\n\n    <h2>Response Information</h2>\n\n    <h3>Resource Description</h3>\n\n    <p>@description.ResponseDescription.Documentation</p>\n\n    @if (Model.ResourceDescription != null)\n    {\n        @Html.DisplayFor(m => m.ResourceDescription.ModelType, \"ModelDescriptionLink\", new { modelDescription = Model.ResourceDescription })\n        if (Model.ResourceProperties != null)\n        {\n            @Html.DisplayFor(m => m.ResourceProperties, \"Parameters\")\n        }\n    }\n    else\n    {\n        <p>None.</p>\n    }\n\n    @if (Model.SampleResponses.Count > 0)\n    {\n        <h3>Response Formats</h3>\n        @Html.DisplayFor(m => m.SampleResponses, \"Samples\")\n    }\n\n</div>", "filescount": "1", "linescount": 67, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "6", "hash": "3bbf2e44ee987a1503e7e2cba9f93be0", "averagelinelength": 31, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "CollectionModelDescription.cshtml", "content": "@using Mi9.Areas.HelpPage.ModelDescriptions\n@model CollectionModelDescription\n@if (Model.ElementDescription is ComplexTypeModelDescription)\n{\n    @Html.DisplayFor(m => m.ElementDescription)\n}", "filescount": "1", "linescount": 6, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "0", "fileextention": "cshtml", "code": "3", "hash": "c6ffd99ba90d383f7b8e498743cafe7b", "averagelinelength": 32, "effortmonths": 0, "duplicates": [], "blank": "0", "estimatedcost": 0, "filename": "SimpleTypeModelDescription.cshtml", "content": "@using Mi9.Areas.HelpPage.ModelDescriptions\n@model SimpleTypeModelDescription\n@Model.Documentation", "filescount": "1", "linescount": 3, "location": "/Mi9/Areas/HelpPage/Views/Help/DisplayTemplates", "effortyears": 0, "languagename": "Razor", "estimateddevelopers": 0, "technologies": []}, {"comment": "43", "fileextention": "cs", "code": "55", "hash": "39e071ecd2ce52e7ce3c97ad402bd561", "averagelinelength": 56, "effortmonths": "0.11", "duplicates": [], "blank": "15", "estimatedcost": "1285", "filename": "HelpPageConfig.cs", "content": "// Uncomment the following to provide samples for PageResult<T>. Must also add the Microsoft.AspNet.WebApi.OData\n// package to your project.\n////#define Handle_PageResultOfT\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Linq;\nusing System.Net.Http.Headers;\nusing System.Reflection;\nusing System.Web;\nusing System.Web.Http;\n#if Handle_PageResultOfT\nusing System.Web.Http.OData;\n#endif\n\nnamespace Mi9.Areas.HelpPage\n{\n    /// <summary>\n    /// Use this class to customize the Help Page.\n    /// For example you can set a custom <see cref=\"System.Web.Http.Description.IDocumentationProvider\"/> to supply the documentation\n    /// or you can provide the samples for the requests/responses.\n    /// </summary>\n    public static class HelpPageConfig\n    {\n        [SuppressMessage(\"Microsoft.Globalization\", \"CA1303:Do not pass literals as localized parameters\",\n            MessageId = \"Mi9.Areas.HelpPage.TextSample.#ctor(System.String)\",\n            Justification = \"End users may choose to merge this string with existing localized resources.\")]\n        [SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\",\n            MessageId = \"bsonspec\",\n            Justification = \"Part of a URI.\")]\n        public static void Register(HttpConfiguration config)\n        {\n            //// Uncomment the following to use the documentation from XML documentation file.\n            //config.SetDocumentationProvider(new XmlDocumentationProvider(HttpContext.Current.Server.MapPath(\"~/App_Data/XmlDocument.xml\")));\n\n            //// Uncomment the following to use \"sample string\" as the sample for all actions that have string as the body parameter or return type.\n            //// Also, the string arrays will be used for IEnumerable<string>. The sample objects will be serialized into different media type \n            //// formats by the available formatters.\n            //config.SetSampleObjects(new Dictionary<Type, object>\n            //{\n            //    {typeof(string), \"sample string\"},\n            //    {typeof(IEnumerable<string>), new string[]{\"sample 1\", \"sample 2\"}}\n            //});\n\n            // Extend the following to provide factories for types not handled automatically (those lacking parameterless\n            // constructors) or for which you prefer to use non-default property values. Line below provides a fallback\n            // since automatic handling will fail and GeneratePageResult handles only a single type.\n#if Handle_PageResultOfT\n            config.GetHelpPageSampleGenerator().SampleObjectFactories.Add(GeneratePageResult);\n#endif\n\n            // Extend the following to use a preset object directly as the sample for all actions that support a media\n            // type, regardless of the body parameter or return type. The lines below avoid display of binary content.\n            // The BsonMediaTypeFormatter (if available) is not used to serialize the TextSample object.\n            config.SetSampleForMediaType(\n                new TextSample(\"Binary JSON content. See http://bsonspec.org for details.\"),\n                new MediaTypeHeaderValue(\"application/bson\"));\n\n            //// Uncomment the following to use \"[0]=foo&[1]=bar\" directly as the sample for all actions that support form URL encoded format\n            //// and have IEnumerable<string> as the body parameter or return type.\n            //config.SetSampleForType(\"[0]=foo&[1]=bar\", new MediaTypeHeaderValue(\"application/x-www-form-urlencoded\"), typeof(IEnumerable<string>));\n\n            //// Uncomment the following to use \"1234\" directly as the request sample for media type \"text/plain\" on the controller named \"Values\"\n            //// and action named \"Put\".\n            //config.SetSampleRequest(\"1234\", new MediaTypeHeaderValue(\"text/plain\"), \"Values\", \"Put\");\n\n            //// Uncomment the following to use the image on \"../images/aspNetHome.png\" directly as the response sample for media type \"image/png\"\n            //// on the controller named \"Values\" and action named \"Get\" with parameter \"id\".\n            //config.SetSampleResponse(new ImageSample(\"../images/aspNetHome.png\"), new MediaTypeHeaderValue(\"image/png\"), \"Values\", \"Get\", \"id\");\n\n            //// Uncomment the following to correct the sample request when the action expects an HttpRequestMessage with ObjectContent<string>.\n            //// The sample will be generated as if the controller named \"Values\" and action named \"Get\" were having string as the body parameter.\n            //config.SetActualRequestType(typeof(string), \"Values\", \"Get\");\n\n            //// Uncomment the following to correct the sample response when the action returns an HttpResponseMessage with ObjectContent<string>.\n            //// The sample will be generated as if the controller named \"Values\" and action named \"Post\" were returning a string.\n            //config.SetActualResponseType(typeof(string), \"Values\", \"Post\");\n        }\n\n#if Handle_PageResultOfT\n        private static object GeneratePageResult(HelpPageSampleGenerator sampleGenerator, Type type)\n        {\n            if (type.IsGenericType)\n            {\n                Type openGenericType = type.GetGenericTypeDefinition();\n                if (openGenericType == typeof(PageResult<>))\n                {\n                    // Get the T in PageResult<T>\n                    Type[] typeParameters = type.GetGenericArguments();\n                    Debug.Assert(typeParameters.Length == 1);\n\n                    // Create an enumeration to pass as the first parameter to the PageResult<T> constuctor\n                    Type itemsType = typeof(List<>).MakeGenericType(typeParameters);\n                    object items = sampleGenerator.GetSampleObject(itemsType);\n\n                    // Fill in the other information needed to invoke the PageResult<T> constuctor\n                    Type[] parameterTypes = new Type[] { itemsType, typeof(Uri), typeof(long?), };\n                    object[] parameters = new object[] { items, null, (long)ObjectGenerator.DefaultCollectionSize, };\n\n                    // Call PageResult(IEnumerable<T> items, Uri nextPageLink, long? count) constructor\n                    ConstructorInfo constructor = type.GetConstructor(parameterTypes);\n                    return constructor.Invoke(parameters);\n                }\n            }\n\n            return null;\n        }\n#endif\n    }\n}", "filescount": "1", "linescount": 113, "location": "/Mi9/Areas/HelpPage/App_Start", "effortyears": "0.01", "languagename": "C#", "estimateddevelopers": "0.10", "technologies": []}, {"comment": "36", "fileextention": "cs", "code": "58", "hash": "0e102f2948726cf5e382e4673c1a8d52", "averagelinelength": 35, "effortmonths": "0.12", "duplicates": [{"sourceurl": "https://bitbucket.org/lneninger/realestatebootstrap", "language": "Puppet", "md5hash": "f3cc606663b2a4bc5a00289a89a6aeaf", "filename": "HelpPageApiModel.cs.pp", "source": "Bitbucket", "linescount": 108, "reponame": "RealEstateBootstrap", "id": 91910631, "location": "/_PropertyCrawler/packages/Microsoft.AspNet.WebApi.HelpPage.5.2.0/Content/Areas/HelpPage/Models"}, {"sourceurl": "https://github.com/BlueInt32/velib-and-furious", "language": "Puppet", "md5hash": "bcb54cb3e5e588d68caa25c91aeef724", "filename": "HelpPageApiModel.cs.pp", "source": "Github", "linescount": 108, "reponame": "velib-and-furious", "id": 93220864, "location": "/packages/Microsoft.AspNet.WebApi.HelpPage.5.1.2/Content/Areas/HelpPage/Models"}], "blank": "14", "estimatedcost": "1359", "filename": "HelpPageApiModel.cs", "content": "using System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Net.Http.Headers;\nusing System.Web.Http.Description;\nusing Mi9.Areas.HelpPage.ModelDescriptions;\n\nnamespace Mi9.Areas.HelpPage.Models\n{\n    /// <summary>\n    /// The model that represents an API displayed on the help page.\n    /// </summary>\n    public class HelpPageApiModel\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"HelpPageApiModel\"/> class.\n        /// </summary>\n        public HelpPageApiModel()\n        {\n            UriParameters = new Collection<ParameterDescription>();\n            SampleRequests = new Dictionary<MediaTypeHeaderValue, object>();\n            SampleResponses = new Dictionary<MediaTypeHeaderValue, object>();\n            ErrorMessages = new Collection<string>();\n        }\n\n        /// <summary>\n        /// Gets or sets the <see cref=\"ApiDescription\"/> that describes the API.\n        /// </summary>\n        public ApiDescription ApiDescription { get; set; }\n\n        /// <summary>\n        /// Gets or sets the <see cref=\"ParameterDescription\"/> collection that describes the URI parameters for the API.\n        /// </summary>\n        public Collection<ParameterDescription> UriParameters { get; private set; }\n\n        /// <summary>\n        /// Gets or sets the documentation for the request.\n        /// </summary>\n        public string RequestDocumentation { get; set; }\n\n        /// <summary>\n        /// Gets or sets the <see cref=\"ModelDescription\"/> that describes the request body.\n        /// </summary>\n        public ModelDescription RequestModelDescription { get; set; }\n\n        /// <summary>\n        /// Gets the request body parameter descriptions.\n        /// </summary>\n        public IList<ParameterDescription> RequestBodyParameters\n        {\n            get\n            {\n                return GetParameterDescriptions(RequestModelDescription);\n            }\n        }\n\n        /// <summary>\n        /// Gets or sets the <see cref=\"ModelDescription\"/> that describes the resource.\n        /// </summary>\n        public ModelDescription ResourceDescription { get; set; }\n\n        /// <summary>\n        /// Gets the resource property descriptions.\n        /// </summary>\n        public IList<ParameterDescription> ResourceProperties\n        {\n            get\n            {\n                return GetParameterDescriptions(ResourceDescription);\n            }\n        }\n\n        /// <summary>\n        /// Gets the sample requests associated with the API.\n        /// </summary>\n        public IDictionary<MediaTypeHeaderValue, object> SampleRequests { get; private set; }\n\n        /// <summary>\n        /// Gets the sample responses associated with the API.\n        /// </summary>\n        public IDictionary<MediaTypeHeaderValue, object> SampleResponses { get; private set; }\n\n        /// <summary>\n        /// Gets the error messages associated with this model.\n        /// </summary>\n        public Collection<string> ErrorMessages { get; private set; }\n\n        private static IList<ParameterDescription> GetParameterDescriptions(ModelDescription modelDescription)\n        {\n            ComplexTypeModelDescription complexTypeModelDescription = modelDescription as ComplexTypeModelDescription;\n            if (complexTypeModelDescription != null)\n            {\n                return complexTypeModelDescription.Properties;\n            }\n\n            CollectionModelDescription collectionModelDescription = modelDescription as CollectionModelDescription;\n            if (collectionModelDescription != null)\n            {\n                complexTypeModelDescription = collectionModelDescription.ElementDescription as ComplexTypeModelDescription;\n                if (complexTypeModelDescription != null)\n                {\n                    return complexTypeModelDescription.Properties;\n                }\n            }\n\n            return null;\n        }\n    }\n}", "filescount": "1", "linescount": 108, "location": "/Mi9/Areas/HelpPage/Models", "effortyears": "0.01", "languagename": "C#", "estimateddevelopers": "0.11", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "51", "hash": "14f66829809b8a65a1f3b1488ed2d0f0", "averagelinelength": 28, "effortmonths": "0.11", "duplicates": [], "blank": "9", "estimatedcost": "1187", "filename": "HelpController.cs", "content": "using System;\nusing System.Web.Http;\nusing System.Web.Mvc;\nusing Mi9.Areas.HelpPage.ModelDescriptions;\nusing Mi9.Areas.HelpPage.Models;\n\nnamespace Mi9.Areas.HelpPage.Controllers\n{\n    /// <summary>\n    /// The controller that will handle requests for the help page.\n    /// </summary>\n    public class HelpController : Controller\n    {\n        private const string ErrorViewName = \"Error\";\n\n        public HelpController()\n            : this(GlobalConfiguration.Configuration)\n        {\n        }\n\n        public HelpController(HttpConfiguration config)\n        {\n            Configuration = config;\n        }\n\n        public HttpConfiguration Configuration { get; private set; }\n\n        public ActionResult Index()\n        {\n            ViewBag.DocumentationProvider = Configuration.Services.GetDocumentationProvider();\n            return View(Configuration.Services.GetApiExplorer().ApiDescriptions);\n        }\n\n        public ActionResult Api(string apiId)\n        {\n            if (!String.IsNullOrEmpty(apiId))\n            {\n                HelpPageApiModel apiModel = Configuration.GetHelpPageApiModel(apiId);\n                if (apiModel != null)\n                {\n                    return View(apiModel);\n                }\n            }\n\n            return View(ErrorViewName);\n        }\n\n        public ActionResult ResourceModel(string modelName)\n        {\n            if (!String.IsNullOrEmpty(modelName))\n            {\n                ModelDescriptionGenerator modelDescriptionGenerator = Configuration.GetModelDescriptionGenerator();\n                ModelDescription modelDescription;\n                if (modelDescriptionGenerator.GeneratedModels.TryGetValue(modelName, out modelDescription))\n                {\n                    return View(modelDescription);\n                }\n            }\n\n            return View(ErrorViewName);\n        }\n    }\n}", "filescount": "1", "linescount": 63, "location": "/Mi9/Areas/HelpPage/Controllers", "effortyears": "0.01", "languagename": "C#", "estimateddevelopers": "0.10", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "11", "hash": "670654a52040023664d529ec03600456", "averagelinelength": 14, "effortmonths": "0.02", "duplicates": [], "blank": "1", "estimatedcost": "237", "filename": "Image.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\tpublic class Image : IMiEntity\n\t{\n\t\tpublic String ShowImage { get; set; }\n\t}\n}", "filescount": "1", "linescount": 12, "location": "/Mi9/Model", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "15", "hash": "cdcf160ef2d8d8b74a0ac4f56ae016a6", "averagelinelength": 16, "effortmonths": "0.03", "duplicates": [], "blank": "5", "estimatedcost": "329", "filename": "Episode.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\tpublic class Episode : IMiEntity\n\t{\n\t\tpublic object Channel { get; set; }\n\n\t\tpublic String ChannelLogo { get; set; }\n\n\t\tpublic DateTime? Date { get; set; }\n\n\t\tpublic String Html { get; set; }\n\n\t\tpublic String Url { get; set; }\n\t}\n}", "filescount": "1", "linescount": 20, "location": "/Mi9/Model", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "10", "hash": "c40f401bad042612cdba4ca42fb2e1b8", "averagelinelength": 12, "effortmonths": "0.02", "duplicates": [], "blank": "1", "estimatedcost": "215", "filename": "IMiEntity.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\tpublic interface IMiEntity\n\t{\n\t}\n}", "filescount": "1", "linescount": 11, "location": "/Mi9/Model", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "11", "hash": "b9d60726e34cf74d4ffcf8437536dbb6", "averagelinelength": 14, "effortmonths": "0.02", "duplicates": [], "blank": "1", "estimatedcost": "237", "filename": "Season.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\tpublic class Season : IMiEntity\n\t{\n\t\tpublic String Slug { get; set; }\n\t}\n}", "filescount": "1", "linescount": 12, "location": "/Mi9/Model", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "23", "hash": "cdab74d424bf02fe04a35621de89fdc5", "averagelinelength": 17, "effortmonths": "0.05", "duplicates": [], "blank": "13", "estimatedcost": "515", "filename": "Show.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\tpublic class Show : IMiEntity\n\t{\n\t\tpublic String Country { get; set; }\n\n\t\tpublic String Description { get; set; }\n\n\t\tpublic bool? Drm { get; set; }\n\n\t\tpublic int? EpisodeCount { get; set; }\n\n\t\tpublic String Genre { get; set; }\n\n\t\tpublic Image Image { get; set; }\n\n\t\tpublic String Language { get; set; }\n\n\t\tpublic Episode NextEpisode { get; set; }\n\n\t\tpublic String PrimaryColour { get; set; }\n\n\t\tpublic List<Season> Seasons { get; set; }\n\n\t\tpublic String Slug { get; set; }\n\n\t\tpublic String Title { get; set; }\n\n\t\tpublic String TvChannel { get; set; }\n\t}\n}", "filescount": "1", "linescount": 36, "location": "/Mi9/Model", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.06", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "10", "hash": "6cce1485173c3e852f5d78a61a9a18c7", "averagelinelength": 12, "effortmonths": "0.02", "duplicates": [], "blank": "1", "estimatedcost": "215", "filename": "ResponseDto.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\tpublic abstract class ResponseDto\n\t{\n\t}\n}", "filescount": "1", "linescount": 11, "location": "/Mi9/Model/Response", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.03", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "13", "hash": "2b852d29387fe7f576d62846d9ab5ed4", "averagelinelength": 15, "effortmonths": "0.03", "duplicates": [], "blank": "3", "estimatedcost": "283", "filename": "ShowResponseDto.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\tpublic class ShowResponseDto : ResponseDto\n\t{\n\t\tpublic String Image { get; set; }\n\n\t\tpublic String Slug { get; set; }\n\n\t\tpublic String Title { get; set; }\n\t}\n}", "filescount": "1", "linescount": 16, "location": "/Mi9/Model/Response", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "15", "hash": "f2c63786deb07b150bdfad83af5f2026", "averagelinelength": 19, "effortmonths": "0.03", "duplicates": [], "blank": "2", "estimatedcost": "329", "filename": "ResponseWrapper.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model\n{\n\t/// <summary>\n\t/// A class to give us a neat response. Can have great extensibility in future.\n\t/// </summary>\n\tpublic class ResponseWrapper<T> where T : ResponseDto\n\t{\n\t\tpublic IEnumerable<T> Response { get; set; }\n\n\t\tpublic ResponseWrapper(IEnumerable<T> items)\n\t\t{\n\t\t\tResponse = items;\n\t\t}\n\t}\n}", "filescount": "1", "linescount": 20, "location": "/Mi9/Model/Response", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "14", "hash": "ee6bafb70442743c103b007b521225a1", "averagelinelength": 16, "effortmonths": "0.03", "duplicates": [], "blank": "4", "estimatedcost": "306", "filename": "Request.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Model.Request\n{\n\tpublic class Request<T> where T : IMiEntity\n\t{\n\t\tpublic IEnumerable<T> Payload { get; set; }\n\n\t\tpublic int Skip { get; set; }\n\n\t\tpublic int Take { get; set; }\n\n\t\tpublic int TotalRecords { get; set; }\n\t}\n}", "filescount": "1", "linescount": 18, "location": "/Mi9/Model/Request", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "16", "fileextention": "cs", "code": "15", "hash": "1b76e2d6ae0c61c784d4b62d45cef12f", "averagelinelength": 36, "effortmonths": "0.03", "duplicates": [{"sourceurl": "http://github.com/pvrsouza/juntae", "language": "C#", "md5hash": "23edcb36e802bbe296820994dd1ac750", "filename": "AssemblyInfo.cs", "source": "Github", "linescount": 36, "reponame": "juntae", "id": 14312317, "location": "/1 Entrega/Desenvolvimento de Aplicac?o?es Distribuidas e WEB/Juntae/Juntae/Properties"}, {"sourceurl": "https://bitbucket.org/johannyberg/demo", "language": "C#", "md5hash": "d6c564ef88b452044654e19caf42068b", "filename": "AssemblyInfo.cs", "source": "Bitbucket", "linescount": 36, "reponame": "demo", "id": 45002385, "location": "/Mobile/DSV/Properties"}], "blank": "4", "estimatedcost": "329", "filename": "AssemblyInfo.cs", "content": "using System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"Mi9\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"Mi9\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2015\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"13bc8937-e53e-4ddb-adb7-2aab2940c7bc\")]\n\n// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Revision and Build Numbers\n// by using the '*' as shown below:\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n", "filescount": "1", "linescount": 36, "location": "/Mi9/Properties", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "1", "fileextention": "cs", "code": "11", "hash": "10d409fbd1900aa307507be8ad098aab", "averagelinelength": 17, "effortmonths": "0.02", "duplicates": [], "blank": "1", "estimatedcost": "237", "filename": "BundleConfig.cs", "content": "using System.Web;\nusing System.Web.Optimization;\n\nnamespace Mi9\n{\n\tpublic class BundleConfig\n\t{\n\t\t// For more information on bundling, visit http://go.microsoft.com/fwlink/?LinkId=301862\n\t\tpublic static void RegisterBundles(BundleCollection bundles)\n\t\t{\n\t\t}\n\t}\n}\n", "filescount": "1", "linescount": 14, "location": "/Mi9/App_Start", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "2", "fileextention": "cs", "code": "19", "hash": "c4878eaaa47619b9f1f8050853f26c04", "averagelinelength": 17, "effortmonths": "0.04", "duplicates": [{"sourceurl": "https://github.com/prasannapattam/LTIS", "language": "C#", "md5hash": "584acf0e06a53da1a2582bf35e8892f6", "filename": "WebApiConfig.cs", "source": "Github", "linescount": 25, "reponame": "LTIS", "id": 93855140, "location": "/LTIS/App_Start"}], "blank": "3", "estimatedcost": "421", "filename": "WebApiConfig.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Http;\n\nnamespace Mi9\n{\n\tpublic static class WebApiConfig\n\t{\n\t\tpublic static void Register(HttpConfiguration config)\n\t\t{\n\t\t\t// Web API configuration and services\n\n\t\t\t// Web API routes\n\t\t\tconfig.MapHttpAttributeRoutes();\n\n\t\t\tconfig.Routes.MapHttpRoute(\n\t\t\t\tname: \"DefaultApi\",\n\t\t\t\trouteTemplate: \"api/{controller}/{id}\",\n\t\t\t\tdefaults: new { id = RouteParameter.Optional }\n\t\t\t);\n\t\t}\n\t}\n}\n", "filescount": "1", "linescount": 25, "location": "/Mi9/App_Start", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.05", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "21", "hash": "0b7218849a98705fbf2fad3077221007", "averagelinelength": 19, "effortmonths": "0.04", "duplicates": [{"sourceurl": "http://ruandao.codeplex.com", "language": "C#", "md5hash": "e9135cef316c84d0dffce8b5f598feaf", "filename": "RouteConfig.cs", "source": "CodePlex", "linescount": 23, "reponame": "ruandao", "id": 28494551, "location": "/MiniFace/WebSite/App_Start"}, {"sourceurl": "https://bitbucket.org/hdoghmen/dotnetdev", "language": "C#", "md5hash": "32178a90b15ea944a08ea22d441139b1", "filename": "RouteConfig.cs", "source": "Bitbucket", "linescount": 23, "reponame": "dotnetdev", "id": 31858650, "location": "/Katis/Katis/App_Start"}, {"sourceurl": "https://bitbucket.org/cdelon/post-it-.net", "language": "C#", "md5hash": "618c3dc9e7e79a9b15c7112343dfa41e", "filename": "RouteConfig.cs", "source": "Bitbucket", "linescount": 23, "reponame": "post-it-.net", "id": 48922976, "location": "/Post-it/App_Start"}, {"sourceurl": "https://bitbucket.org/forloop/csvvalueprovider", "language": "C#", "md5hash": "9db62b6f17e545389d08f94b013dd2b8", "filename": "RouteConfig.cs", "source": "Bitbucket", "linescount": 23, "reponame": "csvvalueprovider", "id": 50791246, "location": "/Website/App_Start"}, {"sourceurl": "https://bitbucket.org/azadeh-h/mi9test", "language": "C#", "md5hash": "06586e5af5163e9df852ac838e564016", "filename": "RouteConfig.cs", "source": "Bitbucket", "linescount": 23, "reponame": "mi9Test", "id": 67369033, "location": "/mi9/App_Start"}, {"sourceurl": "https://github.com/Cstolworthy/langues", "language": "C#", "md5hash": "9db62b6f17e545389d08f94b013dd2b8", "filename": "RouteConfig.cs", "source": "Github", "linescount": 23, "reponame": "langues", "id": 71540260, "location": "/Website/App_Start"}, {"sourceurl": "https://github.com/daffers/Rock-Paper-Scissors", "language": "C#", "md5hash": "7191bbdb2f6b4f8bd686e66bb51ed7da", "filename": "RouteConfig.cs", "source": "Github", "linescount": 23, "reponame": "Rock-Paper-Scissors", "id": 72953521, "location": "/WebSite/App_Start"}, {"sourceurl": "https://github.com/ketuan/auth0-webapi-js-sample", "language": "C#", "md5hash": "3e8bb3b3a49149abb59e9ef64e5b8428", "filename": "RouteConfig.cs", "source": "Github", "linescount": 23, "reponame": "auth0-webapi-js-sample", "id": 92847153, "location": "/WebApi/App_Start"}], "blank": "2", "estimatedcost": "468", "filename": "RouteConfig.cs", "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nnamespace Mi9\n{\n\tpublic class RouteConfig\n\t{\n\t\tpublic static void RegisterRoutes(RouteCollection routes)\n\t\t{\n\t\t\troutes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n\n\t\t\troutes.MapRoute(\n\t\t\t\tname: \"Default\",\n\t\t\t\turl: \"{controller}/{action}/{id}\",\n\t\t\t\tdefaults: new { controller = \"Home\", action = \"Index\", id = UrlParameter.Optional }\n\t\t\t);\n\t\t}\n\t}\n}\n", "filescount": "1", "linescount": 24, "location": "/Mi9/App_Start", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.06", "technologies": []}, {"comment": "0", "fileextention": "cs", "code": "12", "hash": "253a71d135a16c2bdfcac191463002af", "averagelinelength": 14, "effortmonths": "0.02", "duplicates": [{"sourceurl": "http://livechatstarterkit.codeplex.com", "language": "C#", "md5hash": "a6bc573aad8845753c040810174a2f0f", "filename": "FilterConfig.cs", "source": "CodePlex", "linescount": 13, "reponame": "livechatstarterkit", "id": 27823174, "location": "/src/Demo/Demo/App_Start"}, {"sourceurl": "https://bitbucket.org/DmitryEkimov/daleg", "language": "C#", "md5hash": "80bf33e2559d18c945cda24287e345c5", "filename": "FilterConfig.cs", "source": "Bitbucket", "linescount": 13, "reponame": "daleg", "id": 44583302, "location": "/DaleG/App_Start"}, {"sourceurl": "https://bitbucket.org/orbmedia/bb-umb1", "language": "C#", "md5hash": "2ad136cc34f0b072be1d14504b496a96", "filename": "FilterConfig.cs", "source": "Bitbucket", "linescount": 13, "reponame": "bb-umb1", "id": 47804029, "location": "/DemoE/App_Start"}, {"sourceurl": "https://bitbucket.org/azadeh-h/mi9test", "language": "C#", "md5hash": "079e5eff16866a0bf816a42509adcc3d", "filename": "FilterConfig.cs", "source": "Bitbucket", "linescount": 13, "reponame": "mi9Test", "id": 67369025, "location": "/mi9/App_Start"}, {"sourceurl": "https://github.com/arwenv/about", "language": "C#", "md5hash": "e92f98448a0b31b7d5f9fdcf9fd6fc17", "filename": "FilterConfig.cs", "source": "Github", "linescount": 13, "reponame": "about", "id": 69567688, "location": "/About/App_Start"}, {"sourceurl": "https://bitbucket.org/jesse_temple/omaha", "language": "C#", "md5hash": "67a6c005c24be9d5cb03d6079143a364", "filename": "FilterConfig.cs", "source": "Bitbucket", "linescount": 14, "reponame": "Omaha", "id": 91982646, "location": "/Omaha/App_Start"}, {"sourceurl": "https://bitbucket.org/amylarsak/savedatabase", "language": "C#", "md5hash": "9180acf14de9d93d8403c3671cd13047", "filename": "FilterConfig.cs", "source": "Bitbucket", "linescount": 14, "reponame": "SaveDatabase", "id": 91985940, "location": "/SaveTeam/App_Start"}, {"sourceurl": "https://github.com/prasannapattam/LTIS", "language": "C#", "md5hash": "2959a61343744d0e08bdbd0a5f1c0ffa", "filename": "FilterConfig.cs", "source": "Github", "linescount": 13, "reponame": "LTIS", "id": 93855150, "location": "/LTIS/App_Start"}, {"sourceurl": "https://github.com/Daenro/EpamTask1", "language": "C#", "md5hash": "83ee209cf7c20eddf296ea9b4e4bd2b0", "filename": "FilterConfig.cs", "source": "Github", "linescount": 13, "reponame": "EpamTask1", "id": 94328594, "location": "/task1/App_Start"}], "blank": "1", "estimatedcost": "260", "filename": "FilterConfig.cs", "content": "using System.Web;\nusing System.Web.Mvc;\n\nnamespace Mi9\n{\n\tpublic class FilterConfig\n\t{\n\t\tpublic static void RegisterGlobalFilters(GlobalFilterCollection filters)\n\t\t{\n\t\t\tfilters.Add(new HandleErrorAttribute());\n\t\t}\n\t}\n}\n", "filescount": "1", "linescount": 14, "location": "/Mi9/App_Start", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.04", "technologies": []}, {"comment": "3", "fileextention": "cs", "code": "24", "hash": "6b4dc648837cc0b94e25ae0cabe03359", "averagelinelength": 24, "effortmonths": "0.05", "duplicates": [], "blank": "1", "estimatedcost": "538", "filename": "ShowHandler.cs", "content": "using Mi9.Model;\nusing Mi9.Model.Request;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Mi9.Handlers\n{\n\tpublic class ShowHandler\n\t{\n\t\t/// <summary>\n\t\t/// Filters the given list of shows down to those with DRM and episodes present\n\t\t/// </summary>\n\t\tpublic IEnumerable<ShowResponseDto> GetDrmShowsWithEpisodes(Request<Show> showRequest)\n\t\t{\n\t\t\treturn showRequest.Payload\n\t\t\t\t.Where(s => s.Drm == true)\n\t\t\t\t.Where(s => s.EpisodeCount > 0)\n\t\t\t\t.Skip(showRequest.Skip).Take(showRequest.Take)\n\t\t\t\t.Select(s => new ShowResponseDto {\n\t\t\t\t\t\tImage = s.Image != null ? s.Image.ShowImage : String.Empty,\n\t\t\t\t\t\tSlug = s.Slug,\n\t\t\t\t\t\tTitle = s.Title\t\t\t\n\t\t\t\t});\n\t\t}\n\t}\n}", "filescount": "1", "linescount": 28, "location": "/Mi9/Handlers", "effortyears": "0.00", "languagename": "C#", "estimateddevelopers": "0.06", "technologies": ["Linq"]}, {"comment": "3", "fileextention": "cs", "code": "34", "hash": "7d3e9b2f83ce9560a0d1ad57b1ac3023", "averagelinelength": 29, "effortmonths": "0.07", "duplicates": [], "blank": "2", "estimatedcost": "776", "filename": "ShowController.cs", "content": "using Mi9.Handlers;\nusing Mi9.Model;\nusing Mi9.Model.Request;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Web.Http;\nusing System.Web.Http.Description;\n\nnamespace Mi9.Controllers\n{\n    public class ShowController : MiApiController<Show>\n    {\n        // POST api/Shows\n\t\t[HttpPost]\n\t\t[ResponseType(typeof(ResponseWrapper<ShowResponseDto>))]\n\t\t[Route(\"\")]\n\t\tpublic IHttpActionResult PostShows([FromBody]Request<Show> showRequest)\n\t\t{\n\t\t\tif (this.IsModelValid(showRequest))\n\t\t\t{\n\t\t\t\tvar showHandler = new ShowHandler();\n\t\t\t\tIEnumerable<ShowResponseDto> showResponseDtos = showHandler.GetDrmShowsWithEpisodes(showRequest);\n\t\t\t\treturn Ok(new ResponseWrapper<ShowResponseDto>(showResponseDtos));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar error = new HttpError(\"\") { { \"error\", \"Could not decode request: JSON parsing failed\" }};\n\t\t\t\tthrow new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, error));\n\n\t\t\t\t// This should be fine normally, but code is looking specifically for 'error' key.\n\t\t\t\t//return BadRequest(\"Could not decode request: JSON parsing failed\");\n\t\t\t}\n\t\t}\n    }\n}\n", "filescount": "1", "linescount": 40, "location": "/Mi9/Controllers", "effortyears": "0.01", "languagename": "C#", "estimateddevelopers": "0.08", "technologies": []}], "totalcost": 57765, "description": "Mostly written in C#. Code contains the following Razor (25%), ASP.Net (7%), C# (60%), MSBuild script (1%), Git Ignore (1%), CSS (1%). Using the following technologies NewtonsoftJson, Linq. It has a git/mercural ignore file. It appears to be over engineered. It is using C# Linq selectors.", "spdx": "##-------------------------\n## SPDX Document Information\n##-------------------------\nSPDXVersion: SPDX-1.2\nDataLicense: CC-BY-4.0\n\n##-------------------------\n## Creation Information\n##-------------------------\nCreator: ubuntu\nCreator: Tool: TripleCheck 0.9.6\nCreated: 2015-05-15T01:06:18Z\n\n##-------------------------\n## Package Information\n##-------------------------\nPackageName: Package\nPackageDownloadLocation: zip\n\n##-------------------------\n## File Information\n##-------------------------\nFileName: ./Mi9.sln\nFileType: OTHER\nFileChecksum: SHA1: 608100a7118791ca8a973e01273645d9ea9cf932\nFileChecksum: SHA256: ee6f3191ccd624331f19d728cd3a96a15502ea3e5b3681350e57b127d6bc52fc\nFileChecksum: MD5: 352846e80d0012f616d84725962b2cd6\nFileChecksum: SSDEEP: 12:qPE7RkI7C1F/96EcFvh2CFHvRrG9PlGM6Rr/FA6HvQFFieQFal6BQFaJ8VZuCV:qPEWIin6EcpFHYgC62Afg6wC8Z\nFileSize: 956 bytes\n\nFileName: ./Mi9/Areas/HelpPage/XmlDocumentationProvider.cs\nFileType: OTHER\nFileChecksum: SHA1: 3053bd9ec007683b4a83ca5ae2a7335e50d60841\nFileChecksum: SHA256: 8f9bb5efc919097eb92075580985301c2ef90acddf43acb68d6796bc86ecb98e\nFileChecksum: MD5: 06d460f0cd806a3ac028521a739550a9\nFileChecksum: SSDEEP: 192:CiYhumZUxIOH5mnSxOsfL+U/u7qz/c8ciAqGTeq2L:pdLPkeX\nFileSize: 6 Kb (7010 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/ApiDescriptionExtensions.cs\nFileType: OTHER\nFileChecksum: SHA1: 729c7588abffe671eb0354ea4e7ce74c6b4bcfff\nFileChecksum: SHA256: 7d36dabb402949fe410f667a13af56d27c244cd4565bae0926252c73e4b57df7\nFileChecksum: MD5: 8db726d24e44e1d067d56b9bb31fb72b\nFileChecksum: SSDEEP: 24:CjkZXf8aeh3FwlC9Qw3ScWchi+Y0/avIHz2TkJYftDpeb:CjKXfc/+wWx+z/iIHztJYftDpeb\nFileSize: 1 Kb (1493 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/SampleGeneration/ObjectGenerator.cs\nFileType: OTHER\nFileChecksum: SHA1: eb9c328583c79531df469b2e80008959297ccd93\nFileChecksum: SHA256: 8a42a345ec2ca62fb2c87f9869429eb5fcf07528902bf41a16506e34e112e5b7\nFileChecksum: MD5: 58dcc2f08f5d7d07435a1e091bbeae5b\nFileChecksum: SSDEEP: 192:tu11F1hgbc8rCu7qAg9YwWAuz4KBOdz9T9ONtGqXn/3vHfXsKAfZAeZaDa563AUw:tubF1osYAfKeNQ4fG+POqESDAHdo\nFileSize: 19 Kb (19485 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/SampleGeneration/ImageSample.cs\nFileType: OTHER\nFileChecksum: SHA1: 8390ff79c179edddb8801f62fb1b5c86e7905501\nFileChecksum: SHA256: 468f5ecc9fee9a6ac9ff0e8aaf0a733c5a555e2fb999aedcdc9f1f0c7585d088\nFileChecksum: MD5: 2741cd4069d98409b79d473466fba83b\nFileChecksum: SSDEEP: 12:CwuqdfWYCFIJZGLLGPt2IJniupqSD/6TrzfFH/0Noh5I6nd5drdhyb:CBIWYHGLLGPDp1Sv7Fsw5I69yb\nFileSize: 1 Kb (1046 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/SampleGeneration/TextSample.cs\nFileType: OTHER\nFileChecksum: SHA1: 02b2621c927ae6c2c32befee646ca0c4b1fa4f87\nFileChecksum: SHA256: 5a2058c6dbb8a72fc5f6edb16524ffda27db7bdf3120870563e486579980dedc\nFileChecksum: MD5: 6f3682ace88e04a2de2861aef900c78e\nFileChecksum: SSDEEP: 12:Cwuq9RwiYCFIJoMeN8RqS9tEmVdjeLFH/0fohGcnptsdrpiCb:CBjiYaTSRdE/FsyGcDpCb\nFileSize: 879 bytes\n\nFileName: ./Mi9/Areas/HelpPage/SampleGeneration/HelpPageSampleGenerator.cs\nFileType: OTHER\nFileChecksum: SHA1: 96ab3d82e822484ccd7e82779814c487e641f36d\nFileChecksum: SHA256: a9625baf59979bed13b3dcf038e8ce59ad2076b3a0d1bffb8186ec165c55ce9e\nFileChecksum: MD5: ec27257f0c5576b937f98e90874c1019\nFileChecksum: SSDEEP: 384:tjkntio7oCib0LAtUZzxvfQ1+SLXp5s2v6rVaP:Qt+IEtUZzxvBWZ1v6ry\nFileSize: 20 Kb (20953 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/SampleGeneration/SampleDirection.cs\nFileType: OTHER\nFileChecksum: SHA1: df62d26493253d368e7ca5e9fa33ab44960b9971\nFileChecksum: SHA256: 8874b6753a5ca2c53829e4cf9a261d227a2502b57524d31442f34e2385e69338\nFileChecksum: MD5: 41aa7e0e5e2676b3f5d137202e816d2d\nFileChecksum: SSDEEP: 6:sC+u9BRi4Yq2AOWRmQSeNOCIJU8LEUbzkKSeNZn:seJnOWRm0NRIJ6ezHJNZ\nFileSize: 220 bytes\n\nFileName: ./Mi9/Areas/HelpPage/SampleGeneration/InvalidSample.cs\nFileType: OTHER\nFileChecksum: SHA1: b491c038ff4da92dd6dc8d124368c33789ef73cc\nFileChecksum: SHA256: f6aff90f8fdb328bec7ef1cb11a16dc53092ed160726c26e2f9c394713e74c85\nFileChecksum: MD5: de4b6bb61fa21b742f0678f0d01f5b22\nFileChecksum: SSDEEP: 12:CwuqdFg5YCFIJNqIxqS3t7bs3LFH/0NPoh4XGO4iqnidrWCb:CBug5YXTxvHCLFsNCIacb\nFileSize: 965 bytes\n\nFileName: ./Mi9/Areas/HelpPage/SampleGeneration/HelpPageSampleKey.cs\nFileType: OTHER\nFileChecksum: SHA1: c3adedc6ce750144ad0530fc610a0b55faa012df\nFileChecksum: SHA256: 4ac63bc8a627a393c21ed1b928aa5c6aa251418302f4039b9b633488db9d15e8\nFileChecksum: MD5: 6abcd2a79cc8e076c3252df49b00e7ad\nFileChecksum: SSDEEP: 96:Cj4Y4GMHpcmz1dDG9NVR1glD5L6rLFZZnL:tjPRqNVOt6tZZnL\nFileSize: 6 Kb (6467 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/KeyValuePairModelDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: e10516652f96a828e6e658c60f42350ed132c9f3\nFileChecksum: SHA256: dca8c4626b005f7d2a571dd4253c309482612837b776fc465d97cb167fb349b0\nFileChecksum: MD5: f05fa1617dc4a078c56c1fc5cbcad40f\nFileChecksum: SSDEEP: 3:fEG+6Gjn9Rp7Wvel6zz7Ohzp7ZAvzp74/q5Azp7LKup7bHJXy5Azp7KJERp7bHbz:sC+ijOnAjmxKaHomN3HTbn\nFileSize: 262 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/ModelDescriptionGenerator.cs\nFileType: OTHER\nFileChecksum: SHA1: 9e3b31279c3ac293962f7552c1f652fa1cf1c1e2\nFileChecksum: SHA256: 49cb9002976b7f9f88fbd3fbc12663d9dcb569dc5c299f5e61055cfc3edb5de8\nFileChecksum: MD5: 93aed6b033b8f78269209bee58748861\nFileChecksum: SSDEEP: 192:tujaIDNcCLOSGNj9JXTKLekEu88cOCvGtS70ck7SZCHTaXsXc7NmNbuPTqk8Jtib:tujaIduFwPWvjsiDUtv+Y0\nFileSize: 18 Kb (19076 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/CollectionModelDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: bed8459c1f750388bf401350e75ef76c15d6bc25\nFileChecksum: SHA256: 5e66280b65c36be0e5cea3c575aa8d2f783ce0aaf4957b124c5d837f7e74b395\nFileChecksum: MD5: 0af5618ae5f27f3c3beee6d7a461b28f\nFileChecksum: SSDEEP: 3:fEG+6Gjn9Rp7Wvel6zBHjRPup7ZAvzp74/q5Azp71RhAB6bHb/bn:sC+iFhGAjmzR3HTbn\nFileSize: 190 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/EnumValueDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: 3a5de10151c534d0e116c444e4393d3390efaf6e\nFileChecksum: SHA256: b5eaa1fc8be0c9cb2f9468d11a332c3d52bfe8e6e594d04111d10f85cea36603\nFileChecksum: MD5: cbff607781d2fa3c0b834133a108fd44\nFileChecksum: SSDEEP: 3:fEG+6Gjn9Rp7Wvel6zu4G64/qEKGClBQeCHJXyOdCHJXyWhCHb/bn:sC+iNG0jdSHolHo4CHTbn\nFileSize: 235 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/ModelDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: 89c1f6d78ff9ab258ca611440a388178f30365ae\nFileChecksum: SHA256: 0785dc354ce2548d14853cddb8866632236fc65cdc06a0176da974c37a687d51\nFileChecksum: MD5: 58f5702e2d9c57ee1fe898b07a707a6f\nFileChecksum: SSDEEP: 6:CsFuC+W94qNlCIJU8bevjjdSHoyT+CnHolHTbn:CwuNIJ8AhhH2Tb\nFileSize: 326 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/ComplexTypeModelDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: 2e6aed9be301cebb1f77a7c8a252ef10311846db\nFileChecksum: SHA256: 907d7200ebe1698e6a60358a91ca62c5638a5ca6c53263c8cd180d4f75529170\nFileChecksum: MD5: a84ad42c313769b70e2307e5c2ab5f30\nFileChecksum: SSDEEP: 6:C4KdZ2IzuC+iGMsNAjGesQD8D60TBohN60TBr/mFlbn:C4KL2IzuTM81eVI1a31gFlb\nFileSize: 377 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/ParameterAnnotation.cs\nFileType: OTHER\nFileChecksum: SHA1: 43c87b5bc26ce22bb52adcb1ae3d047d9be7fea0\nFileChecksum: SHA256: 9eceb3b69e90ea03c51492d9ca32f95f4c174042d7d9d5806573321a0ae02a83\nFileChecksum: MD5: cfa8f8bb957d699bd7b7fab6f0448d61\nFileChecksum: SSDEEP: 3:DKDs7WWVEG+6Gjn9Rp7Wvel6zKmAYS6FK/qkXGQPKfhHSnHJXyEKGClBQeCHb/bn:CsFuC+iOmKujk3yfRSnHojdSHTbn\nFileSize: 224 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/SimpleTypeModelDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: 03b5ffe2851f952d80a4ff215b9ba368bb97e333\nFileChecksum: SHA256: f334db6b1c0e9f4f98c9b6dbab86da73a8bf7ffde790fcd0266bdb53453253e9\nFileChecksum: MD5: ddf46f05d4b9b24810125c9e24b3e38d\nFileChecksum: SSDEEP: 3:fEG+6Gjn9Rp7Wvel6zXxoaAJRp7ZAvzp74/Zn:sC+idRsNAwn\nFileSize: 125 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/ModelNameAttribute.cs\nFileType: OTHER\nFileChecksum: SHA1: a2fb50c8bdf0b697e0704f137810990412222a23\nFileChecksum: SHA256: fe2f0ad7e1bd1d95241259c61653e04f80191827f1716fb5edf6907b713239c2\nFileChecksum: MD5: 216c49a386280c9e137591f6463f477f\nFileChecksum: SSDEEP: 12:Cwug8FPu9UKxIJW39ZtgHXMyflx4+xFuQFlb:CBg809U0Xtpy9x4+xQQFlb\nFileSize: 554 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/EnumTypeModelDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: f14e947bd4f27c679225ff116230dde8cf225430\nFileChecksum: SHA256: 5bbe2432fbe32b5e15d9c9be3fe50304adff4c2061b1327e320427348a592cf1\nFileChecksum: MD5: 04385f5104fe80ce57b191919e0fc554\nFileChecksum: SSDEEP: 6:C4KYCLD4KdZ2IzuC+i0sNAjssQJQi08DKiGohNKiGbM/mFlbn:C4KbD4KL2Izu58JfJAIB3sdFlb\nFileSize: 397 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/IModelDocumentationProvider.cs\nFileType: OTHER\nFileChecksum: SHA1: 42af7dcd00869df3f212708cd4775c7e2d553bd8\nFileChecksum: SHA256: 67d1021d5a2ed7500ecbc894d3b6f37bbeb0c9e06719527fee02086010deb07a\nFileChecksum: MD5: a231959f3190ea68c6ec426b84696c5b\nFileChecksum: SSDEEP: 6:CsYLDIwzuC+iThBs/2VWGCOh9bdFXGCQJopwFKAn:CTLDIwzuI6259bOOwh\nFileSize: 248 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/ModelNameHelper.cs\nFileType: OTHER\nFileChecksum: SHA1: eff98ead0c788eca389332ecaeb0bacfae1a5e9c\nFileChecksum: SHA256: 5e580fb23e790d1c86892ac45fe1f68812c86eb4cf249b33e43f9d42c72fc521\nFileChecksum: MD5: d72173ad39d99c985378ab8ea418abfa\nFileChecksum: SSDEEP: 24:Cje26IwagWLH57bsuEKNKsl0NF83mvbl+qFZ3XeWNqMzyHNqi2QMs4kBqHEm88b:Cje26jk7wdlvy35qzeWcMzyHciL/BqkA\nFileSize: 1 Kb (1432 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/ParameterDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: 5bdc50841f920fefd2aa8a4117ccbbb01b7f39b1\nFileChecksum: SHA256: bc56ad1538239c40a7c690f1a1157bdc7b74fc9a2bd58fc4781eeba1e4a60658\nFileChecksum: MD5: 92de535ac5573965a7398602434588b0\nFileChecksum: SSDEEP: 6:C4KYCLD4KdZ2IzuC+iOmTB0ZTBEBWD60KifhN60Kqvnn/mFajdSHolHom/HTbn:C4KbD4KL2IzupWGmIVf3d2FH2ZTb\nFileSize: 534 bytes\n\nFileName: ./Mi9/Areas/HelpPage/ModelDescriptions/DictionaryModelDescription.cs\nFileType: OTHER\nFileChecksum: SHA1: 6c46892fc3cd3d34a05eb7da0ce47f863962617a\nFileChecksum: SHA256: 749f82b288a3da0dfc42d772d3aa793f2da239243186d99e5709e926cee25498\nFileChecksum: MD5: 4cde5d28fed4113e5f56c723a39df787\nFileChecksum: SSDEEP: 3:fEG+6Gjn9Rp7Wvel6zOlNJRp7XHbOhzp74/Zn:sC+iaVPOwn\nFileSize: 137 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Shared/_Layout.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 0c5ad6da09b33aff6c161ec63ebd810d90ad2325\nFileChecksum: SHA256: 072f583a378577038f5ea76b1bc7fa7a1b0e7ad5483a8ef827f91f3445f6e89c\nFileChecksum: MD5: f3e8d4fd10c54655ccd4e339ab49ecbf\nFileChecksum: SSDEEP: 6:hxuJzhqIziYkRZ3fAbplCZ+CzMtXcQx1O8HX4Qb:hYWYmRqXlxNHoQb\nFileSize: 256 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Web.config\nFileType: OTHER\nFileChecksum: SHA1: 1904fe0656c3651d4dc1913b9ca81871c9774b9b\nFileChecksum: SHA256: 7129734097dd1655278589764be661cff73b5c105aba379ca4fa666b1bb49271\nFileChecksum: MD5: cebd0e0aaa26d8ea853921cc2eaad60c\nFileChecksum: SSDEEP: 24:X63l74X9K4rs9QMe4rsv0QORTG4zdoa8R2/R9ZRm0oEyI41CVzV4ZLN2Ftb//H:qsNhCQcwjORTzdP7Nxj/Vza2Ftb3\nFileSize: 1 Kb (1812 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/InvalidSample.cshtml\nFileType: OTHER\nFileChecksum: SHA1: c780c03c37e7bf3b2571d07c109eeeba85c7419a\nFileChecksum: SHA256: 2fbf4bde3b61bd3415f51977a140274dc7a79cda29c65ffcbcdd818cf12a7e39\nFileChecksum: MD5: 41e56a5dcfbb524222cec777e32076ed\nFileChecksum: SSDEEP: 3:eiRcLGjNMO3tyUUALR7hzBdTedFFu944L8pXRFFF/lTDD0poMQvawFF12DqAIuJM:hg+a2VUe7hnSskPw6MQywkQGHLY\nFileSize: 228 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/Samples.cshtml\nFileType: OTHER\nFileChecksum: SHA1: b1d56eb02221d29911dba6e9d174064ae336d9bb\nFileChecksum: SHA256: 94097eee31d39d6abab1b820bb18f4217ee9d168a9167c96ebd45c28fc21ee5d\nFileChecksum: MD5: 2278ba637269526068cbd23b1937e099\nFileChecksum: SSDEEP: 24:MnCxCivU9MwDBBLpryBmqGSyG/KvlOq/fhR1TC6:MnQCiCPLsG+/K9Oq/rdC6\nFileSize: 899 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/KeyValuePairModelDescription.cshtml\nFileType: OTHER\nFileChecksum: SHA1: b0fbea6565809047e14faea7d8fbd4868d7af02b\nFileChecksum: SHA256: 41e15404d7f107b8ee38f628acfb17db0990becf5c99fa2ccd7b2e350bae9d7f\nFileChecksum: MD5: aaeba3c2cef1df41f02ee41745e5f8b6\nFileChecksum: SSDEEP: 6:hg+GEO9FoeLVH4A9DGCW6UVH4Aof+BDGCof+E:12FpRl9/W6URlO+B/O+E\nFileSize: 383 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/TextSample.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 33508274a3a786a2bf27dacdb2645c43511595c3\nFileChecksum: SHA256: df6ccb9c4f684519fd37ab37ad328aacff7af7962752115bf0a2e6c3a98d540e\nFileChecksum: MD5: 7fd433d6ec5dd64dc9e49743fd442250\nFileChecksum: SSDEEP: 3:eiRcLGjNbEFQFkNVVOLlWX+:hg+XFIsRWO\nFileSize: 85 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/ApiGroup.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 56d1e0d9276b4f2b10e03bfe4b9ea5e42be58433\nFileChecksum: SHA256: db78f0b5284b4ba96373193a0229e45c77761c5c16142e10fb03b81f895df768\nFileChecksum: MD5: a1626261bf4d3b3874405fe76a5ada9a\nFileChecksum: SSDEEP: 24:Mf6f/fDNcY2vY2P9ZDuBNKv8H7njFm3N6J62nKp6/z+sZ:Mf6f/fihvhlZtv8HDj4QAf6/z+sZ\nFileSize: 1 Kb (1174 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/Parameters.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 7af8f941bda5f02364e84ec28af2cec51318d82e\nFileChecksum: SHA256: c9b56471e9b900004fa537819a3f4099640b45bc07a505eb68a87a741f1782d0\nFileChecksum: MD5: cab2d1903eecc78bb5bd9fbca8e85a78\nFileChecksum: SSDEEP: 24:M4KUX4KL2+fDeVMjnXgwDwxTbQfyhR/rXpgNmyK/isbwB:M4x4iJfCVeQq+bpgkyK/issB\nFileSize: 1 Kb (1635 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/DictionaryModelDescription.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 2def94bf697a866fa05a12c122e4457da1e99ef8\nFileChecksum: SHA256: 3c1f7ead026508c3213ff937dcc828158d1c69a743f2adc9cbb85837995d2538\nFileChecksum: MD5: dbf55d8562aa41e8e725c364df709f7f\nFileChecksum: SSDEEP: 6:hg+G2Y/cgLVH4A9DGCW6UVH4Aof+BDGCof+E:UcWRl9/W6URlO+B/O+E\nFileSize: 387 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/ModelDescriptionLink.cshtml\nFileType: OTHER\nFileChecksum: SHA1: d2dffe76456c6e1661ad338c85d2c23be450a5a0\nFileChecksum: SHA256: 097781516da4b9560bd604ae4057f3cbf0a4b752514af3335958db54a6a850ed\nFileChecksum: MD5: c9d6483d1fe7567728a5579222ebc421\nFileChecksum: SSDEEP: 24:gjcM2ymK///PWqiQhThJTVaRGXa/vhRi:gjhmK/HPniOaQa/bi\nFileSize: 928 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/ImageSample.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 1d0e1f3e176fa26d6cd66f85847a9159c0359586\nFileChecksum: SHA256: 2ac06ae8c623f1fefd09fcc29c5eb988aaf253d688f0c0193adc3120644ef8c2\nFileChecksum: MD5: e6647f6efab7c9c9d6d78e43340790ef\nFileChecksum: SSDEEP: 3:eiRcLGjNPECIcG5bn:hg+6CXIbn\nFileSize: 70 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/ComplexTypeModelDescription.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 835d46e0e89442dc79470f903c98ad092e43fb83\nFileChecksum: SHA256: 77dc94af68a44b8387083c1016d0c445347af141fea9030b927117fc38c5521a\nFileChecksum: MD5: 0b32770f1717672b7187b19a4579afab\nFileChecksum: SSDEEP: 3:eiRcLGjn9Rp7WvlxsMj4fXBAJRp7PoVHjMD21hEzAZ:hg+GFjMsToVH4S1hEzu\nFileSize: 128 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/EnumTypeModelDescription.cshtml\nFileType: OTHER\nFileChecksum: SHA1: d127e391fd4cd1f5ac470cca9d8be2d07320a12d\nFileChecksum: SHA256: 06c78f13681176bfbe9e12becef15c55842a392f4c276d93d6cc9a99c0758066\nFileChecksum: MD5: b839e11e3e2dccc4295f1936a1d5d60c\nFileChecksum: SSDEEP: 12:gfKr0vu6lf9IONKfjbbdgKdtmMbgKTHg0l/B:OKr0G6lf6ONn0tmNAHNZ\nFileSize: 666 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/HelpPageApiModel.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 05150afad8893381531862ad65ae5fa29b26adde\nFileChecksum: SHA256: 5e6f31f0c0aa22c40b05df4d14da65057501ecbfb292581d8b5011b50b9bd6ee\nFileChecksum: MD5: 792051fd26762889f67896f1c71feaa8\nFileChecksum: SSDEEP: 48:Mf6fQdXpKl+2ia/owWHostYMia/1I8W2:MCodX6ialZIiad3L\nFileSize: 1 Kb (1721 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/CollectionModelDescription.cshtml\nFileType: OTHER\nFileChecksum: SHA1: e24381417f42a1dbddb769ba148ac48cf7e13fb1\nFileChecksum: SHA256: 4a3830b902320cbab0c628319af5987d3057e7f07859fb90e594c123f7f97318\nFileChecksum: MD5: 3bbf2e44ee987a1503e7e2cba9f93be0\nFileChecksum: SSDEEP: 3:eiRcLGjn9Rp7WvlxsNJjRPup7uDY9VIehAB6DG4fXBAJRp7RvN4hVHjMD2gJ8hAa:hg+Ggjh84eOMsVGhVH4SND\nFileSize: 191 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/DisplayTemplates/SimpleTypeModelDescription.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 5e309fe9581a39eed8d66b1bd149ef18134625f0\nFileChecksum: SHA256: 8b51543497f62db540a55cd5dc3e8e8b727cf82fcb380c9dc941e119b079bc7a\nFileChecksum: MD5: c6ffd99ba90d383f7b8e498743cafe7b\nFileChecksum: SSDEEP: 3:eiRcLGjn9Rp7WvlxsaUoaAJRp7KKvBQ:hg+GHURsNi\nFileSize: 98 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/ResourceModel.cshtml\nFileType: OTHER\nFileChecksum: SHA1: ad1e6919fb1176a7aad3dd283e4fd288d135443e\nFileChecksum: SHA256: 04b10ec3c96436d9de19ee0a9838a61960ae47a9fc0716c961867b925e093b3a\nFileChecksum: MD5: c54067f4461e8a5a493d393c6f948c88\nFileChecksum: SSDEEP: 6:hisA5Pg+G/9VI7zqNIbtmtNTrmTJydPgLxw0dKF/MLYMK9I2ES0af9hVH4T/:Mswx7+NxBdew0de/kh8EJk9hR4\nFileSize: 574 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/Api.cshtml\nFileType: OTHER\nFileChecksum: SHA1: df5dbc955d6587fd8d40967c4d2d39b1a0776d5e\nFileChecksum: SHA256: 536e4a5a9fd3520e1e1be6fda19036f8b0f6235a6eb7b1184f56f68d2a75fed3\nFileChecksum: MD5: 17429b1b26966f4fc70c68f74e6179cc\nFileChecksum: SSDEEP: 12:Msw7Y/hxSuK7+NxBdew0de/khOJk9hRYFFD:Mf7Y/hsuKiN9B0Akkk9hRYD\nFileSize: 635 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Views/Help/Index.cshtml\nFileType: OTHER\nFileChecksum: SHA1: 032c8535c342742f6eb0e1f59c34188b95e50763\nFileChecksum: SHA256: 90d26d97f74070b6abad21da4283728159ef8a11a858bd7d19b15dd9c37505ee\nFileChecksum: MD5: 9aeb18db82345cc12ef45861288a8aaf\nFileChecksum: SSDEEP: 24:Mf6f/fDe4KL2FjPeJ0G3SiNfwTgT/rbL2+zkkqbD1hRHNyr:Mf6f/fC4imFi93T/PL2+IhXRHkr\nFileSize: 1 Kb (1127 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/Views/_ViewStart.cshtml\nFileType: OTHER\nFileChecksum: SHA1: f84b6073e8bdecdd107073d311ab36809f1d14ec\nFileChecksum: SHA256: dafad199b913a3d7a8fa89200e17bb998a432057f93e9bc40d40d36db042a6fa\nFileChecksum: MD5: 150f44ed01c64655abc55b1fe8abc859\nFileChecksum: SSDEEP: 3:LNFHDZSRgcleYRSFy0zxJwDFU0c/RkXedPEDonKEm992QArBR0N:LXHVSHrUFy07iIHQ9f4nG\nFileSize: 162 bytes\n\nFileName: ./Mi9/Areas/HelpPage/App_Start/HelpPageConfig.cs\nFileType: OTHER\nFileChecksum: SHA1: a9c68d6afd24f08054feaacff9006c6204c84c6e\nFileChecksum: SHA256: c8e2b90f4b603fd05e8de6f996289fc701e72e77bc5a11a1a6f19de8ed0127eb\nFileChecksum: MD5: 39e071ecd2ce52e7ce3c97ad402bd561\nFileChecksum: SSDEEP: 192:+u2qQmP3d5lQejfk3B6qV3taD6zQvLrRwVqI:+ut5lQ4fk35A3CVx\nFileSize: 6 Kb (6477 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/HelpPage.css\nFileType: SOURCE\nFileChecksum: SHA1: 783924a1ee08f0568e4d7ebd216e35494e42949f\nFileChecksum: SHA256: 31866264fdc7629fa85fa359445add9773179dc6aa465678db87885ccb202a8f\nFileChecksum: MD5: d08df0de70110db49374df1233e7fe0b\nFileChecksum: SSDEEP: 48:62dCtrsX2v+NVulFSRN83CgV7H4wGtGqjX9Dp:6QI+E7tGtGIp\nFileSize: 2 Kb (2311 bytes)\nFileLOC: 113\n\nFileName: ./Mi9/Areas/HelpPage/HelpPageConfigurationExtensions.cs\nFileType: OTHER\nFileChecksum: SHA1: b4a17cc1d1bf08aa6087ee861758f2120776277a\nFileChecksum: SHA256: d0bb3e73f94e3ad0437fd14cd11b920834765e666a2842eab4146ba1b1df649d\nFileChecksum: MD5: 0b762aca852ac57ae2e9d98c9c840c0d\nFileChecksum: SSDEEP: 384:tjkiyMyFyPyUjDiZJWclBOaIni1G1URZm:ByMyFyPyUjWXdDO9ni1G\nFileSize: 23 Kb (24055 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/HelpPageAreaRegistration.cs\nFileType: OTHER\nFileChecksum: SHA1: 58d4dc0bbb8878fc6b9b5ad01c18f969fa47ccec\nFileChecksum: SHA256: e553bacecd4a4b84de691d184ab53a0c04d690b97d4e1b63bb7086f2bc6085e9\nFileChecksum: MD5: 0964befa6c753357347fbd566fbbe6e4\nFileChecksum: SSDEEP: 12:CswLsHRu9RAlZdr4u3oX2X46hNKELAWRN4jOCXgvab:CfLMoDAzoX2XJhZAWRN8OCXRb\nFileSize: 661 bytes\n\nFileName: ./Mi9/Areas/HelpPage/Models/HelpPageApiModel.cs\nFileType: OTHER\nFileChecksum: SHA1: 772296356a70bd9c4d63039e01c08d765b9d49e5\nFileChecksum: SHA256: dbf876b96ee9c7733e5193164216a23d82c0e2dca0d51737a673a2d0ec3f2290\nFileChecksum: MD5: 0e102f2948726cf5e382e4673c1a8d52\nFileChecksum: SSDEEP: 48:C4Y4iAWfXLKgLGcujFDSFFd3XO3FBnK56oO3FM/Pb5UerVkPVQ3YI1ct3b:C4Y4iAW/LteuFNK5KcfM/Tyoct3b\nFileSize: 3 Kb (3936 bytes)\n\nFileName: ./Mi9/Areas/HelpPage/Controllers/HelpController.cs\nFileType: OTHER\nFileChecksum: SHA1: 359c36aa57f6f23acaf234403db3f8fa867c1394\nFileChecksum: SHA256: f4c8c0c258a9f3f66f6f1bb351dbfea5f0fa10e4a1a6cfa79e8273db66217f91\nFileChecksum: MD5: 14f66829809b8a65a1f3b1488ed2d0f0\nFileChecksum: SSDEEP: 48:CjfLYiU2nBreh5vLTPDFn9/3ttByLnIb:CjjvVNU5vLfFn9/7BenIb\nFileSize: 1 Kb (1868 bytes)\n\nFileName: ./Mi9/Web.Debug.config\nFileType: OTHER\nFileChecksum: SHA1: 2c5c0f5a65bbf3be2d18a394f38ed1fce9683606\nFileChecksum: SHA256: 58a3232b11f0105dd6bee8359b6f032132073079ea6369fde28d6239bc0159da\nFileChecksum: MD5: e02bc442a2b8788463681db14b56c92b\nFileChecksum: SSDEEP: 24:P+B8TD+ZEej/2aPeWTQox0kVtD8/CooQqPMy5A:L2Zvb2AJrVty5qET\nFileSize: 1 Kb (1241 bytes)\n\nFileName: ./Mi9/Model/Response/ResponseDto.cs\nFileType: OTHER\nFileChecksum: SHA1: 1d0d7d67eec07fdee3b3bfe01c9958cd34256bed\nFileChecksum: SHA256: 6d16fe29066cebe001da6217fdecc3cbf76976e83ce810544e85731bd7f6f601\nFileChecksum: MD5: 80909424d4a353752df521b276424aff\nFileChecksum: SSDEEP: 3:V/DsIWMLCI5mKNUjLy+rMLCI5pMgeIKI5yAHe7hAWVEG+6RXimFRFaHhRK0CY:V/DsYLD4KYCLD2IrsA+tzuCNiMiNb\nFileSize: 153 bytes\n\nFileName: ./Mi9/Model/Response/ShowResponseDto.cs\nFileType: OTHER\nFileChecksum: SHA1: 28f35621bc06094342d0ad003273da412c5db6ed\nFileChecksum: SHA256: c9eff22a5cbfe88ecccd079ee97553b16b1195e5e7c11c364cdb913bafffb4f0\nFileChecksum: MD5: ed7a2dc8a7c6a5e4e48f0a4e685419f4\nFileChecksum: SSDEEP: 6:V/DsYLD4KYCLD2IrsA+tzuCNir5A5dCaNppMMDhHgnMWJQGhHgnMqRJGH6:V/DTLD4KbD26s9tzuKK5ZuppMMZWMOQL\nFileSize: 271 bytes\n\nFileName: ./Mi9/Model/Response/ResponseWrapper.cs\nFileType: OTHER\nFileChecksum: SHA1: cdfd57caf4127c6d777fa7c1e665e64327559af3\nFileChecksum: SHA256: 837247314698c105b70f64c70e21d74af4fb52b995f8d41911a7d07c4b3a3a3f\nFileChecksum: MD5: e3649937a154d2aa0bdef589db6d91a2\nFileChecksum: SSDEEP: 12:V/DTLD4KbD26s9tzuOTdj0TWIJgySnppMg5WMokUk:Jj4KbD26gaUdjhy7glsk\nFileSize: 409 bytes\n\nFileName: ./Mi9/Model/Image.cs\nFileType: OTHER\nFileChecksum: SHA1: adea29cbde02028499b9a806b4d25788e8c40ddb\nFileChecksum: SHA256: 367bb2a4091c688e1dcd8d96c06ccbd2abe7cebc1a3d2e8000ca92c95d295921\nFileChecksum: MD5: 437da3f1a67b466d83973c504c3404a1\nFileChecksum: SSDEEP: 3:V/DsIWMLCI5mKNUjLy+rMLCI5pMgeIKI5yAHe7hAWVEG+6RXiYVgeRgWyYpMWNKI:V/DsYLD4KYCLD2IrsA+tzuCNiHxEpMW5\nFileSize: 190 bytes\n\nFileName: ./Mi9/Model/Episode.cs\nFileType: OTHER\nFileChecksum: SHA1: 125cd2efd438d15d80e84eaf0875ccdc601f8a74\nFileChecksum: SHA256: c5e824ad83ff9fbdb062aeaa477f6a6d0404d4234af67a8ccf65277de7b1a5cb\nFileChecksum: MD5: 96589de9bb5395a0136e02317724326b\nFileChecksum: SSDEEP: 6:V/DsYLD4KYCLD2IrsA+tzuCNiQa5EpMOO4HgnMGNdreHgnMJMHgnMxMHgnMQa4na:V/DTLD4KbD26s9tzuKxaSpMOOIWMadrc\nFileSize: 343 bytes\n\nFileName: ./Mi9/Model/IMiEntity.cs\nFileType: OTHER\nFileChecksum: SHA1: 2ee91110902cfd85c9c329976741295de460d403\nFileChecksum: SHA256: a220963e62e9777aee0642d6ef7f34f7257ea1e33d00050860b28d096e51ad63\nFileChecksum: MD5: 6046d14d3aef740ee9e89be7e55ce5d0\nFileChecksum: SSDEEP: 3:V/DsIWMLCI5mKNUjLy+rMLCI5pMgeIKI5yAHe7hAWVEG+6RXiSssoMgWy5Y:V/DsYLD4KYCLD2IrsA+tzuCNiSnL\nFileSize: 146 bytes\n\nFileName: ./Mi9/Model/Season.cs\nFileType: OTHER\nFileChecksum: SHA1: 517f24c1717dbb8e509cc87a8f43d6e9d1a5a306\nFileChecksum: SHA256: 6b0b23e20f5fbd67e86a519209ee4116b013c622e7ae8ebf4e8f8b46c20deb0a\nFileChecksum: MD5: 5b51a5947ac1a26702c2f924ad068643\nFileChecksum: SSDEEP: 3:V/DsIWMLCI5mKNUjLy+rMLCI5pMgeIKI5yAHe7hAWVEG+6RXiYb/KLFfvMgWyYpS:V/DsYLD4KYCLD2IrsA+tzuCNihLLEpMl\nFileSize: 186 bytes\n\nFileName: ./Mi9/Model/Show.cs\nFileType: OTHER\nFileChecksum: SHA1: 22bc0e80f234eadbcfde5e83a417dfd402f613e0\nFileChecksum: SHA256: 96f82e08fd656091e4eb832fe5bbceb2ed0bb68672fd0dd9e150fb04904d579a\nFileChecksum: MD5: 55b9225121b9debfb2187b00b2311e62\nFileChecksum: SSDEEP: 12:V/DTLD4KbD26s9tzuKKRopM440SWM2GWMC0SWMI3NWM0HWM4WMKslWM0uAFaWMPa:Jj4KbD26gaK+4DmbNmIh0rUKsJPXzn8J\nFileSize: 667 bytes\n\nFileName: ./Mi9/Model/Request/Request.cs\nFileType: OTHER\nFileChecksum: SHA1: 652f1247ca78551c8b9348d9170d0ec69f95ad03\nFileChecksum: SHA256: aa19eca52542c1deb4945dc84bacee1a3d928cf6777b2b908892a48a44a3b37d\nFileChecksum: MD5: 9f01aeac63e06b4061d60f24650dd320\nFileChecksum: SSDEEP: 6:V/DsYLD4KYCLD2IrsA+tzuCvOEvAjNAQF9EpM31/jDf64HgnMmtHgnMYHgnMICba:V/DTLD4KbD26s9tzuiCATpMFDf6IWMmV\nFileSize: 324 bytes\n\nFileName: ./Mi9/Web.config\nFileType: OTHER\nFileChecksum: SHA1: f7ea2bdef61e481573eb5d61ac72ad2c60be236d\nFileChecksum: SHA256: c4822c5cc4d51b70ae4fb216f98f9945f9938b58d41a0711a1ffb4384f3b84ae\nFileChecksum: MD5: 08e3fc4b601cd9ee82248138bac17cdd\nFileChecksum: SSDEEP: 48:3fLK6Pr+nagBRwXD7kDYCF+fm9mpaxpaJk7:zK6KIf8QN8K8\nFileSize: 2 Kb (2438 bytes)\n\nFileName: ./Mi9/Properties/AssemblyInfo.cs\nFileType: OTHER\nFileChecksum: SHA1: 6ef757002d3bb91fc220e1db613230d31e74dfc7\nFileChecksum: SHA256: a8b61b4d3af3fb694f8ed38e7f4658626d6b8f198bd962f36d029b47b231033e\nFileChecksum: MD5: 507c74cc8022524d1a967857feb97376\nFileChecksum: SSDEEP: 24:JIn+F/JwJvYYNPI+t+ObPkP+W5t7T35e4rlXBOPINZzbSJz/bVn:JM+5+JAYNPIQhPkPj5hTJe2xYILS9/bV\nFileSize: 1 Kb (1337 bytes)\nFileCopyrightText: <text>Copyright \u00a9  2015\")]</text>\n\nFileName: ./Mi9/MiApiController.cs\nFileType: OTHER\nFileChecksum: SHA1: e95a5a0b033f3dbc661a9eabbc0fcc0a0797309d\nFileChecksum: SHA256: 8ffd668f2977f7adfe3297a4e50090dc8894a428b473b1e52992a9a43ba701c5\nFileChecksum: MD5: 7d25f7a5858e7c17925edeee36dcc970\nFileChecksum: SSDEEP: 12:V/ATLD4KbD26s96swGRuBb52H7W2BAFtpyMb+AwWbW+R9NuMKdR99oJ:6j4KbD26XfpIBBwY0/9NuMk99C\nFileSize: 491 bytes\n\nFileName: ./Mi9/App_Start/BundleConfig.cs\nFileType: OTHER\nFileChecksum: SHA1: 2e2a5c5b00395cfc1108338cbf107ddcf0cc7df5\nFileChecksum: SHA256: fd2df345a2755d7bd7974829c88e2dda9e73b6542fa582bd97e85f564327aa91\nFileChecksum: MD5: 5d7d99bca1b07ed8a266f5b70a2d5a17\nFileChecksum: SSDEEP: 6:V/DsA+6sAqmzuBMwMCn0lFGMKer2XW8eDPOCd+6MFSfXmXqHx48w:V/Ds96sfmzuBrnTeqXMDPOgMQ2Xqrw\nFileSize: 266 bytes\n\nFileName: ./Mi9/App_Start/WebApiConfig.cs\nFileType: OTHER\nFileChecksum: SHA1: 6d48d99b0ca341b4c817be4d3e956be0d8d31804\nFileChecksum: SHA256: f6a92884690fe2106135b9dfdac05b7c8a6ed0d36d33c6cadc38a6ee3f3b0075\nFileChecksum: MD5: 747c55d6dcf286a34198e268276e27ff\nFileChecksum: SSDEEP: 12:V/DTLD4KbD26swGRuBaKYpMQ2XvM48FzBAsjgT8x+BJ27gnAVf0D2:Jj4KbD26fpEuQ2XvQiT0TgAVfa2\nFileSize: 472 bytes\n\nFileName: ./Mi9/App_Start/RouteConfig.cs\nFileType: OTHER\nFileChecksum: SHA1: b2b5439797132afe471bc717729ce52425ea2d36\nFileChecksum: SHA256: 25b75f8d72d3bb38265bbc3cacb34c00bf68c82f8e4c50b005d05b207b849409\nFileChecksum: MD5: f658271c3bdb7aba9dc7ccdfaa57f2d1\nFileChecksum: SSDEEP: 12:V/DTLD4KbD26s96saDsxRuBWTnYpMQ2XQHZWnendIRDJ0D2:Jj4KbD26X9DWowfQ2XrenK/a2\nFileSize: 483 bytes\n\nFileName: ./Mi9/App_Start/FilterConfig.cs\nFileType: OTHER\nFileChecksum: SHA1: 051ec8153678a016f852590a23f696f73e6c63a2\nFileChecksum: SHA256: 181aaa32004e8a054bf9e9ccc6e7f1ea65ad7578cc4abb5413158e9caddbb36b\nFileChecksum: MD5: c33750115c6d4260bf5bd4d10b4c92c7\nFileChecksum: SSDEEP: 6:V/DsA+6sAkvTRuBMIX0ppMFSfXmXqKHgNZrpV0cbtt7gHewB:V/Ds96sHRuBBXYpMQ2XaNZFWy7gHeG\nFileSize: 222 bytes\n\nFileName: ./Mi9/Global.asax.cs\nFileType: OTHER\nFileChecksum: SHA1: 39b2778a2076f8e96cbd605a14218703bb1d7671\nFileChecksum: SHA256: e51cfcc4dbcf84b80568f3aae96834d50c23ed2dccd188d530ed6d61462988e8\nFileChecksum: MD5: 193bc584e21e88a2174fd49083c0497c\nFileChecksum: SSDEEP: 12:V/DTLD4KbD26s96swLsaDsfhsxRuBK6HwxJTmXXWPLiXteSXaNZixKTCXNCXqiJ:Jj4KbD26XfL9DkWoYTKX/XthX4Z5CXNQ\nFileSize: 584 bytes\n\nFileName: ./Mi9/Web.Release.config\nFileType: OTHER\nFileChecksum: SHA1: 8e9fc1d134522ec18ab352c4dad7327dadf1ec29\nFileChecksum: SHA256: fd8a0c1e368d4faab58ef8d9e00b7767fefe9977259ea46be26174a9e386e0fb\nFileChecksum: MD5: 8a4d73f8b2833e27e59941c51546e83c\nFileChecksum: SSDEEP: 24:P+B8TD+ZEej/2aPeWTQCc+x0kVtD8/CooQqPMy5A:L2Zvb2A7rVty5qET\nFileSize: 1 Kb (1301 bytes)\n\nFileName: ./Mi9/packages.config\nFileType: OTHER\nFileChecksum: SHA1: 678e47fdd1d6796855d7a80cbdfa91102bab29f8\nFileChecksum: SHA256: d5531a8436e5061c0f6d24b3f8e81c96df1ec933bc0cf058b5dcaa6b4184588e\nFileChecksum: MD5: ff4464678c9805859943dff24997e1ec\nFileChecksum: SSDEEP: 24:Jd00DOveUuzNzKuzfYzHzFOzMzRzaOzxzBP7gT3G:300DOveUuzNzKuzfYzHzFOzMzRzaOzxd\nFileSize: 1 Kb (1424 bytes)\n\nFileName: ./Mi9/Mi9.csproj\nFileType: OTHER\nFileChecksum: SHA1: 4e05493599ea4ab598f9d3b6e268839d210c9424\nFileChecksum: SHA256: 7ecdf2ef3a3401350c482399d26a63f4bad267c0b41e16568d97beefaf51cad9\nFileChecksum: MD5: 02335e6b5b3bd9a79dc215c3b89933b2\nFileChecksum: SSDEEP: 192:rS6SyYhJVKKumVKodTmqi+yhR1iSrUrRNeql3ZNvx:rGXhJVJumVKodTmbNrNqll\nFileSize: 13 Kb (13710 bytes)\n\nFileName: ./Mi9/Handlers/ShowHandler.cs\nFileType: OTHER\nFileChecksum: SHA1: 04b3d0bb0b53c3cddccc9ffe941dbf017e607b53\nFileChecksum: SHA256: c0b869723a919807a64947068883b2c70393b12d2192363f12f53c1e346865ea\nFileChecksum: MD5: 1f9ad5bd2efd9111c9e286770613e7cc\nFileChecksum: SSDEEP: 12:V/ATLD4KbD26s9tzuLJM0tToJIJdMsQT8GQm8U0pAURz57Os7Ad9MU:6j4KbD26gaLCUcsrS0pAClU\nFileSize: 708 bytes\n\nFileName: ./Mi9/Global.asax\nFileType: OTHER\nFileChecksum: SHA1: 9e98a405d654b0d8891741cd77fd2d3df6973721\nFileChecksum: SHA256: 8bffbbab0ac167431ec90e28b6924957da7128b631b1b838f9db4590b5d99a52\nFileChecksum: MD5: 872b6f909fe8026819b4ba906ed198df\nFileChecksum: SSDEEP: 3:jFAkRMQcsNaqxdqNf1RIk2RMQlwTBhF+v:jFAGLxQdRMwTe\nFileSize: 97 bytes\n\nFileName: ./Mi9/Controllers/ShowController.cs\nFileType: OTHER\nFileChecksum: SHA1: f3175e2ea67869d3e600f4a97380dcea4254c191\nFileChecksum: SHA256: 954af16eacd510490baf3fd2ecc95bcac06f90372b43a958a72379de9dd8233a\nFileChecksum: MD5: 23b49b23c8cb58c566a38fb9581897a4\nFileChecksum: SSDEEP: 24:Fj4KbD4Ktd268WfLf8ah/KbTFdNjnp2lZWqFF8j0Fi7aTKhLWmKnmj0Fx:Fj4Y4Od268WfLffybTFLjp23Wqrgr+Ke\nFileSize: 1 Kb (1211 bytes)\n\nFileName: ./.gitignore\nFileType: OTHER\nFileChecksum: SHA1: 8b36e6b2606c7dbd175ad886ec9e2388fb9d32d5\nFileChecksum: SHA256: 4ff932fd95c2ba8743ef81cea8acb30833040ad70b610bb5882bd7f59e9249fa\nFileChecksum: MD5: 8318cb12f3c01e49ac32640f75fedef5\nFileChecksum: SSDEEP: 48:u85rtZyUsMbZRTr+B49oKbYI3Psw2zcGARq6FWHspYjI/rDdm0we0FgXyguufo:nrtZjRH+C9t9s/zcg9+rD+VFwygRfo\nFileSize: 2 Kb (2806 bytes)\n\nFileName: ./.gitattributes\nFileType: OTHER\nFileChecksum: SHA1: 2c1741fb1014d41275cf6193f806ae86cc951f25\nFileChecksum: SHA256: 45a7cbb7d9942ba7ffce0b20bc8dbe2d1196533bc6e4bd245871d77fb1eedfdc\nFileChecksum: MD5: 13f0aecd22cc1f06c8225ae5e692ff31\nFileChecksum: SSDEEP: 24:DBZg2ajyswKYQgPuC1MMThIqGZeuHb4DYqnYqtYqDqn3YqDCYqdtYqjCYqgYqL3C:FZ9ae2uFGksyziXnELavK0eZtFeL7\nFileSize: 2 Kb (2518 bytes)\n\nFileName: ./.spdx\nFileType: OTHER\nFileChecksum: SHA1: 1dd539631b4ecbc0039afc590933105144ed2858\nFileChecksum: SHA256: 31df8e522ce1071db9df4b548db94673da62fca88b025207dccd68f337d55dc5\nFileChecksum: MD5: 064806030cd72d84d829eeeadd2f7022\nFileChecksum: SSDEEP: 192:zIbFKFJr0uLsxiV0TbmHxiZvBx198QRQWbt4IAQrvvM1VtnunP2paoaFqzNsH:EwrVLsxiVWbmH+DQxSvkVtun+nzN2\nFileSize: 16 Kb (16384 bytes)\n\n", "totalcomments": 481, "rank": "B", "rankingscore": 25, "reccomendedteams": ["Core", "Network"], "mainlanguage": "C#", "totallines": 4398, "breakdown": ["Razor (25%)", "ASP.Net (7%)", "C# (60%)", "MSBuild script (1%)", "Git Ignore (1%)", "CSS (1%)"], "technologylist": ["NewtonsoftJson", "Linq"], "totalcode": 3400}
